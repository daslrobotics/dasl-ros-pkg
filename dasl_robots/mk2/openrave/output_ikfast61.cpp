/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-06-27 00:01:30.774152
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKsin(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[0]);
x4=IKcos(j[2]);
x5=IKcos(j[4]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[3]);
x9=IKcos(j[1]);
x10=IKsin(j[6]);
x11=IKcos(j[5]);
x12=IKsin(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.0741000000000000))*(x8));
x15=((IkReal(1.00000000000000))*(x12));
x16=((IkReal(1.00000000000000))*(x0));
x17=((IkReal(1.00000000000000))*(x2));
x18=((IkReal(0.224450000000000))*(x0));
x19=((IkReal(0.0741000000000000))*(x5));
x20=((IkReal(1.00000000000000))*(x5));
x21=((IkReal(0.0741000000000000))*(x7));
x22=((IkReal(0.317980000000000))*(x9));
x23=((IkReal(1.00000000000000))*(x11));
x24=((IkReal(0.224450000000000))*(x3));
x25=((x1)*(x8));
x26=((x6)*(x9));
x27=((x1)*(x2));
x28=((IkReal(-1.00000000000000))*(x6));
x29=((x8)*(x9));
x30=((x3)*(x4));
x31=((x1)*(x6));
x32=((x0)*(x4));
x33=((x4)*(x7)*(x9));
x34=((x16)*(x29));
x35=((x17)*(x26));
x36=((x1)*(x17)*(x3));
x37=((((IkReal(-1.00000000000000))*(x17)*(x3)))+(((x1)*(x32))));
x38=((((x0)*(x27)))+(x30));
x39=((((x2)*(x29)))+(x31));
x40=((((IkReal(-1.00000000000000))*(x35)))+(x25));
x41=((((IkReal(-1.00000000000000))*(x36)))+(x32));
x42=((((IkReal(-1.00000000000000))*(x16)*(x4)))+(x36));
x43=((((IkReal(-1.00000000000000))*(x30)))+(((IkReal(-1.00000000000000))*(x16)*(x27))));
x44=((((IkReal(-1.00000000000000))*(x1)*(x30)))+(((IkReal(-1.00000000000000))*(x16)*(x2))));
x45=((x11)*(x39));
x46=((x41)*(x8));
x47=((x37)*(x7));
x48=((x44)*(x7));
x49=((x43)*(x6));
x50=((((IkReal(-1.00000000000000))*(x16)*(x26)))+(((x38)*(x8))));
x51=((x33)+(((x40)*(x5))));
x52=((x46)+(((x26)*(x3))));
x53=((((x4)*(x5)*(x9)))+(((x7)*(((((IkReal(-1.00000000000000))*(x25)))+(x35))))));
x54=((((x29)*(x3)))+(((x42)*(x6))));
x55=((((IkReal(-1.00000000000000))*(x34)))+(x49));
x56=((x11)*(x50));
x57=((x11)*(x52));
x58=((x5)*(x55));
x59=((x47)+(x58));
x60=((x48)+(((x5)*(x54))));
x61=((((x7)*(((((x28)*(x43)))+(x34)))))+(((x37)*(x5))));
x62=((x12)*(x60));
x63=((((IkReal(-1.00000000000000))*(x44)*(x5)))+(((x7)*(((((IkReal(-1.00000000000000))*(x28)*(x42)))+(((IkReal(1.00000000000000))*(x29)*(x3))))))));
eerot[0]=((((x10)*(x61)))+(((x13)*(((((x12)*(x59)))+(x56))))));
eerot[1]=((((x13)*(x61)))+(((x10)*(((((IkReal(-1.00000000000000))*(x23)*(x50)))+(((IkReal(-1.00000000000000))*(x15)*(x59))))))));
eerot[2]=((((x12)*(x50)))+(((x11)*(((((IkReal(-1.00000000000000))*(x47)))+(((IkReal(-1.00000000000000))*(x20)*(x55))))))));
eetrans[0]=((((x12)*(((((x19)*(x55)))+(((x21)*(x37)))))))+(((IkReal(-1.00000000000000))*(x0)*(x22)))+(((IkReal(-1.00000000000000))*(x18)*(x26)))+(((x8)*(((((x18)*(x27)))+(((x24)*(x4)))))))+(((x11)*(((((x14)*(x38)))+(((IkReal(-0.0741000000000000))*(x0)*(x26))))))));
eerot[3]=((((x13)*(((((x12)*(x51)))+(x45)))))+(((x10)*(x53))));
eerot[4]=((((x13)*(x53)))+(((x10)*(((((IkReal(-1.00000000000000))*(x15)*(x51)))+(((IkReal(-1.00000000000000))*(x23)*(x39))))))));
eerot[5]=((((x11)*(((((IkReal(-1.00000000000000))*(x33)))+(((IkReal(-1.00000000000000))*(x20)*(x40)))))))+(((x12)*(x39))));
eetrans[1]=((IkReal(-0.249520000000000))+(((IkReal(0.317980000000000))*(x1)))+(((IkReal(0.224450000000000))*(x2)*(x29)))+(((x12)*(((((x21)*(x4)*(x9)))+(((x19)*(x40)))))))+(((x11)*(((((IkReal(0.0741000000000000))*(x31)))+(((x14)*(x2)*(x9)))))))+(((IkReal(0.224450000000000))*(x31))));
eerot[6]=((((x13)*(((((IkReal(-1.00000000000000))*(x23)*(x52)))+(((IkReal(-1.00000000000000))*(x15)*(x60)))))))+(((x10)*(x63))));
eerot[7]=((((x13)*(x63)))+(((x10)*(((x57)+(x62))))));
eerot[8]=((((x11)*(x60)))+(((x12)*(((((IkReal(-1.00000000000000))*(x46)))+(((IkReal(-1.00000000000000))*(x26)*(x3))))))));
eetrans[2]=((IkReal(-0.363780000000000))+(((x11)*(((((IkReal(-0.0741000000000000))*(x26)*(x3)))+(((IkReal(-1.00000000000000))*(x14)*(x41)))))))+(((IkReal(-1.00000000000000))*(x24)*(x26)))+(((IkReal(-1.00000000000000))*(x22)*(x3)))+(((x8)*(((((IkReal(-1.00000000000000))*(x18)*(x4)))+(((x24)*(x27)))))))+(((x12)*(((((IkReal(-1.00000000000000))*(x21)*(x44)))+(((IkReal(-1.00000000000000))*(x19)*(x54))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,j9,cj9,sj9,htj9,j8,cj8,sj8,htj8,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij9[2], _nj9,_ij8[2], _nj8;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1;  _ij8[0] = -1; _ij8[1] = -1; _nj8 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j8=pfree[0]; cj8=cos(pfree[0]); sj8=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=px;
new_r10=((IkReal(-1.00000000000000))*(r20));
new_r11=((IkReal(-1.00000000000000))*(r21));
new_r12=((IkReal(-1.00000000000000))*(r22));
new_py=((IkReal(-0.363780000000000))+(((IkReal(-1.00000000000000))*(pz))));
new_r20=r10;
new_r21=r11;
new_r22=r12;
new_pz=((IkReal(0.249520000000000))+(py));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal dummyeval[1];
IkReal x64=(npx)*(npx);
IkReal x65=(npy)*(npy);
IkReal x66=(cj8)*(cj8);
IkReal x67=((IkReal(6.05802968960864))*(cj8));
IkReal x68=((IkReal(9.17493093004493))*(x66));
dummyeval[0]=((x64)+(x65)+(((x64)*(x68)))+(((x64)*(x67)))+(((x65)*(x68)))+(((x65)*(x67))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x69=(npx)*(npx);
IkReal x70=(npy)*(npy);
IkReal x71=(cj8)*(cj8);
IkReal x72=((IkReal(6.05802968960864))*(cj8));
IkReal x73=((IkReal(9.17493093004493))*(x71));
dummyeval[0]=((((x69)*(x72)))+(((x69)*(x73)))+(x70)+(x69)+(((x70)*(x73)))+(((x70)*(x72))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
IkReal x74=((IkReal(0.448900000000000))*(cj8));
IkReal x75=((((npx)*(x74)))+(((IkReal(0.148200000000000))*(npx))));
IkReal x76=((((IkReal(-0.148200000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x74))));
if( IKabs(x75) < IKFAST_ATAN2_MAGTHRESH && IKabs(x76) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x77=((IkReal(1.00000000000000))*(IKatan2(x75, x76)));
if( ((((x75)*(x75))+((x76)*(x76)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((x75)*(x75))+((x76)*(x76)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x75)*(x75))+((x76)*(x76))))))):(IkReal)1.0e30))*(((IkReal(0.0452426679000000))+(((IkReal(0.448900000000000))*(npz)*(sj8)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0332634900000000))*(cj8))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((x75)*(x75))+((x76)*(x76)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x75)*(x75))+((x76)*(x76))))))):(IkReal)1.0e30))*(((IkReal(0.0452426679000000))+(((IkReal(0.448900000000000))*(npz)*(sj8)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0332634900000000))*(cj8))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x78=IKasin(((((IKabs(IKabs(IKsqrt((((x75)*(x75))+((x76)*(x76)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x75)*(x75))+((x76)*(x76))))))):(IkReal)1.0e30))*(((IkReal(0.0452426679000000))+(((IkReal(0.448900000000000))*(npz)*(sj8)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0332634900000000))*(cj8)))))));
j9array[0]=((((IkReal(-1.00000000000000))*(x77)))+(((IkReal(-1.00000000000000))*(x78))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x77)))+(x78));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
sj6array[0]=((IkReal(-1.02281787177078))+(((IkReal(-1.03824247770556))*(cj9)*(npx)))+(((IkReal(7.00568473485536))*(pp)))+(((IkReal(1.03824247770556))*(npy)*(sj9))));
if( sj6array[0] >= -1-IKFAST_SINCOS_THRESH && sj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKasin(sj6array[0]);
    cj6array[0] = IKcos(j6array[0]);
    sj6array[1] = sj6array[0];
    j6array[1] = j6array[0] > 0 ? (IKPI-j6array[0]) : (-IKPI-j6array[0]);
    cj6array[1] = -cj6array[0];
}
else if( isnan(sj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((IkReal(-0.224450000000000))+(((cj8)*(cj9)*(npx)))+(((npz)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(npy)*(sj9)))+(((IkReal(-0.0741000000000000))*(cj8)))+(((IkReal(-0.317980000000000))*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj6);
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x79=((cj6)*(sj8));
dummyeval[0]=cj6;
dummyeval[1]=((((IkReal(-13.4952766531714))*(npy)*(sj9)*(x79)))+(((IkReal(13.4952766531714))*(cj9)*(npx)*(x79)))+(((IkReal(-13.4952766531714))*(cj6)*(cj8)*(npz)))+(((IkReal(-1.00000000000000))*(x79))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj6;
dummyeval[1]=((((cj6)*(cj9)*(npy)))+(((cj6)*(npx)*(sj9))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x80=((IkReal(1.00000000000000))*(pp));
IkReal x81=((cj9)*(npx));
IkReal x82=((IkReal(0.448900000000000))*(cj8));
IkReal x83=((npy)*(sj9));
IkReal x84=((IkReal(1.00000000000000))*(cj8));
IkReal x85=((npz)*(sj8));
IkReal x86=((IkReal(0.148200000000000))*(x81));
IkReal x87=((IkReal(0.148200000000000))*(x83));
IkReal x88=((x80)+(x87));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((((npx)*(sj9)))+(((cj9)*(npy))));
evalcond[2]=((IkReal(0.288739494900000))+(x86)+(((IkReal(-1.00000000000000))*(x88))));
evalcond[3]=((IkReal(-0.542430000000000))+(((IkReal(-1.00000000000000))*(x83)*(x84)))+(((IkReal(-0.0741000000000000))*(cj8)))+(x85)+(((cj8)*(x81))));
evalcond[4]=((((IkReal(-0.0741000000000000))*(sj8)))+(((IkReal(-1.00000000000000))*(sj8)*(x83)))+(((sj8)*(x81)))+(((IkReal(-1.00000000000000))*(npz)*(x84))));
evalcond[5]=((IkReal(0.0452426679000000))+(((IkReal(-1.00000000000000))*(x82)*(x83)))+(((x81)*(x82)))+(x86)+(((IkReal(-0.0332634900000000))*(cj8)))+(((IkReal(-1.00000000000000))*(x88)))+(((IkReal(0.448900000000000))*(x85))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
if( IKabs(((((npx)*(sj9)))+(((cj9)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-0.0741000000000000))*(sj8)))+(((cj9)*(npx)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(sj8)*(sj9))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x89=IKatan2(((((npx)*(sj9)))+(((cj9)*(npy)))), ((((IkReal(-0.0741000000000000))*(sj8)))+(((cj9)*(npx)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(sj8)*(sj9)))));
j7array[0]=((IkReal(-1.00000000000000))*(x89));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x89))));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
IkReal x90=IKcos(j7);
IkReal x91=IKsin(j7);
IkReal x92=((IkReal(1.00000000000000))*(npy));
IkReal x93=((sj8)*(x90));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj9)*(x91)*(x92)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x90)))+(((IkReal(-0.0741000000000000))*(x93)))+(((IkReal(-1.00000000000000))*(sj9)*(x92)*(x93)))+(((cj9)*(npx)*(x93)))+(((IkReal(-1.00000000000000))*(npx)*(sj9)*(x91))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x287=((IkReal(1.00000000000000))*(pp));
IkReal x288=((cj9)*(npx));
IkReal x289=((IkReal(0.448900000000000))*(cj8));
IkReal x290=((npy)*(sj9));
IkReal x291=((IkReal(1.00000000000000))*(cj8));
IkReal x292=((npz)*(sj8));
IkReal x293=((IkReal(0.148200000000000))*(x288));
IkReal x294=((IkReal(0.148200000000000))*(x290));
IkReal x295=((x294)+(x287));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((((npx)*(sj9)))+(((cj9)*(npy))));
evalcond[2]=((IkReal(0.00325705090000000))+(((IkReal(-1.00000000000000))*(x295)))+(x293));
evalcond[3]=((IkReal(0.0935300000000000))+(((IkReal(-1.00000000000000))*(x290)*(x291)))+(x292)+(((IkReal(-0.0741000000000000))*(cj8)))+(((cj8)*(x288))));
evalcond[4]=((((IkReal(-1.00000000000000))*(npz)*(x291)))+(((IkReal(-0.0741000000000000))*(sj8)))+(((sj8)*(x288)))+(((IkReal(-1.00000000000000))*(sj8)*(x290))));
evalcond[5]=((IkReal(0.0452426679000000))+(((IkReal(-1.00000000000000))*(x289)*(x290)))+(((IkReal(-1.00000000000000))*(x295)))+(((IkReal(0.448900000000000))*(x292)))+(x293)+(((x288)*(x289)))+(((IkReal(-0.0332634900000000))*(cj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
if( IKabs(((((npx)*(sj9)))+(((cj9)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-0.0741000000000000))*(sj8)))+(((cj9)*(npx)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(sj8)*(sj9))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x296=IKatan2(((((npx)*(sj9)))+(((cj9)*(npy)))), ((((IkReal(-0.0741000000000000))*(sj8)))+(((cj9)*(npx)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(sj8)*(sj9)))));
j7array[0]=((IkReal(-1.00000000000000))*(x296));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x296))));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
IkReal x297=IKcos(j7);
IkReal x298=IKsin(j7);
IkReal x299=((IkReal(1.00000000000000))*(npy));
IkReal x300=((sj8)*(x297));
evalcond[0]=((((cj9)*(npx)*(x300)))+(((IkReal(-1.00000000000000))*(sj9)*(x299)*(x300)))+(((IkReal(-1.00000000000000))*(cj9)*(x298)*(x299)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x297)))+(((IkReal(-1.00000000000000))*(npx)*(sj9)*(x298)))+(((IkReal(-0.0741000000000000))*(x300))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x301=((npx)*(sj8));
IkReal x302=((IkReal(50000.0000000000))*(npy));
IkReal x303=((npx)*(sj9));
IkReal x304=((IkReal(15899.0000000000))*(cj6));
IkReal x305=((cj8)*(npz));
IkReal x306=((cj9)*(npy));
IkReal x307=((IkReal(50000.0000000000))*(cj9)*(sj8)*(sj9));
if( IKabs(((IkReal(6.28970375495314e-5))*(((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj9)*(x302)))+(((IkReal(-50000.0000000000))*(x303))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((x303)*(x304)))+(((x304)*(x306))))) != 0)?((IkReal)1/(((((x303)*(x304)))+(((x304)*(x306)))))):(IkReal)1.0e30))*(((((x301)*(x302)*((cj9)*(cj9))))+(((IkReal(-1.00000000000000))*(x301)*(x302)*((sj9)*(sj9))))+(((IkReal(-50000.0000000000))*(x303)*(x305)))+(((IkReal(-1.00000000000000))*(cj9)*(x302)*(x305)))+(((IkReal(50000.0000000000))*(cj9)*(x301)*(x303)))+(((IkReal(-3705.00000000000))*(sj8)*(x306)))+(((IkReal(-3705.00000000000))*(sj9)*(x301)))+(((IkReal(-1.00000000000000))*(sj8)*(sj9)*(x302)*(x306))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(6.28970375495314e-5))*(((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj9)*(x302)))+(((IkReal(-50000.0000000000))*(x303)))))))+IKsqr(((((IKabs(((((x303)*(x304)))+(((x304)*(x306))))) != 0)?((IkReal)1/(((((x303)*(x304)))+(((x304)*(x306)))))):(IkReal)1.0e30))*(((((x301)*(x302)*((cj9)*(cj9))))+(((IkReal(-1.00000000000000))*(x301)*(x302)*((sj9)*(sj9))))+(((IkReal(-50000.0000000000))*(x303)*(x305)))+(((IkReal(-1.00000000000000))*(cj9)*(x302)*(x305)))+(((IkReal(50000.0000000000))*(cj9)*(x301)*(x303)))+(((IkReal(-3705.00000000000))*(sj8)*(x306)))+(((IkReal(-3705.00000000000))*(sj9)*(x301)))+(((IkReal(-1.00000000000000))*(sj8)*(sj9)*(x302)*(x306)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((IkReal(6.28970375495314e-5))*(((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj9)*(x302)))+(((IkReal(-50000.0000000000))*(x303)))))), ((((IKabs(((((x303)*(x304)))+(((x304)*(x306))))) != 0)?((IkReal)1/(((((x303)*(x304)))+(((x304)*(x306)))))):(IkReal)1.0e30))*(((((x301)*(x302)*((cj9)*(cj9))))+(((IkReal(-1.00000000000000))*(x301)*(x302)*((sj9)*(sj9))))+(((IkReal(-50000.0000000000))*(x303)*(x305)))+(((IkReal(-1.00000000000000))*(cj9)*(x302)*(x305)))+(((IkReal(50000.0000000000))*(cj9)*(x301)*(x303)))+(((IkReal(-3705.00000000000))*(sj8)*(x306)))+(((IkReal(-3705.00000000000))*(sj9)*(x301)))+(((IkReal(-1.00000000000000))*(sj8)*(sj9)*(x302)*(x306)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x308=IKcos(j7);
IkReal x309=IKsin(j7);
IkReal x310=((IkReal(0.317980000000000))*(cj6));
IkReal x311=((sj8)*(sj9));
IkReal x312=((IkReal(0.0741000000000000))*(sj8));
IkReal x313=((npx)*(sj9));
IkReal x314=((cj9)*(npy));
IkReal x315=((IkReal(1.00000000000000))*(npy));
IkReal x316=((cj9)*(npx)*(sj8));
IkReal x317=((IkReal(1.00000000000000))*(cj8)*(npz));
IkReal x318=((x309)*(x315));
evalcond[0]=((x314)+(x313)+(((x309)*(x310))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x308)*(x310)))+(x316)+(((IkReal(-1.00000000000000))*(x312)))+(((IkReal(-1.00000000000000))*(x317)))+(((IkReal(-1.00000000000000))*(x311)*(x315))));
evalcond[2]=((((x308)*(x314)))+(((x308)*(x313)))+(((x309)*(x316)))+(((IkReal(-1.00000000000000))*(x309)*(x317)))+(((IkReal(-1.00000000000000))*(x309)*(x312)))+(((IkReal(-1.00000000000000))*(x311)*(x318))));
evalcond[3]=((((x308)*(x316)))+(((IkReal(-1.00000000000000))*(x308)*(x312)))+(((IkReal(-1.00000000000000))*(x308)*(x317)))+(((IkReal(-1.00000000000000))*(x309)*(x313)))+(((IkReal(-1.00000000000000))*(x309)*(x314)))+(((IkReal(-1.00000000000000))*(x310)))+(((IkReal(-1.00000000000000))*(x308)*(x311)*(x315))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x319=((cj9)*(npx));
IkReal x320=((IkReal(794950000.000000))*(cj6));
IkReal x321=((npy)*(sj9));
if( IKabs(((IkReal(6.28970375495314e-5))*(((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(-50000.0000000000))*(npx)*(sj9)))+(((IkReal(-50000.0000000000))*(cj9)*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(sj8)*(x320)*(x321)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x320)))+(((IkReal(-58905795.0000000))*(cj6)*(sj8)))+(((sj8)*(x319)*(x320))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(sj8)*(x320)*(x321)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x320)))+(((IkReal(-58905795.0000000))*(cj6)*(sj8)))+(((sj8)*(x319)*(x320)))))):(IkReal)1.0e30))*(((((IkReal(-2500000000.00000))*((npx)*(npx))*((sj9)*(sj9))))+(((IkReal(-5000000000.00000))*(x319)*(x321)))+(((IkReal(252778201.000000))*((cj6)*(cj6))))+(((IkReal(-2500000000.00000))*((cj9)*(cj9))*((npy)*(npy)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(6.28970375495314e-5))*(((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(-50000.0000000000))*(npx)*(sj9)))+(((IkReal(-50000.0000000000))*(cj9)*(npy)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(sj8)*(x320)*(x321)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x320)))+(((IkReal(-58905795.0000000))*(cj6)*(sj8)))+(((sj8)*(x319)*(x320))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(sj8)*(x320)*(x321)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x320)))+(((IkReal(-58905795.0000000))*(cj6)*(sj8)))+(((sj8)*(x319)*(x320)))))):(IkReal)1.0e30))*(((((IkReal(-2500000000.00000))*((npx)*(npx))*((sj9)*(sj9))))+(((IkReal(-5000000000.00000))*(x319)*(x321)))+(((IkReal(252778201.000000))*((cj6)*(cj6))))+(((IkReal(-2500000000.00000))*((cj9)*(cj9))*((npy)*(npy))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((IkReal(6.28970375495314e-5))*(((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(-50000.0000000000))*(npx)*(sj9)))+(((IkReal(-50000.0000000000))*(cj9)*(npy)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(sj8)*(x320)*(x321)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x320)))+(((IkReal(-58905795.0000000))*(cj6)*(sj8)))+(((sj8)*(x319)*(x320))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(sj8)*(x320)*(x321)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x320)))+(((IkReal(-58905795.0000000))*(cj6)*(sj8)))+(((sj8)*(x319)*(x320)))))):(IkReal)1.0e30))*(((((IkReal(-2500000000.00000))*((npx)*(npx))*((sj9)*(sj9))))+(((IkReal(-5000000000.00000))*(x319)*(x321)))+(((IkReal(252778201.000000))*((cj6)*(cj6))))+(((IkReal(-2500000000.00000))*((cj9)*(cj9))*((npy)*(npy))))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x322=IKcos(j7);
IkReal x323=IKsin(j7);
IkReal x324=((IkReal(0.317980000000000))*(cj6));
IkReal x325=((sj8)*(sj9));
IkReal x326=((IkReal(0.0741000000000000))*(sj8));
IkReal x327=((npx)*(sj9));
IkReal x328=((cj9)*(npy));
IkReal x329=((IkReal(1.00000000000000))*(npy));
IkReal x330=((cj9)*(npx)*(sj8));
IkReal x331=((IkReal(1.00000000000000))*(cj8)*(npz));
IkReal x332=((x323)*(x329));
evalcond[0]=((((x323)*(x324)))+(x327)+(x328));
evalcond[1]=((((IkReal(-1.00000000000000))*(x325)*(x329)))+(((IkReal(-1.00000000000000))*(x326)))+(((IkReal(-1.00000000000000))*(x322)*(x324)))+(x330)+(((IkReal(-1.00000000000000))*(x331))));
evalcond[2]=((((x322)*(x327)))+(((x322)*(x328)))+(((IkReal(-1.00000000000000))*(x323)*(x326)))+(((IkReal(-1.00000000000000))*(x323)*(x331)))+(((x323)*(x330)))+(((IkReal(-1.00000000000000))*(x325)*(x332))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x323)*(x327)))+(((IkReal(-1.00000000000000))*(x323)*(x328)))+(((IkReal(-1.00000000000000))*(x324)))+(((IkReal(-1.00000000000000))*(x322)*(x326)))+(((IkReal(-1.00000000000000))*(x322)*(x331)))+(((x322)*(x330)))+(((IkReal(-1.00000000000000))*(x322)*(x325)*(x329))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x333=((IkReal(50000.0000000000))*(npy));
IkReal x334=((IkReal(50000.0000000000))*(npx));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj9)*(x333)))+(((IkReal(-1.00000000000000))*(sj9)*(x334))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-3705.00000000000))*(sj8)))+(((IkReal(-1.00000000000000))*(sj8)*(sj9)*(x333)))+(((IkReal(-50000.0000000000))*(cj8)*(npz)))+(((cj9)*(sj8)*(x334))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(cj9)*(x333)))+(((IkReal(-1.00000000000000))*(sj9)*(x334)))))), ((gconst0)*(((((IkReal(-3705.00000000000))*(sj8)))+(((IkReal(-1.00000000000000))*(sj8)*(sj9)*(x333)))+(((IkReal(-50000.0000000000))*(cj8)*(npz)))+(((cj9)*(sj8)*(x334)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x335=IKcos(j7);
IkReal x336=IKsin(j7);
IkReal x337=((IkReal(0.317980000000000))*(cj6));
IkReal x338=((sj8)*(sj9));
IkReal x339=((IkReal(0.0741000000000000))*(sj8));
IkReal x340=((npx)*(sj9));
IkReal x341=((cj9)*(npy));
IkReal x342=((IkReal(1.00000000000000))*(npy));
IkReal x343=((cj9)*(npx)*(sj8));
IkReal x344=((IkReal(1.00000000000000))*(cj8)*(npz));
IkReal x345=((x336)*(x342));
evalcond[0]=((((x336)*(x337)))+(x340)+(x341));
evalcond[1]=((x343)+(((IkReal(-1.00000000000000))*(x339)))+(((IkReal(-1.00000000000000))*(x344)))+(((IkReal(-1.00000000000000))*(x338)*(x342)))+(((IkReal(-1.00000000000000))*(x335)*(x337))));
evalcond[2]=((((x335)*(x341)))+(((x335)*(x340)))+(((x336)*(x343)))+(((IkReal(-1.00000000000000))*(x336)*(x344)))+(((IkReal(-1.00000000000000))*(x338)*(x345)))+(((IkReal(-1.00000000000000))*(x336)*(x339))));
evalcond[3]=((((x335)*(x343)))+(((IkReal(-1.00000000000000))*(x335)*(x344)))+(((IkReal(-1.00000000000000))*(x336)*(x340)))+(((IkReal(-1.00000000000000))*(x336)*(x341)))+(((IkReal(-1.00000000000000))*(x335)*(x338)*(x342)))+(((IkReal(-1.00000000000000))*(x337)))+(((IkReal(-1.00000000000000))*(x335)*(x339))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
IkReal x346=((IkReal(0.448900000000000))*(cj8));
IkReal x347=((((npx)*(x346)))+(((IkReal(0.148200000000000))*(npx))));
IkReal x348=((((IkReal(-0.148200000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x346))));
if( IKabs(x347) < IKFAST_ATAN2_MAGTHRESH && IKabs(x348) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x349=((IkReal(1.00000000000000))*(IKatan2(x347, x348)));
if( ((((x347)*(x347))+((x348)*(x348)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((x347)*(x347))+((x348)*(x348)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x347)*(x347))+((x348)*(x348))))))):(IkReal)1.0e30))*(((IkReal(0.0452426679000000))+(((IkReal(0.448900000000000))*(npz)*(sj8)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0332634900000000))*(cj8))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((x347)*(x347))+((x348)*(x348)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x347)*(x347))+((x348)*(x348))))))):(IkReal)1.0e30))*(((IkReal(0.0452426679000000))+(((IkReal(0.448900000000000))*(npz)*(sj8)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0332634900000000))*(cj8))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x350=IKasin(((((IKabs(IKabs(IKsqrt((((x347)*(x347))+((x348)*(x348)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x347)*(x347))+((x348)*(x348))))))):(IkReal)1.0e30))*(((IkReal(0.0452426679000000))+(((IkReal(0.448900000000000))*(npz)*(sj8)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0332634900000000))*(cj8)))))));
j9array[0]=((((IkReal(-1.00000000000000))*(x350)))+(((IkReal(-1.00000000000000))*(x349))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((IkReal(3.14159265358979))+(x350)+(((IkReal(-1.00000000000000))*(x349))));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
sj6array[0]=((IkReal(-1.02281787177078))+(((IkReal(-1.03824247770556))*(cj9)*(npx)))+(((IkReal(7.00568473485536))*(pp)))+(((IkReal(1.03824247770556))*(npy)*(sj9))));
if( sj6array[0] >= -1-IKFAST_SINCOS_THRESH && sj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKasin(sj6array[0]);
    cj6array[0] = IKcos(j6array[0]);
    sj6array[1] = sj6array[0];
    j6array[1] = j6array[0] > 0 ? (IKPI-j6array[0]) : (-IKPI-j6array[0]);
    cj6array[1] = -cj6array[0];
}
else if( isnan(sj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((IkReal(-0.224450000000000))+(((cj8)*(cj9)*(npx)))+(((npz)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(npy)*(sj9)))+(((IkReal(-0.0741000000000000))*(cj8)))+(((IkReal(-0.317980000000000))*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj6);
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x351=((cj6)*(sj8));
dummyeval[0]=cj6;
dummyeval[1]=((((IkReal(-1.00000000000000))*(x351)))+(((IkReal(13.4952766531714))*(cj9)*(npx)*(x351)))+(((IkReal(-13.4952766531714))*(cj6)*(cj8)*(npz)))+(((IkReal(-13.4952766531714))*(npy)*(sj9)*(x351))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj6;
dummyeval[1]=((((cj6)*(cj9)*(npy)))+(((cj6)*(npx)*(sj9))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x352=((IkReal(1.00000000000000))*(pp));
IkReal x353=((cj9)*(npx));
IkReal x354=((IkReal(0.448900000000000))*(cj8));
IkReal x355=((npy)*(sj9));
IkReal x356=((IkReal(1.00000000000000))*(cj8));
IkReal x357=((npz)*(sj8));
IkReal x358=((IkReal(0.148200000000000))*(x353));
IkReal x359=((IkReal(0.148200000000000))*(x355));
IkReal x360=((x352)+(x359));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((((npx)*(sj9)))+(((cj9)*(npy))));
evalcond[2]=((IkReal(0.288739494900000))+(((IkReal(-1.00000000000000))*(x360)))+(x358));
evalcond[3]=((IkReal(-0.542430000000000))+(((cj8)*(x353)))+(x357)+(((IkReal(-0.0741000000000000))*(cj8)))+(((IkReal(-1.00000000000000))*(x355)*(x356))));
evalcond[4]=((((IkReal(-1.00000000000000))*(npz)*(x356)))+(((IkReal(-1.00000000000000))*(sj8)*(x355)))+(((IkReal(-0.0741000000000000))*(sj8)))+(((sj8)*(x353))));
evalcond[5]=((IkReal(0.0452426679000000))+(((IkReal(-1.00000000000000))*(x360)))+(((x353)*(x354)))+(x358)+(((IkReal(-0.0332634900000000))*(cj8)))+(((IkReal(-1.00000000000000))*(x354)*(x355)))+(((IkReal(0.448900000000000))*(x357))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
if( IKabs(((((npx)*(sj9)))+(((cj9)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-0.0741000000000000))*(sj8)))+(((cj9)*(npx)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(sj8)*(sj9))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x361=IKatan2(((((npx)*(sj9)))+(((cj9)*(npy)))), ((((IkReal(-0.0741000000000000))*(sj8)))+(((cj9)*(npx)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(sj8)*(sj9)))));
j7array[0]=((IkReal(-1.00000000000000))*(x361));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x361))));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
IkReal x362=IKcos(j7);
IkReal x363=IKsin(j7);
IkReal x364=((IkReal(1.00000000000000))*(npy));
IkReal x365=((sj8)*(x362));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj9)*(x363)))+(((IkReal(-0.0741000000000000))*(x365)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x362)))+(((IkReal(-1.00000000000000))*(cj9)*(x363)*(x364)))+(((IkReal(-1.00000000000000))*(sj9)*(x364)*(x365)))+(((cj9)*(npx)*(x365))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x366=((IkReal(1.00000000000000))*(pp));
IkReal x367=((cj9)*(npx));
IkReal x368=((IkReal(0.448900000000000))*(cj8));
IkReal x369=((npy)*(sj9));
IkReal x370=((IkReal(1.00000000000000))*(cj8));
IkReal x371=((npz)*(sj8));
IkReal x372=((IkReal(0.148200000000000))*(x367));
IkReal x373=((IkReal(0.148200000000000))*(x369));
IkReal x374=((x373)+(x366));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((((npx)*(sj9)))+(((cj9)*(npy))));
evalcond[2]=((IkReal(0.00325705090000000))+(((IkReal(-1.00000000000000))*(x374)))+(x372));
evalcond[3]=((IkReal(0.0935300000000000))+(x371)+(((IkReal(-0.0741000000000000))*(cj8)))+(((IkReal(-1.00000000000000))*(x369)*(x370)))+(((cj8)*(x367))));
evalcond[4]=((((sj8)*(x367)))+(((IkReal(-0.0741000000000000))*(sj8)))+(((IkReal(-1.00000000000000))*(sj8)*(x369)))+(((IkReal(-1.00000000000000))*(npz)*(x370))));
evalcond[5]=((IkReal(0.0452426679000000))+(((IkReal(0.448900000000000))*(x371)))+(((IkReal(-1.00000000000000))*(x374)))+(x372)+(((IkReal(-0.0332634900000000))*(cj8)))+(((x367)*(x368)))+(((IkReal(-1.00000000000000))*(x368)*(x369))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
if( IKabs(((((npx)*(sj9)))+(((cj9)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-0.0741000000000000))*(sj8)))+(((cj9)*(npx)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(sj8)*(sj9))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x375=IKatan2(((((npx)*(sj9)))+(((cj9)*(npy)))), ((((IkReal(-0.0741000000000000))*(sj8)))+(((cj9)*(npx)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(sj8)*(sj9)))));
j7array[0]=((IkReal(-1.00000000000000))*(x375));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x375))));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
IkReal x376=IKcos(j7);
IkReal x377=IKsin(j7);
IkReal x378=((IkReal(1.00000000000000))*(npy));
IkReal x379=((sj8)*(x376));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj9)*(x377)))+(((IkReal(-1.00000000000000))*(sj9)*(x378)*(x379)))+(((IkReal(-1.00000000000000))*(cj9)*(x377)*(x378)))+(((IkReal(-0.0741000000000000))*(x379)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x376)))+(((cj9)*(npx)*(x379))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x380=((npx)*(sj8));
IkReal x381=((IkReal(50000.0000000000))*(npy));
IkReal x382=((npx)*(sj9));
IkReal x383=((IkReal(15899.0000000000))*(cj6));
IkReal x384=((cj8)*(npz));
IkReal x385=((cj9)*(npy));
IkReal x386=((IkReal(50000.0000000000))*(cj9)*(sj8)*(sj9));
if( IKabs(((IkReal(6.28970375495314e-5))*(((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj9)*(x381)))+(((IkReal(-50000.0000000000))*(x382))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((x383)*(x385)))+(((x382)*(x383))))) != 0)?((IkReal)1/(((((x383)*(x385)))+(((x382)*(x383)))))):(IkReal)1.0e30))*(((((x380)*(x381)*((cj9)*(cj9))))+(((IkReal(-1.00000000000000))*(cj9)*(x381)*(x384)))+(((IkReal(-1.00000000000000))*(x380)*(x381)*((sj9)*(sj9))))+(((IkReal(-3705.00000000000))*(sj8)*(x385)))+(((IkReal(-1.00000000000000))*(sj8)*(sj9)*(x381)*(x385)))+(((IkReal(-50000.0000000000))*(x382)*(x384)))+(((IkReal(50000.0000000000))*(cj9)*(x380)*(x382)))+(((IkReal(-3705.00000000000))*(sj9)*(x380))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(6.28970375495314e-5))*(((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj9)*(x381)))+(((IkReal(-50000.0000000000))*(x382)))))))+IKsqr(((((IKabs(((((x383)*(x385)))+(((x382)*(x383))))) != 0)?((IkReal)1/(((((x383)*(x385)))+(((x382)*(x383)))))):(IkReal)1.0e30))*(((((x380)*(x381)*((cj9)*(cj9))))+(((IkReal(-1.00000000000000))*(cj9)*(x381)*(x384)))+(((IkReal(-1.00000000000000))*(x380)*(x381)*((sj9)*(sj9))))+(((IkReal(-3705.00000000000))*(sj8)*(x385)))+(((IkReal(-1.00000000000000))*(sj8)*(sj9)*(x381)*(x385)))+(((IkReal(-50000.0000000000))*(x382)*(x384)))+(((IkReal(50000.0000000000))*(cj9)*(x380)*(x382)))+(((IkReal(-3705.00000000000))*(sj9)*(x380)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((IkReal(6.28970375495314e-5))*(((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj9)*(x381)))+(((IkReal(-50000.0000000000))*(x382)))))), ((((IKabs(((((x383)*(x385)))+(((x382)*(x383))))) != 0)?((IkReal)1/(((((x383)*(x385)))+(((x382)*(x383)))))):(IkReal)1.0e30))*(((((x380)*(x381)*((cj9)*(cj9))))+(((IkReal(-1.00000000000000))*(cj9)*(x381)*(x384)))+(((IkReal(-1.00000000000000))*(x380)*(x381)*((sj9)*(sj9))))+(((IkReal(-3705.00000000000))*(sj8)*(x385)))+(((IkReal(-1.00000000000000))*(sj8)*(sj9)*(x381)*(x385)))+(((IkReal(-50000.0000000000))*(x382)*(x384)))+(((IkReal(50000.0000000000))*(cj9)*(x380)*(x382)))+(((IkReal(-3705.00000000000))*(sj9)*(x380)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x387=IKcos(j7);
IkReal x388=IKsin(j7);
IkReal x389=((IkReal(0.317980000000000))*(cj6));
IkReal x390=((sj8)*(sj9));
IkReal x391=((IkReal(0.0741000000000000))*(sj8));
IkReal x392=((npx)*(sj9));
IkReal x393=((cj9)*(npy));
IkReal x394=((IkReal(1.00000000000000))*(npy));
IkReal x395=((cj9)*(npx)*(sj8));
IkReal x396=((IkReal(1.00000000000000))*(cj8)*(npz));
IkReal x397=((x388)*(x394));
evalcond[0]=((((x388)*(x389)))+(x393)+(x392));
evalcond[1]=((((IkReal(-1.00000000000000))*(x391)))+(((IkReal(-1.00000000000000))*(x396)))+(((IkReal(-1.00000000000000))*(x387)*(x389)))+(x395)+(((IkReal(-1.00000000000000))*(x390)*(x394))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x388)*(x396)))+(((IkReal(-1.00000000000000))*(x388)*(x391)))+(((x387)*(x392)))+(((x387)*(x393)))+(((IkReal(-1.00000000000000))*(x390)*(x397)))+(((x388)*(x395))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x387)*(x391)))+(((IkReal(-1.00000000000000))*(x387)*(x396)))+(((IkReal(-1.00000000000000))*(x388)*(x392)))+(((IkReal(-1.00000000000000))*(x388)*(x393)))+(((IkReal(-1.00000000000000))*(x387)*(x390)*(x394)))+(((IkReal(-1.00000000000000))*(x389)))+(((x387)*(x395))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x398=((cj9)*(npx));
IkReal x399=((IkReal(794950000.000000))*(cj6));
IkReal x400=((npy)*(sj9));
if( IKabs(((IkReal(6.28970375495314e-5))*(((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(-50000.0000000000))*(npx)*(sj9)))+(((IkReal(-50000.0000000000))*(cj9)*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-58905795.0000000))*(cj6)*(sj8)))+(((IkReal(-1.00000000000000))*(sj8)*(x399)*(x400)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x399)))+(((sj8)*(x398)*(x399))))) != 0)?((IkReal)1/(((((IkReal(-58905795.0000000))*(cj6)*(sj8)))+(((IkReal(-1.00000000000000))*(sj8)*(x399)*(x400)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x399)))+(((sj8)*(x398)*(x399)))))):(IkReal)1.0e30))*(((((IkReal(-5000000000.00000))*(x398)*(x400)))+(((IkReal(-2500000000.00000))*((npx)*(npx))*((sj9)*(sj9))))+(((IkReal(252778201.000000))*((cj6)*(cj6))))+(((IkReal(-2500000000.00000))*((cj9)*(cj9))*((npy)*(npy)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(6.28970375495314e-5))*(((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(-50000.0000000000))*(npx)*(sj9)))+(((IkReal(-50000.0000000000))*(cj9)*(npy)))))))+IKsqr(((((IKabs(((((IkReal(-58905795.0000000))*(cj6)*(sj8)))+(((IkReal(-1.00000000000000))*(sj8)*(x399)*(x400)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x399)))+(((sj8)*(x398)*(x399))))) != 0)?((IkReal)1/(((((IkReal(-58905795.0000000))*(cj6)*(sj8)))+(((IkReal(-1.00000000000000))*(sj8)*(x399)*(x400)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x399)))+(((sj8)*(x398)*(x399)))))):(IkReal)1.0e30))*(((((IkReal(-5000000000.00000))*(x398)*(x400)))+(((IkReal(-2500000000.00000))*((npx)*(npx))*((sj9)*(sj9))))+(((IkReal(252778201.000000))*((cj6)*(cj6))))+(((IkReal(-2500000000.00000))*((cj9)*(cj9))*((npy)*(npy))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((IkReal(6.28970375495314e-5))*(((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(-50000.0000000000))*(npx)*(sj9)))+(((IkReal(-50000.0000000000))*(cj9)*(npy)))))), ((((IKabs(((((IkReal(-58905795.0000000))*(cj6)*(sj8)))+(((IkReal(-1.00000000000000))*(sj8)*(x399)*(x400)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x399)))+(((sj8)*(x398)*(x399))))) != 0)?((IkReal)1/(((((IkReal(-58905795.0000000))*(cj6)*(sj8)))+(((IkReal(-1.00000000000000))*(sj8)*(x399)*(x400)))+(((IkReal(-1.00000000000000))*(cj8)*(npz)*(x399)))+(((sj8)*(x398)*(x399)))))):(IkReal)1.0e30))*(((((IkReal(-5000000000.00000))*(x398)*(x400)))+(((IkReal(-2500000000.00000))*((npx)*(npx))*((sj9)*(sj9))))+(((IkReal(252778201.000000))*((cj6)*(cj6))))+(((IkReal(-2500000000.00000))*((cj9)*(cj9))*((npy)*(npy))))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x401=IKcos(j7);
IkReal x402=IKsin(j7);
IkReal x403=((IkReal(0.317980000000000))*(cj6));
IkReal x404=((sj8)*(sj9));
IkReal x405=((IkReal(0.0741000000000000))*(sj8));
IkReal x406=((npx)*(sj9));
IkReal x407=((cj9)*(npy));
IkReal x408=((IkReal(1.00000000000000))*(npy));
IkReal x409=((cj9)*(npx)*(sj8));
IkReal x410=((IkReal(1.00000000000000))*(cj8)*(npz));
IkReal x411=((x402)*(x408));
evalcond[0]=((x407)+(x406)+(((x402)*(x403))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x401)*(x403)))+(x409)+(((IkReal(-1.00000000000000))*(x404)*(x408)))+(((IkReal(-1.00000000000000))*(x410)))+(((IkReal(-1.00000000000000))*(x405))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x402)*(x410)))+(((IkReal(-1.00000000000000))*(x402)*(x405)))+(((IkReal(-1.00000000000000))*(x404)*(x411)))+(((x402)*(x409)))+(((x401)*(x406)))+(((x401)*(x407))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x402)*(x407)))+(((IkReal(-1.00000000000000))*(x402)*(x406)))+(((IkReal(-1.00000000000000))*(x401)*(x404)*(x408)))+(((IkReal(-1.00000000000000))*(x401)*(x405)))+(((IkReal(-1.00000000000000))*(x401)*(x410)))+(((IkReal(-1.00000000000000))*(x403)))+(((x401)*(x409))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x412=((IkReal(50000.0000000000))*(npy));
IkReal x413=((IkReal(50000.0000000000))*(npx));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj9)*(x412)))+(((IkReal(-1.00000000000000))*(sj9)*(x413))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(sj8)*(sj9)*(x412)))+(((IkReal(-3705.00000000000))*(sj8)))+(((IkReal(-50000.0000000000))*(cj8)*(npz)))+(((cj9)*(sj8)*(x413))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(cj9)*(x412)))+(((IkReal(-1.00000000000000))*(sj9)*(x413)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(sj8)*(sj9)*(x412)))+(((IkReal(-3705.00000000000))*(sj8)))+(((IkReal(-50000.0000000000))*(cj8)*(npz)))+(((cj9)*(sj8)*(x413)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x414=IKcos(j7);
IkReal x415=IKsin(j7);
IkReal x416=((IkReal(0.317980000000000))*(cj6));
IkReal x417=((sj8)*(sj9));
IkReal x418=((IkReal(0.0741000000000000))*(sj8));
IkReal x419=((npx)*(sj9));
IkReal x420=((cj9)*(npy));
IkReal x421=((IkReal(1.00000000000000))*(npy));
IkReal x422=((cj9)*(npx)*(sj8));
IkReal x423=((IkReal(1.00000000000000))*(cj8)*(npz));
IkReal x424=((x415)*(x421));
evalcond[0]=((((x415)*(x416)))+(x419)+(x420));
evalcond[1]=((((IkReal(-1.00000000000000))*(x423)))+(x422)+(((IkReal(-1.00000000000000))*(x417)*(x421)))+(((IkReal(-1.00000000000000))*(x414)*(x416)))+(((IkReal(-1.00000000000000))*(x418))));
evalcond[2]=((((x414)*(x420)))+(((x415)*(x422)))+(((x414)*(x419)))+(((IkReal(-1.00000000000000))*(x417)*(x424)))+(((IkReal(-1.00000000000000))*(x415)*(x418)))+(((IkReal(-1.00000000000000))*(x415)*(x423))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x415)*(x419)))+(((x414)*(x422)))+(((IkReal(-1.00000000000000))*(x414)*(x417)*(x421)))+(((IkReal(-1.00000000000000))*(x415)*(x420)))+(((IkReal(-1.00000000000000))*(x414)*(x423)))+(((IkReal(-1.00000000000000))*(x414)*(x418)))+(((IkReal(-1.00000000000000))*(x416))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x94=((IkReal(1.00000000000000))*(sj6));
IkReal x95=((sj7)*(sj9));
IkReal x96=((IkReal(1.00000000000000))*(sj8));
IkReal x97=((cj6)*(cj8));
IkReal x98=((cj9)*(sj7));
IkReal x99=((IkReal(1.00000000000000))*(sj9));
IkReal x100=((sj6)*(x98));
IkReal x101=((cj6)*(x98));
IkReal x102=((IkReal(-1.00000000000000))*(sj9));
IkReal x103=((IkReal(1.00000000000000))*(cj8)*(sj7));
IkReal x104=((x97)+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x94))));
IkReal x105=((((cj6)*(sj8)))+(((cj7)*(cj8)*(sj6))));
IkReal x106=((((IkReal(-1.00000000000000))*(x95)*(x96)))+(((cj7)*(cj9))));
IkReal x107=((((sj8)*(x98)))+(((cj7)*(sj9))));
IkReal x108=((((cj7)*(x97)))+(((IkReal(-1.00000000000000))*(sj8)*(x94))));
IkReal x109=((((IkReal(-1.00000000000000))*(cj6)*(cj7)*(x96)))+(((IkReal(-1.00000000000000))*(cj8)*(x94))));
IkReal x110=((((cj9)*(x104)))+(((sj6)*(x95))));
IkReal x111=((x100)+(((x102)*(x104))));
IkReal x112=((((cj9)*(x109)))+(((cj6)*(x95))));
IkReal x113=((x101)+(((IkReal(-1.00000000000000))*(x109)*(x99))));
new_r00=((((r02)*(x105)))+(((r00)*(x110)))+(((r01)*(x111))));
new_r01=((((r10)*(x110)))+(((r11)*(x111)))+(((r12)*(x105))));
new_r02=((((r22)*(x105)))+(((r20)*(x110)))+(((r21)*(((x100)+(((IkReal(-1.00000000000000))*(x104)*(x99))))))));
new_r10=((((r01)*(x106)))+(((r00)*(x107)))+(((IkReal(-1.00000000000000))*(r02)*(x103))));
new_r11=((((r10)*(x107)))+(((IkReal(-1.00000000000000))*(r12)*(x103)))+(((r11)*(x106))));
new_r12=((((r21)*(x106)))+(((r20)*(x107)))+(((IkReal(-1.00000000000000))*(r22)*(x103))));
new_r20=((((r02)*(x108)))+(((r00)*(x112)))+(((r01)*(x113))));
new_r21=((((r10)*(x112)))+(((r12)*(x108)))+(((r11)*(((x101)+(((x102)*(x109))))))));
new_r22=((((r22)*(x108)))+(((r21)*(x113)))+(((r20)*(x112))));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((IkReal(-1.00000000000000))*(new_r22));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((cj4)*(new_r10)*(new_r12)))+(((cj4)*(new_r00)*(new_r02)))));
dummyeval[0]=((((cj4)*(new_r10)*(new_r12)))+(((cj4)*(new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x114=IKatan2(new_r12, new_r02);
j5array[0]=((IkReal(-1.00000000000000))*(x114));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x114))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j5))))+(((new_r02)*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(new_r10)))+(((new_r00)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(new_r10)))+(((new_r00)*(sj5)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(new_r10)))+(((new_r00)*(sj5)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r11)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x115=IKcos(j3);
IkReal x116=((IkReal(1.00000000000000))*(sj5));
IkReal x117=((IkReal(1.00000000000000))*(IKsin(j3)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x116)))+(((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(x115))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x116)))+(((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(x117))));
evalcond[2]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x115));
evalcond[3]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(x117))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x118=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x118;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x118;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x119=IKatan2(new_r12, new_r02);
j5array[0]=((IkReal(-1.00000000000000))*(x119));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x119))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j5))))+(((new_r02)*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(new_r11)))+(((new_r01)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r10)))))+IKsqr(((((cj5)*(new_r11)))+(((new_r01)*(sj5)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r10)))), ((((cj5)*(new_r11)))+(((new_r01)*(sj5)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x120=IKsin(j3);
IkReal x121=((IkReal(1.00000000000000))*(sj5));
IkReal x122=((IkReal(1.00000000000000))*(IKcos(j3)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x121)))+(((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(x122))));
evalcond[1]=((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(x120)))+(((IkReal(-1.00000000000000))*(new_r11)*(x121))));
evalcond[2]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(((IkReal(-1.00000000000000))*(x122))));
evalcond[3]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(x120));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x123=((gconst3)*(new_r20)*(sj4));
if( IKabs(((new_r02)*(x123))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x123))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((new_r02)*(x123)), ((new_r12)*(x123)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x124=IKcos(j5);
IkReal x125=IKsin(j5);
IkReal x126=((IkReal(1.00000000000000))*(cj4));
IkReal x127=((IkReal(1.00000000000000))*(sj4));
IkReal x128=((new_r12)*(x124));
IkReal x129=((cj4)*(x125));
IkReal x130=((new_r02)*(x125));
IkReal x131=((cj4)*(x124));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x125)))+(((new_r02)*(x124))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x126)))+(x130)+(x128));
evalcond[2]=((((new_r00)*(x129)))+(((IkReal(-1.00000000000000))*(new_r20)*(x127)))+(((new_r10)*(x131))));
evalcond[3]=((((new_r01)*(x129)))+(((IkReal(-1.00000000000000))*(new_r21)*(x127)))+(((new_r11)*(x131))));
evalcond[4]=((IkReal(-1.00000000000000))+(((new_r02)*(x129)))+(((IkReal(-1.00000000000000))*(new_r22)*(x127)))+(((cj4)*(x128))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r22)*(x126)))+(((IkReal(-1.00000000000000))*(x127)*(x128)))+(((IkReal(-1.00000000000000))*(x127)*(x130))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj4;
dummyeval[1]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x132=((((cj5)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj5))));
IkReal x133=((((cj5)*(new_r10)))+(((new_r00)*(sj5))));
IkReal x134=((((cj5)*(new_r11)))+(((new_r01)*(sj5))));
IkReal x135=((IkReal(-1.00000000000000))+(((new_r02)*(sj5)))+(((cj5)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x132;
evalcond[3]=x132;
evalcond[4]=x135;
evalcond[5]=x134;
evalcond[6]=x133;
evalcond[7]=x133;
evalcond[8]=x134;
evalcond[9]=x135;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x136=IKcos(j3);
IkReal x137=((IkReal(1.00000000000000))*(sj5));
IkReal x138=((IkReal(1.00000000000000))*(IKsin(j3)));
evalcond[0]=((x136)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x138)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x137)))+(((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(x136))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x137)))+(((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(x138))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x139=((new_r01)*(sj5));
IkReal x140=((new_r00)*(sj5));
IkReal x141=((IkReal(1.00000000000000))*(cj5));
IkReal x142=((new_r02)*(sj5));
IkReal x143=((((cj5)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj5))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x143;
evalcond[3]=x143;
evalcond[4]=((IkReal(1.00000000000000))+(((cj5)*(new_r12)))+(x142));
evalcond[5]=((((cj5)*(new_r11)))+(x139));
evalcond[6]=((((cj5)*(new_r10)))+(x140));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r10)*(x141)))+(((IkReal(-1.00000000000000))*(x140))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r11)*(x141)))+(((IkReal(-1.00000000000000))*(x139))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x142)))+(((IkReal(-1.00000000000000))*(new_r12)*(x141))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x144=IKsin(j3);
IkReal x145=((IkReal(1.00000000000000))*(sj5));
IkReal x146=((IkReal(1.00000000000000))*(IKcos(j3)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x146)))+(new_r21));
evalcond[1]=((x144)+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x146)))+(((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x145))));
evalcond[3]=((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x145)))+(((IkReal(-1.00000000000000))*(x144))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x147=((cj5)*(new_r12));
IkReal x148=((new_r02)*(sj5));
IkReal x149=((((cj5)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj5))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x149;
evalcond[5]=x149;
evalcond[6]=((x147)+(x148));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(x148))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(new_r10)))+(((new_r00)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(new_r10)))+(((new_r00)*(sj5)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(new_r10)))+(((new_r00)*(sj5)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r11)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x150=IKcos(j3);
IkReal x151=((IkReal(1.00000000000000))*(sj5));
IkReal x152=((IkReal(1.00000000000000))*(IKsin(j3)));
evalcond[0]=((((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x151)))+(((IkReal(-1.00000000000000))*(x150))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x152)))+(((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x151))));
evalcond[2]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x150));
evalcond[3]=((((IkReal(-1.00000000000000))*(x152)))+(((cj5)*(new_r10)))+(((new_r00)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x153=((IkReal(-1.00000000000000))+(new_r22));
IkReal x154=((((cj5)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj5))));
IkReal x155=((((new_r02)*(sj5)))+(((cj5)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x153;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x154;
evalcond[5]=x154;
evalcond[6]=x155;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x153;
evalcond[10]=x155;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(new_r11)))+(((new_r01)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r10)))))+IKsqr(((((cj5)*(new_r11)))+(((new_r01)*(sj5)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r10)))), ((((cj5)*(new_r11)))+(((new_r01)*(sj5)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x156=IKsin(j3);
IkReal x157=((IkReal(1.00000000000000))*(sj5));
IkReal x158=((IkReal(1.00000000000000))*(IKcos(j3)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x158)))+(((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x157))));
evalcond[1]=((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x157)))+(((IkReal(-1.00000000000000))*(x156))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x158)))+(((cj5)*(new_r11)))+(((new_r01)*(sj5))));
evalcond[3]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(x156));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj5)*(new_r10)))+(((new_r00)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj5)*(new_r10)))+(((new_r00)*(sj5)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj5)*(new_r10)))+(((new_r00)*(sj5)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x159=IKcos(j3);
IkReal x160=IKsin(j3);
IkReal x161=((IkReal(1.00000000000000))*(sj4));
IkReal x162=((new_r00)*(sj5));
IkReal x163=((new_r01)*(sj5));
IkReal x164=((cj5)*(new_r10));
IkReal x165=((IkReal(1.00000000000000))*(sj5));
IkReal x166=((cj5)*(new_r11));
IkReal x167=((IkReal(1.00000000000000))*(cj4));
IkReal x168=((IkReal(1.00000000000000))*(x159));
IkReal x169=((IkReal(1.00000000000000))*(x160));
evalcond[0]=((((cj4)*(x159)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x160)*(x167)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x168)))+(((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x165))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x169)))+(((IkReal(-1.00000000000000))*(new_r11)*(x165)))+(((cj5)*(new_r01))));
evalcond[4]=((((sj4)*(x159)))+(x163)+(x166));
evalcond[5]=((((IkReal(-1.00000000000000))*(x160)*(x161)))+(x162)+(x164));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x167)))+(((IkReal(-1.00000000000000))*(x161)*(x164)))+(((IkReal(-1.00000000000000))*(x161)*(x162)))+(x160));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x167)))+(((IkReal(-1.00000000000000))*(x168)))+(((IkReal(-1.00000000000000))*(x161)*(x166)))+(((IkReal(-1.00000000000000))*(x161)*(x163))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj5)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj5)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x170=IKcos(j3);
IkReal x171=IKsin(j3);
IkReal x172=((IkReal(1.00000000000000))*(sj4));
IkReal x173=((new_r00)*(sj5));
IkReal x174=((new_r01)*(sj5));
IkReal x175=((cj5)*(new_r10));
IkReal x176=((IkReal(1.00000000000000))*(sj5));
IkReal x177=((cj5)*(new_r11));
IkReal x178=((IkReal(1.00000000000000))*(cj4));
IkReal x179=((IkReal(1.00000000000000))*(x170));
IkReal x180=((IkReal(1.00000000000000))*(x171));
evalcond[0]=((((cj4)*(x170)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x171)*(x178)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x179)))+(((IkReal(-1.00000000000000))*(new_r10)*(x176)))+(((cj5)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x180)))+(((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x176))));
evalcond[4]=((((sj4)*(x170)))+(x174)+(x177));
evalcond[5]=((x173)+(x175)+(((IkReal(-1.00000000000000))*(x171)*(x172))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x178)))+(x171)+(((IkReal(-1.00000000000000))*(x172)*(x173)))+(((IkReal(-1.00000000000000))*(x172)*(x175))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x178)))+(((IkReal(-1.00000000000000))*(x179)))+(((IkReal(-1.00000000000000))*(x172)*(x174)))+(((IkReal(-1.00000000000000))*(x172)*(x177))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst4)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst4)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst4)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst4)*(new_r21)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x181=IKcos(j3);
IkReal x182=IKsin(j3);
IkReal x183=((IkReal(1.00000000000000))*(sj4));
IkReal x184=((new_r00)*(sj5));
IkReal x185=((new_r01)*(sj5));
IkReal x186=((cj5)*(new_r10));
IkReal x187=((IkReal(1.00000000000000))*(sj5));
IkReal x188=((cj5)*(new_r11));
IkReal x189=((IkReal(1.00000000000000))*(cj4));
IkReal x190=((IkReal(1.00000000000000))*(x181));
IkReal x191=((IkReal(1.00000000000000))*(x182));
evalcond[0]=((new_r21)+(((cj4)*(x181))));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x182)*(x189))));
evalcond[2]=((((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-1.00000000000000))*(new_r10)*(x187))));
evalcond[3]=((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(x191)))+(((IkReal(-1.00000000000000))*(new_r11)*(x187))));
evalcond[4]=((x185)+(x188)+(((sj4)*(x181))));
evalcond[5]=((x184)+(x186)+(((IkReal(-1.00000000000000))*(x182)*(x183))));
evalcond[6]=((x182)+(((IkReal(-1.00000000000000))*(new_r20)*(x189)))+(((IkReal(-1.00000000000000))*(x183)*(x184)))+(((IkReal(-1.00000000000000))*(x183)*(x186))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x189)))+(((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-1.00000000000000))*(x183)*(x185)))+(((IkReal(-1.00000000000000))*(x183)*(x188))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x192=((cj4)*(gconst2));
if( IKabs(((new_r02)*(x192))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x192))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((new_r02)*(x192)), ((new_r12)*(x192)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x193=IKcos(j5);
IkReal x194=IKsin(j5);
IkReal x195=((IkReal(1.00000000000000))*(cj4));
IkReal x196=((IkReal(1.00000000000000))*(sj4));
IkReal x197=((new_r12)*(x193));
IkReal x198=((cj4)*(x194));
IkReal x199=((new_r02)*(x194));
IkReal x200=((cj4)*(x193));
evalcond[0]=((((new_r02)*(x193)))+(((IkReal(-1.00000000000000))*(new_r12)*(x194))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x195)))+(x199)+(x197));
evalcond[2]=((((new_r00)*(x198)))+(((new_r10)*(x200)))+(((IkReal(-1.00000000000000))*(new_r20)*(x196))));
evalcond[3]=((((new_r01)*(x198)))+(((new_r11)*(x200)))+(((IkReal(-1.00000000000000))*(new_r21)*(x196))));
evalcond[4]=((IkReal(-1.00000000000000))+(((cj4)*(x197)))+(((new_r02)*(x198)))+(((IkReal(-1.00000000000000))*(new_r22)*(x196))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x196)*(x197)))+(((IkReal(-1.00000000000000))*(x196)*(x199)))+(((IkReal(-1.00000000000000))*(new_r22)*(x195))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj4;
dummyeval[1]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x201=((((cj5)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj5))));
IkReal x202=((((cj5)*(new_r10)))+(((new_r00)*(sj5))));
IkReal x203=((((cj5)*(new_r11)))+(((new_r01)*(sj5))));
IkReal x204=((IkReal(-1.00000000000000))+(((new_r02)*(sj5)))+(((cj5)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x201;
evalcond[3]=x201;
evalcond[4]=x204;
evalcond[5]=x203;
evalcond[6]=x202;
evalcond[7]=x202;
evalcond[8]=x203;
evalcond[9]=x204;
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(((IkReal(-1.00000000000000))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(new_r20, ((IkReal(-1.00000000000000))*(new_r21)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x205=IKcos(j3);
IkReal x206=((IkReal(1.00000000000000))*(sj5));
IkReal x207=((IkReal(1.00000000000000))*(IKsin(j3)));
evalcond[0]=((x205)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x207)))+(new_r20));
evalcond[2]=((((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(x205)))+(((IkReal(-1.00000000000000))*(new_r10)*(x206))));
evalcond[3]=((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(x207)))+(((IkReal(-1.00000000000000))*(new_r11)*(x206))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x208=((new_r01)*(sj5));
IkReal x209=((new_r00)*(sj5));
IkReal x210=((IkReal(1.00000000000000))*(cj5));
IkReal x211=((new_r02)*(sj5));
IkReal x212=((((cj5)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj5))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x212;
evalcond[3]=x212;
evalcond[4]=((IkReal(1.00000000000000))+(((cj5)*(new_r12)))+(x211));
evalcond[5]=((((cj5)*(new_r11)))+(x208));
evalcond[6]=((((cj5)*(new_r10)))+(x209));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r10)*(x210)))+(((IkReal(-1.00000000000000))*(x209))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r11)*(x210)))+(((IkReal(-1.00000000000000))*(x208))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x210)))+(((IkReal(-1.00000000000000))*(x211))));
evalcond[10]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)))+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)), new_r21);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x213=IKsin(j3);
IkReal x214=((IkReal(1.00000000000000))*(sj5));
IkReal x215=((IkReal(1.00000000000000))*(IKcos(j3)));
evalcond[0]=((new_r21)+(((IkReal(-1.00000000000000))*(x215))));
evalcond[1]=((x213)+(new_r20));
evalcond[2]=((((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x214)))+(((IkReal(-1.00000000000000))*(x215))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x214)))+(((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(x213))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x216=((cj5)*(new_r12));
IkReal x217=((new_r02)*(sj5));
IkReal x218=((((cj5)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj5))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x218;
evalcond[5]=x218;
evalcond[6]=((x216)+(x217));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x217)))+(((IkReal(-1.00000000000000))*(x216))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(new_r10)))+(((new_r00)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(new_r10)))+(((new_r00)*(sj5)))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(new_r10)))+(((new_r00)*(sj5)))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r11)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x219=IKcos(j3);
IkReal x220=((IkReal(1.00000000000000))*(sj5));
IkReal x221=((IkReal(1.00000000000000))*(IKsin(j3)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x220)))+(((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(x219))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x220)))+(((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(x221))));
evalcond[2]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x219));
evalcond[3]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(x221))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x222=((IkReal(-1.00000000000000))+(new_r22));
IkReal x223=((((cj5)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj5))));
IkReal x224=((((new_r02)*(sj5)))+(((cj5)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x222;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=x223;
evalcond[5]=x223;
evalcond[6]=x224;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x222;
evalcond[10]=x224;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(new_r11)))+(((new_r01)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r10)))))+IKsqr(((((cj5)*(new_r11)))+(((new_r01)*(sj5)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(new_r10)))), ((((cj5)*(new_r11)))+(((new_r01)*(sj5)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x225=IKsin(j3);
IkReal x226=((IkReal(1.00000000000000))*(sj5));
IkReal x227=((IkReal(1.00000000000000))*(IKcos(j3)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x226)))+(((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(x227))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)*(x226)))+(((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(x225))));
evalcond[2]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(((IkReal(-1.00000000000000))*(x227))));
evalcond[3]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(x225));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj5)*(new_r10)))+(((new_r00)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj5)*(new_r10)))+(((new_r00)*(sj5)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj5)*(new_r10)))+(((new_r00)*(sj5)))))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x228=IKcos(j3);
IkReal x229=IKsin(j3);
IkReal x230=((IkReal(1.00000000000000))*(sj4));
IkReal x231=((new_r00)*(sj5));
IkReal x232=((new_r01)*(sj5));
IkReal x233=((cj5)*(new_r10));
IkReal x234=((IkReal(1.00000000000000))*(sj5));
IkReal x235=((cj5)*(new_r11));
IkReal x236=((IkReal(1.00000000000000))*(cj4));
IkReal x237=((IkReal(1.00000000000000))*(x228));
IkReal x238=((IkReal(1.00000000000000))*(x229));
evalcond[0]=((((cj4)*(x228)))+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x229)*(x236))));
evalcond[2]=((((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(x237)))+(((IkReal(-1.00000000000000))*(new_r10)*(x234))));
evalcond[3]=((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(x238)))+(((IkReal(-1.00000000000000))*(new_r11)*(x234))));
evalcond[4]=((((sj4)*(x228)))+(x232)+(x235));
evalcond[5]=((x233)+(x231)+(((IkReal(-1.00000000000000))*(x229)*(x230))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x230)*(x233)))+(((IkReal(-1.00000000000000))*(x230)*(x231)))+(((IkReal(-1.00000000000000))*(new_r20)*(x236)))+(x229));
evalcond[7]=((((IkReal(-1.00000000000000))*(x230)*(x232)))+(((IkReal(-1.00000000000000))*(x230)*(x235)))+(((IkReal(-1.00000000000000))*(new_r21)*(x236)))+(((IkReal(-1.00000000000000))*(x237))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj5)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj5)))), ((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x239=IKcos(j3);
IkReal x240=IKsin(j3);
IkReal x241=((IkReal(1.00000000000000))*(sj4));
IkReal x242=((new_r00)*(sj5));
IkReal x243=((new_r01)*(sj5));
IkReal x244=((cj5)*(new_r10));
IkReal x245=((IkReal(1.00000000000000))*(sj5));
IkReal x246=((cj5)*(new_r11));
IkReal x247=((IkReal(1.00000000000000))*(cj4));
IkReal x248=((IkReal(1.00000000000000))*(x239));
IkReal x249=((IkReal(1.00000000000000))*(x240));
evalcond[0]=((((cj4)*(x239)))+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x240)*(x247)))+(new_r20));
evalcond[2]=((((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x245)))+(((IkReal(-1.00000000000000))*(x248))));
evalcond[3]=((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x245)))+(((IkReal(-1.00000000000000))*(x249))));
evalcond[4]=((x243)+(x246)+(((sj4)*(x239))));
evalcond[5]=((x242)+(x244)+(((IkReal(-1.00000000000000))*(x240)*(x241))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x241)*(x242)))+(((IkReal(-1.00000000000000))*(x241)*(x244)))+(x240)+(((IkReal(-1.00000000000000))*(new_r20)*(x247))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x247)))+(((IkReal(-1.00000000000000))*(x241)*(x243)))+(((IkReal(-1.00000000000000))*(x241)*(x246)))+(((IkReal(-1.00000000000000))*(x248))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst4)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst4)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst4)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst4)*(new_r21)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x250=IKcos(j3);
IkReal x251=IKsin(j3);
IkReal x252=((IkReal(1.00000000000000))*(sj4));
IkReal x253=((new_r00)*(sj5));
IkReal x254=((new_r01)*(sj5));
IkReal x255=((cj5)*(new_r10));
IkReal x256=((IkReal(1.00000000000000))*(sj5));
IkReal x257=((cj5)*(new_r11));
IkReal x258=((IkReal(1.00000000000000))*(cj4));
IkReal x259=((IkReal(1.00000000000000))*(x250));
IkReal x260=((IkReal(1.00000000000000))*(x251));
evalcond[0]=((new_r21)+(((cj4)*(x250))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x251)*(x258)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x256)))+(((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(x259))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x256)))+(((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(x260))));
evalcond[4]=((((sj4)*(x250)))+(x254)+(x257));
evalcond[5]=((((IkReal(-1.00000000000000))*(x251)*(x252)))+(x255)+(x253));
evalcond[6]=((((IkReal(-1.00000000000000))*(x252)*(x255)))+(((IkReal(-1.00000000000000))*(x252)*(x253)))+(x251)+(((IkReal(-1.00000000000000))*(new_r20)*(x258))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x258)))+(((IkReal(-1.00000000000000))*(x252)*(x257)))+(((IkReal(-1.00000000000000))*(x252)*(x254)))+(((IkReal(-1.00000000000000))*(x259))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst1)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst1)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*(new_r20)), ((IkReal(-1.00000000000000))*(gconst1)*(new_r21)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
evalcond[0]=((new_r21)+(((cj4)*(IKcos(j3)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(IKsin(j3))))+(new_r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x261=((cj3)*(gconst6)*(sj4));
if( IKabs(((new_r02)*(x261))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x261))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((new_r02)*(x261)), ((new_r12)*(x261)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x262=IKcos(j5);
IkReal x263=IKsin(j5);
IkReal x264=((IkReal(1.00000000000000))*(cj3));
IkReal x265=((IkReal(1.00000000000000))*(sj4));
IkReal x266=((IkReal(1.00000000000000))*(cj4));
IkReal x267=((new_r01)*(x263));
IkReal x268=((new_r02)*(x263));
IkReal x269=((IkReal(1.00000000000000))*(x263));
IkReal x270=((new_r11)*(x262));
IkReal x271=((new_r10)*(x262));
IkReal x272=((new_r12)*(x262));
IkReal x273=((new_r00)*(x263));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x269)))+(((new_r02)*(x262))));
evalcond[1]=((x268)+(x272)+(((IkReal(-1.00000000000000))*(x266))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x269)))+(((new_r00)*(x262)))+(((IkReal(-1.00000000000000))*(x264))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj3)))+(((new_r01)*(x262)))+(((IkReal(-1.00000000000000))*(new_r11)*(x269))));
evalcond[4]=((x267)+(x270)+(((cj3)*(sj4))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj3)*(x265)))+(x273)+(x271));
evalcond[6]=((((cj4)*(x273)))+(((cj4)*(x271)))+(((IkReal(-1.00000000000000))*(new_r20)*(x265))));
evalcond[7]=((((cj4)*(x270)))+(((cj4)*(x267)))+(((IkReal(-1.00000000000000))*(new_r21)*(x265))));
evalcond[8]=((IkReal(-1.00000000000000))+(((cj4)*(x272)))+(((cj4)*(x268)))+(((IkReal(-1.00000000000000))*(new_r22)*(x265))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r22)*(x266)))+(((IkReal(-1.00000000000000))*(x265)*(x272)))+(((IkReal(-1.00000000000000))*(x265)*(x268))));
evalcond[10]=((sj3)+(((IkReal(-1.00000000000000))*(new_r20)*(x266)))+(((IkReal(-1.00000000000000))*(x265)*(x273)))+(((IkReal(-1.00000000000000))*(x265)*(x271))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r21)*(x266)))+(((IkReal(-1.00000000000000))*(x265)*(x270)))+(((IkReal(-1.00000000000000))*(x265)*(x267)))+(((IkReal(-1.00000000000000))*(x264))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x274=((cj4)*(gconst5));
if( IKabs(((new_r02)*(x274))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x274))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((new_r02)*(x274)), ((new_r12)*(x274)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x275=IKcos(j5);
IkReal x276=IKsin(j5);
IkReal x277=((IkReal(1.00000000000000))*(cj3));
IkReal x278=((IkReal(1.00000000000000))*(sj4));
IkReal x279=((IkReal(1.00000000000000))*(cj4));
IkReal x280=((new_r01)*(x276));
IkReal x281=((new_r02)*(x276));
IkReal x282=((IkReal(1.00000000000000))*(x276));
IkReal x283=((new_r11)*(x275));
IkReal x284=((new_r10)*(x275));
IkReal x285=((new_r12)*(x275));
IkReal x286=((new_r00)*(x276));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x282)))+(((new_r02)*(x275))));
evalcond[1]=((x285)+(x281)+(((IkReal(-1.00000000000000))*(x279))));
evalcond[2]=((((new_r00)*(x275)))+(((IkReal(-1.00000000000000))*(new_r10)*(x282)))+(((IkReal(-1.00000000000000))*(x277))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj3)))+(((new_r01)*(x275)))+(((IkReal(-1.00000000000000))*(new_r11)*(x282))));
evalcond[4]=((x283)+(x280)+(((cj3)*(sj4))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj3)*(x278)))+(x286)+(x284));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r20)*(x278)))+(((cj4)*(x284)))+(((cj4)*(x286))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x278)))+(((cj4)*(x283)))+(((cj4)*(x280))));
evalcond[8]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x278)))+(((cj4)*(x285)))+(((cj4)*(x281))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r22)*(x279)))+(((IkReal(-1.00000000000000))*(x278)*(x281)))+(((IkReal(-1.00000000000000))*(x278)*(x285))));
evalcond[10]=((sj3)+(((IkReal(-1.00000000000000))*(new_r20)*(x279)))+(((IkReal(-1.00000000000000))*(x278)*(x286)))+(((IkReal(-1.00000000000000))*(x278)*(x284))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r21)*(x279)))+(((IkReal(-1.00000000000000))*(x277)))+(((IkReal(-1.00000000000000))*(x278)*(x280)))+(((IkReal(-1.00000000000000))*(x278)*(x283))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - mk2_arm (cdc67ddcf4dc32a72e70460e5de811ea)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
