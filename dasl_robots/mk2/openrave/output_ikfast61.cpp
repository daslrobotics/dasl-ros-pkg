/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-03-01 02:10:05.456000
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56;
x0=IKcos(j[1]);
x1=IKsin(j[1]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKsin(j[2]);
x5=IKsin(j[4]);
x6=IKcos(j[2]);
x7=IKcos(j[4]);
x8=IKsin(j[6]);
x9=IKcos(j[6]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=IKcos(j[0]);
x13=IKsin(j[0]);
x14=((IkReal(1.00000000000000))*(x4));
x15=((IkReal(1.00000000000000))*(x13));
x16=((IkReal(0.0700000000000000))*(x5));
x17=((IkReal(0.224440000000000))*(x13));
x18=((IkReal(0.0700000000000000))*(x2));
x19=((IkReal(0.224440000000000))*(x12));
x20=((IkReal(1.00000000000000))*(x5));
x21=((IkReal(1.00000000000000))*(x7));
x22=((IkReal(0.317620000000000))*(x0));
x23=((IkReal(0.0700000000000000))*(x7));
x24=((x1)*(x3));
x25=((IkReal(-1.00000000000000))*(x7));
x26=((x0)*(x3));
x27=((x0)*(x2));
x28=((x0)*(x6));
x29=((x12)*(x4));
x30=((x12)*(x6));
x31=((x1)*(x6));
x32=((IkReal(-1.00000000000000))*(x5));
x33=((IkReal(1.00000000000000))*(x1)*(x30));
x34=((x1)*(x13)*(x14));
x35=((((x1)*(x2)))+(((IkReal(-1.00000000000000))*(x14)*(x26))));
x36=((((IkReal(-1.00000000000000))*(x33)))+(((x13)*(x4))));
x37=((x29)+(((x13)*(x31))));
x38=((((IkReal(-1.00000000000000))*(x13)*(x14)))+(x33));
x39=((((IkReal(-1.00000000000000))*(x30)))+(x34));
x40=((((IkReal(-1.00000000000000))*(x1)*(x12)*(x14)))+(((IkReal(-1.00000000000000))*(x15)*(x6))));
x41=((((IkReal(-1.00000000000000))*(x12)*(x14)))+(((IkReal(-1.00000000000000))*(x15)*(x31))));
x42=((x36)*(x7));
x43=((x2)*(x39));
x44=((x2)*(x40));
x45=((((x3)*(((((x1)*(x29)))+(((x13)*(x6)))))))+(((x12)*(x27))));
x46=((((IkReal(-1.00000000000000))*(x15)*(x27)))+(((x3)*(((((IkReal(-1.00000000000000))*(x34)))+(x30))))));
x47=((((IkReal(-1.00000000000000))*(x21)*(x35)))+(((x20)*(x28))));
x48=((((IkReal(-1.00000000000000))*(x15)*(x26)))+(x43));
x49=((x45)*(x7));
x50=((x45)*(x5));
x51=((x46)*(x5));
x52=((x46)*(x7));
x53=((x10)*(x48));
x54=((((x11)*(x47)))+(((x10)*(((((x27)*(x4)))+(x24))))));
x55=((((IkReal(-1.00000000000000))*(x20)*(x38)))+(((IkReal(-1.00000000000000))*(x21)*(x45))));
x56=((((x10)*(((x44)+(((x12)*(x26)))))))+(((x11)*(x55))));
eerot[0]=((((x54)*(x8)))+(((x9)*(((((x35)*(x5)))+(((x28)*(x7))))))));
eerot[1]=((((x54)*(x9)))+(((x8)*(((((x25)*(x28)))+(((x32)*(x35))))))));
eerot[2]=((((x10)*(x47)))+(((x11)*(((((IkReal(-1.00000000000000))*(x24)))+(((IkReal(-1.00000000000000))*(x14)*(x27))))))));
eetrans[0]=((IkReal(-0.249520000000000))+(((x11)*(((((x23)*(x35)))+(((IkReal(-1.00000000000000))*(x16)*(x28)))))))+(((IkReal(-0.317620000000000))*(x1)))+(((IkReal(-0.224440000000000))*(x27)*(x4)))+(((x10)*(((((IkReal(-0.0700000000000000))*(x24)))+(((IkReal(-1.00000000000000))*(x0)*(x18)*(x4)))))))+(((IkReal(-0.224440000000000))*(x24))));
eerot[3]=((((x56)*(x8)))+(((x9)*(((x42)+(x50))))));
eerot[4]=((((x56)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x20)*(x45)))+(((IkReal(-1.00000000000000))*(x21)*(x36))))))));
eerot[5]=((((x11)*(((((IkReal(-1.00000000000000))*(x44)))+(((IkReal(-1.00000000000000))*(x12)*(x26)))))))+(((x10)*(x55))));
eetrans[1]=((IkReal(0.363780000000000))+(((x2)*(((((x1)*(x19)*(x4)))+(((x17)*(x6)))))))+(((IkReal(-1.00000000000000))*(x12)*(x22)))+(((IkReal(-1.00000000000000))*(x19)*(x26)))+(((x10)*(((((IkReal(-1.00000000000000))*(x18)*(x40)))+(((IkReal(-0.0700000000000000))*(x12)*(x26)))))))+(((x11)*(((((x23)*(x45)))+(((x16)*(x38))))))));
eerot[6]=((((IkReal(-1.00000000000000))*(x8)*(((((IkReal(1.00000000000000))*(x11)*(((((IkReal(-1.00000000000000))*(x20)*(x41)))+(((IkReal(-1.00000000000000))*(x21)*(x46)))))))+(((IkReal(1.00000000000000))*(x53)))))))+(((x9)*(((((x25)*(x37)))+(((x32)*(x46))))))));
eerot[7]=((((x8)*(((x51)+(((x37)*(x7)))))))+(((x9)*(((((IkReal(-1.00000000000000))*(x11)*(((((x25)*(x46)))+(((x32)*(x41)))))))+(((IkReal(-1.00000000000000))*(x53))))))));
eerot[8]=((((x10)*(((((x41)*(x5)))+(x52)))))+(((x11)*(x48))));
eetrans[2]=((((x10)*(((((x18)*(x39)))+(((IkReal(-0.0700000000000000))*(x13)*(x26)))))))+(((IkReal(-1.00000000000000))*(x13)*(x22)))+(((x2)*(((((IkReal(-1.00000000000000))*(x19)*(x6)))+(((x1)*(x17)*(x4)))))))+(((IkReal(-1.00000000000000))*(x17)*(x26)))+(((x11)*(((((IkReal(-1.00000000000000))*(x16)*(x41)))+(((IkReal(-1.00000000000000))*(x23)*(x46))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((IkReal(-1.00000000000000))*(r20));
new_r01=((IkReal(-1.00000000000000))*(r21));
new_r02=((IkReal(-1.00000000000000))*(r22));
new_px=((IkReal(-1.00000000000000))*(pz));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((IkReal(-0.363780000000000))+(py));
new_r20=r00;
new_r21=r01;
new_r22=r02;
new_pz=((IkReal(0.249520000000000))+(px));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal dummyeval[1];
IkReal x57=(npx)*(npx);
IkReal x58=(npy)*(npy);
IkReal x59=(cj5)*(cj5);
IkReal x60=((IkReal(6.41257142857143))*(cj5));
IkReal x61=((IkReal(10.2802680816327))*(x59));
dummyeval[0]=((((x58)*(x61)))+(((x58)*(x60)))+(((x57)*(x61)))+(((x57)*(x60)))+(x58)+(x57));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x62=(npx)*(npx);
IkReal x63=(npy)*(npy);
IkReal x64=(cj5)*(cj5);
IkReal x65=((IkReal(6.41257142857143))*(cj5));
IkReal x66=((IkReal(10.2802680816327))*(x64));
dummyeval[0]=((((x62)*(x66)))+(((x62)*(x65)))+(x62)+(x63)+(((x63)*(x65)))+(((x63)*(x66))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x67=((IkReal(0.448880000000000))*(cj5));
IkReal x68=((((IkReal(-0.140000000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x67))));
IkReal x69=((((IkReal(-0.140000000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x67))));
if( IKabs(x68) < IKFAST_ATAN2_MAGTHRESH && IKabs(x69) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x70=((IkReal(1.00000000000000))*(IKatan2(x68, x69)));
if( ((((x68)*(x68))+((x69)*(x69)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((x68)*(x68))+((x69)*(x69)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x68)*(x68))+((x69)*(x69))))))):(IkReal)1.0e30))*(((IkReal(0.0456091508000000))+(((IkReal(-0.0314216000000000))*(cj5)))+(((IkReal(0.448880000000000))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(pp))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((x68)*(x68))+((x69)*(x69)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x68)*(x68))+((x69)*(x69))))))):(IkReal)1.0e30))*(((IkReal(0.0456091508000000))+(((IkReal(-0.0314216000000000))*(cj5)))+(((IkReal(0.448880000000000))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(pp))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x71=IKasin(((((IKabs(IKabs(IKsqrt((((x68)*(x68))+((x69)*(x69)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x68)*(x68))+((x69)*(x69))))))):(IkReal)1.0e30))*(((IkReal(0.0456091508000000))+(((IkReal(-0.0314216000000000))*(cj5)))+(((IkReal(0.448880000000000))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(pp)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x70)))+(((IkReal(-1.00000000000000))*(x71))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x70)))+(x71));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(-1.02653030625399))+(((IkReal(0.981951275443045))*(npx)*(sj6)))+(((IkReal(0.981951275443045))*(cj6)*(npy)))+(((IkReal(7.01393768173604))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((IkReal(0.224440000000000))+(((IkReal(0.0700000000000000))*(cj5)))+(((IkReal(0.317620000000000))*(IKcos(j3))))+(((cj5)*(cj6)*(npy)))+(((cj5)*(npx)*(sj6)))+(((IkReal(-1.00000000000000))*(npz)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x72=((sj3)*(sj5));
dummyeval[0]=sj3;
dummyeval[1]=((((IkReal(-14.2857142857143))*(cj6)*(npy)*(x72)))+(((IkReal(-14.2857142857143))*(cj5)*(npz)*(sj3)))+(((IkReal(-14.2857142857143))*(npx)*(sj6)*(x72)))+(((IkReal(-1.00000000000000))*(x72))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=((((IkReal(-1.00000000000000))*(npy)*(sj3)*(sj6)))+(((cj6)*(npx)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x73=((IkReal(1.00000000000000))*(pp));
IkReal x74=((npx)*(sj6));
IkReal x75=((IkReal(0.448880000000000))*(cj5));
IkReal x76=((IkReal(1.00000000000000))*(sj5));
IkReal x77=((cj6)*(npy));
IkReal x78=((IkReal(0.140000000000000))*(x77));
IkReal x79=((IkReal(0.140000000000000))*(x74));
IkReal x80=((x73)+(x79)+(x78));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))));
evalcond[2]=((IkReal(0.288929043600000))+(((IkReal(-1.00000000000000))*(x80))));
evalcond[3]=((IkReal(0.542060000000000))+(((IkReal(0.0700000000000000))*(cj5)))+(((cj5)*(x77)))+(((cj5)*(x74)))+(((IkReal(-1.00000000000000))*(npz)*(x76))));
evalcond[4]=((((IkReal(-0.0700000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(-1.00000000000000))*(x74)*(x76)))+(((IkReal(-1.00000000000000))*(x76)*(x77))));
evalcond[5]=((IkReal(0.0456091508000000))+(((IkReal(-0.0314216000000000))*(cj5)))+(((IkReal(0.448880000000000))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(x74)*(x75)))+(((IkReal(-1.00000000000000))*(x80)))+(((IkReal(-1.00000000000000))*(x75)*(x77))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(0.0700000000000000))*(sj5)))+(((cj5)*(npz)))+(((cj6)*(npy)*(sj5)))+(((npx)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x81=IKatan2(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))), ((((IkReal(0.0700000000000000))*(sj5)))+(((cj5)*(npz)))+(((cj6)*(npy)*(sj5)))+(((npx)*(sj5)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x81));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x81))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x82=IKcos(j4);
IkReal x83=IKsin(j4);
IkReal x84=((IkReal(1.00000000000000))*(x82));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj5)*(npz)*(x84)))+(((cj6)*(npx)*(x83)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(sj5)*(x84)))+(((IkReal(-0.0700000000000000))*(sj5)*(x82)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x83)))+(((IkReal(-1.00000000000000))*(npx)*(sj5)*(sj6)*(x84))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x223=((IkReal(1.00000000000000))*(pp));
IkReal x224=((npx)*(sj6));
IkReal x225=((IkReal(0.448880000000000))*(cj5));
IkReal x226=((IkReal(1.00000000000000))*(sj5));
IkReal x227=((cj6)*(npy));
IkReal x228=((IkReal(0.140000000000000))*(x227));
IkReal x229=((IkReal(0.140000000000000))*(x224));
IkReal x230=((x229)+(x228)+(x223));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))));
evalcond[2]=((IkReal(0.00378251240000000))+(((IkReal(-1.00000000000000))*(x230))));
evalcond[3]=((IkReal(-0.0931800000000000))+(((IkReal(0.0700000000000000))*(cj5)))+(((cj5)*(x227)))+(((cj5)*(x224)))+(((IkReal(-1.00000000000000))*(npz)*(x226))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x224)*(x226)))+(((IkReal(-0.0700000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(-1.00000000000000))*(x226)*(x227))));
evalcond[5]=((IkReal(0.0456091508000000))+(((IkReal(-0.0314216000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x224)*(x225)))+(((IkReal(-1.00000000000000))*(x225)*(x227)))+(((IkReal(0.448880000000000))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(x230))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(0.0700000000000000))*(sj5)))+(((cj5)*(npz)))+(((cj6)*(npy)*(sj5)))+(((npx)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x231=IKatan2(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))), ((((IkReal(0.0700000000000000))*(sj5)))+(((cj5)*(npz)))+(((cj6)*(npy)*(sj5)))+(((npx)*(sj5)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x231));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x231))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x232=IKcos(j4);
IkReal x233=IKsin(j4);
IkReal x234=((IkReal(1.00000000000000))*(x232));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj5)*(sj6)*(x234)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x233)))+(((IkReal(-1.00000000000000))*(cj5)*(npz)*(x234)))+(((IkReal(-0.0700000000000000))*(sj5)*(x232)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(sj5)*(x234)))+(((cj6)*(npx)*(x233))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x235=((IkReal(50000.0000000000))*(npx));
IkReal x236=((npy)*(sj5));
IkReal x237=((cj5)*(npz));
IkReal x238=((cj6)*(sj5));
IkReal x239=((IkReal(50000.0000000000))*(sj6));
IkReal x240=((IkReal(15881.0000000000))*(sj3));
if( IKabs(((IkReal(6.29683269315534e-5))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj6)*(x235)))+(((npy)*(x239))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((cj6)*(npx)*(x240)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x240))))) != 0)?((IkReal)1/(((((cj6)*(npx)*(x240)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x240)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npy)*(x237)*(x239)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x236)*(x239)))+(((npx)*(sj6)*(x235)*(x238)))+(((cj6)*(x235)*(x237)))+(((x235)*(x236)*((cj6)*(cj6))))+(((IkReal(3500.00000000000))*(npx)*(x238)))+(((IkReal(-1.00000000000000))*(x235)*(x236)*((sj6)*(sj6))))+(((IkReal(-3500.00000000000))*(sj6)*(x236))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(6.29683269315534e-5))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj6)*(x235)))+(((npy)*(x239)))))))+IKsqr(((((IKabs(((((cj6)*(npx)*(x240)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x240))))) != 0)?((IkReal)1/(((((cj6)*(npx)*(x240)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x240)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npy)*(x237)*(x239)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x236)*(x239)))+(((npx)*(sj6)*(x235)*(x238)))+(((cj6)*(x235)*(x237)))+(((x235)*(x236)*((cj6)*(cj6))))+(((IkReal(3500.00000000000))*(npx)*(x238)))+(((IkReal(-1.00000000000000))*(x235)*(x236)*((sj6)*(sj6))))+(((IkReal(-3500.00000000000))*(sj6)*(x236)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(6.29683269315534e-5))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj6)*(x235)))+(((npy)*(x239)))))), ((((IKabs(((((cj6)*(npx)*(x240)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x240))))) != 0)?((IkReal)1/(((((cj6)*(npx)*(x240)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x240)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npy)*(x237)*(x239)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x236)*(x239)))+(((npx)*(sj6)*(x235)*(x238)))+(((cj6)*(x235)*(x237)))+(((x235)*(x236)*((cj6)*(cj6))))+(((IkReal(3500.00000000000))*(npx)*(x238)))+(((IkReal(-1.00000000000000))*(x235)*(x236)*((sj6)*(sj6))))+(((IkReal(-3500.00000000000))*(sj6)*(x236)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x241=IKsin(j4);
IkReal x242=IKcos(j4);
IkReal x243=((IkReal(1.00000000000000))*(sj6));
IkReal x244=((npx)*(sj5));
IkReal x245=((IkReal(0.0700000000000000))*(sj5));
IkReal x246=((cj6)*(npx));
IkReal x247=((IkReal(0.317620000000000))*(sj3));
IkReal x248=((cj5)*(npz));
IkReal x249=((cj6)*(npy)*(sj5));
IkReal x250=((IkReal(1.00000000000000))*(x242));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x243)))+(x246)+(((x241)*(x247))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x248)))+(((IkReal(-1.00000000000000))*(x249)))+(((IkReal(-1.00000000000000))*(x243)*(x244)))+(((x242)*(x247)))+(((IkReal(-1.00000000000000))*(x245))));
evalcond[2]=((((sj6)*(x241)*(x244)))+(((x241)*(x248)))+(((x241)*(x245)))+(((x241)*(x249)))+(((x242)*(x246)))+(((IkReal(-1.00000000000000))*(npy)*(x242)*(x243))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x242)*(x243)*(x244)))+(((IkReal(-1.00000000000000))*(x242)*(x245)))+(x247)+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((x241)*(x246)))+(((IkReal(-1.00000000000000))*(x249)*(x250)))+(((IkReal(-1.00000000000000))*(npy)*(x241)*(x243))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x251=((cj6)*(npx));
IkReal x252=((npy)*(sj6));
IkReal x253=((sj3)*(sj5));
if( IKabs(((IkReal(6.29683269315534e-5))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-50000.0000000000))*(x251)))+(((IkReal(50000.0000000000))*(x252))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-794050000.000000))*(npx)*(sj6)*(x253)))+(((IkReal(-794050000.000000))*(cj6)*(npy)*(x253)))+(((IkReal(-794050000.000000))*(cj5)*(npz)*(sj3)))+(((IkReal(-55583500.0000000))*(x253))))) != 0)?((IkReal)1/(((((IkReal(-794050000.000000))*(npx)*(sj6)*(x253)))+(((IkReal(-794050000.000000))*(cj6)*(npy)*(x253)))+(((IkReal(-794050000.000000))*(cj5)*(npz)*(sj3)))+(((IkReal(-55583500.0000000))*(x253)))))):(IkReal)1.0e30))*(((((IkReal(-252206161.000000))*((sj3)*(sj3))))+(((IkReal(2500000000.00000))*((x252)*(x252))))+(((IkReal(2500000000.00000))*((x251)*(x251))))+(((IkReal(-5000000000.00000))*(x251)*(x252))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(6.29683269315534e-5))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-50000.0000000000))*(x251)))+(((IkReal(50000.0000000000))*(x252)))))))+IKsqr(((((IKabs(((((IkReal(-794050000.000000))*(npx)*(sj6)*(x253)))+(((IkReal(-794050000.000000))*(cj6)*(npy)*(x253)))+(((IkReal(-794050000.000000))*(cj5)*(npz)*(sj3)))+(((IkReal(-55583500.0000000))*(x253))))) != 0)?((IkReal)1/(((((IkReal(-794050000.000000))*(npx)*(sj6)*(x253)))+(((IkReal(-794050000.000000))*(cj6)*(npy)*(x253)))+(((IkReal(-794050000.000000))*(cj5)*(npz)*(sj3)))+(((IkReal(-55583500.0000000))*(x253)))))):(IkReal)1.0e30))*(((((IkReal(-252206161.000000))*((sj3)*(sj3))))+(((IkReal(2500000000.00000))*((x252)*(x252))))+(((IkReal(2500000000.00000))*((x251)*(x251))))+(((IkReal(-5000000000.00000))*(x251)*(x252)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(6.29683269315534e-5))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-50000.0000000000))*(x251)))+(((IkReal(50000.0000000000))*(x252)))))), ((((IKabs(((((IkReal(-794050000.000000))*(npx)*(sj6)*(x253)))+(((IkReal(-794050000.000000))*(cj6)*(npy)*(x253)))+(((IkReal(-794050000.000000))*(cj5)*(npz)*(sj3)))+(((IkReal(-55583500.0000000))*(x253))))) != 0)?((IkReal)1/(((((IkReal(-794050000.000000))*(npx)*(sj6)*(x253)))+(((IkReal(-794050000.000000))*(cj6)*(npy)*(x253)))+(((IkReal(-794050000.000000))*(cj5)*(npz)*(sj3)))+(((IkReal(-55583500.0000000))*(x253)))))):(IkReal)1.0e30))*(((((IkReal(-252206161.000000))*((sj3)*(sj3))))+(((IkReal(2500000000.00000))*((x252)*(x252))))+(((IkReal(2500000000.00000))*((x251)*(x251))))+(((IkReal(-5000000000.00000))*(x251)*(x252)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x254=IKsin(j4);
IkReal x255=IKcos(j4);
IkReal x256=((IkReal(1.00000000000000))*(sj6));
IkReal x257=((npx)*(sj5));
IkReal x258=((IkReal(0.0700000000000000))*(sj5));
IkReal x259=((cj6)*(npx));
IkReal x260=((IkReal(0.317620000000000))*(sj3));
IkReal x261=((cj5)*(npz));
IkReal x262=((cj6)*(npy)*(sj5));
IkReal x263=((IkReal(1.00000000000000))*(x255));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x256)))+(((x254)*(x260)))+(x259));
evalcond[1]=((((IkReal(-1.00000000000000))*(x262)))+(((IkReal(-1.00000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(x256)*(x257)))+(((x255)*(x260)))+(((IkReal(-1.00000000000000))*(x258))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npy)*(x255)*(x256)))+(((sj6)*(x254)*(x257)))+(((x254)*(x262)))+(((x254)*(x261)))+(((x254)*(x258)))+(((x255)*(x259))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npy)*(x254)*(x256)))+(((IkReal(-1.00000000000000))*(x262)*(x263)))+(((IkReal(-1.00000000000000))*(x255)*(x258)))+(x260)+(((IkReal(-1.00000000000000))*(x261)*(x263)))+(((IkReal(-1.00000000000000))*(x255)*(x256)*(x257)))+(((x254)*(x259))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x264=((IkReal(50000.0000000000))*(cj6));
IkReal x265=((IkReal(50000.0000000000))*(sj6));
if( IKabs(((gconst0)*(((((npy)*(x265)))+(((IkReal(-1.00000000000000))*(npx)*(x264))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(50000.0000000000))*(cj5)*(npz)))+(((IkReal(3500.00000000000))*(sj5)))+(((npx)*(sj5)*(x265)))+(((npy)*(sj5)*(x264))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((((npy)*(x265)))+(((IkReal(-1.00000000000000))*(npx)*(x264)))))), ((gconst0)*(((((IkReal(50000.0000000000))*(cj5)*(npz)))+(((IkReal(3500.00000000000))*(sj5)))+(((npx)*(sj5)*(x265)))+(((npy)*(sj5)*(x264)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x266=IKsin(j4);
IkReal x267=IKcos(j4);
IkReal x268=((IkReal(1.00000000000000))*(sj6));
IkReal x269=((npx)*(sj5));
IkReal x270=((IkReal(0.0700000000000000))*(sj5));
IkReal x271=((cj6)*(npx));
IkReal x272=((IkReal(0.317620000000000))*(sj3));
IkReal x273=((cj5)*(npz));
IkReal x274=((cj6)*(npy)*(sj5));
IkReal x275=((IkReal(1.00000000000000))*(x267));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x268)))+(((x266)*(x272)))+(x271));
evalcond[1]=((((IkReal(-1.00000000000000))*(x273)))+(((IkReal(-1.00000000000000))*(x274)))+(((IkReal(-1.00000000000000))*(x268)*(x269)))+(((IkReal(-1.00000000000000))*(x270)))+(((x267)*(x272))));
evalcond[2]=((((x266)*(x270)))+(((x266)*(x273)))+(((x266)*(x274)))+(((sj6)*(x266)*(x269)))+(((IkReal(-1.00000000000000))*(npy)*(x267)*(x268)))+(((x267)*(x271))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x273)*(x275)))+(((IkReal(-1.00000000000000))*(x274)*(x275)))+(((x266)*(x271)))+(x272)+(((IkReal(-1.00000000000000))*(x267)*(x268)*(x269)))+(((IkReal(-1.00000000000000))*(x267)*(x270)))+(((IkReal(-1.00000000000000))*(npy)*(x266)*(x268))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x276=((IkReal(0.448880000000000))*(cj5));
IkReal x277=((((IkReal(-0.140000000000000))*(npy)))+(((IkReal(-1.00000000000000))*(npy)*(x276))));
IkReal x278=((((IkReal(-0.140000000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x276))));
if( IKabs(x277) < IKFAST_ATAN2_MAGTHRESH && IKabs(x278) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x279=((IkReal(1.00000000000000))*(IKatan2(x277, x278)));
if( ((((x278)*(x278))+((x277)*(x277)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((x278)*(x278))+((x277)*(x277)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x278)*(x278))+((x277)*(x277))))))):(IkReal)1.0e30))*(((IkReal(0.0456091508000000))+(((IkReal(-0.0314216000000000))*(cj5)))+(((IkReal(0.448880000000000))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(pp))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((x278)*(x278))+((x277)*(x277)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x278)*(x278))+((x277)*(x277))))))):(IkReal)1.0e30))*(((IkReal(0.0456091508000000))+(((IkReal(-0.0314216000000000))*(cj5)))+(((IkReal(0.448880000000000))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(pp))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x280=IKasin(((((IKabs(IKabs(IKsqrt((((x278)*(x278))+((x277)*(x277)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x278)*(x278))+((x277)*(x277))))))):(IkReal)1.0e30))*(((IkReal(0.0456091508000000))+(((IkReal(-0.0314216000000000))*(cj5)))+(((IkReal(0.448880000000000))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(pp)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x280)))+(((IkReal(-1.00000000000000))*(x279))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(x280)+(((IkReal(-1.00000000000000))*(x279))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(-1.02653030625399))+(((IkReal(0.981951275443045))*(npx)*(sj6)))+(((IkReal(0.981951275443045))*(cj6)*(npy)))+(((IkReal(7.01393768173604))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((IkReal(0.224440000000000))+(((IkReal(0.0700000000000000))*(cj5)))+(((IkReal(0.317620000000000))*(IKcos(j3))))+(((cj5)*(cj6)*(npy)))+(((cj5)*(npx)*(sj6)))+(((IkReal(-1.00000000000000))*(npz)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x281=((sj3)*(sj5));
dummyeval[0]=sj3;
dummyeval[1]=((((IkReal(-14.2857142857143))*(cj6)*(npy)*(x281)))+(((IkReal(-14.2857142857143))*(npx)*(sj6)*(x281)))+(((IkReal(-14.2857142857143))*(cj5)*(npz)*(sj3)))+(((IkReal(-1.00000000000000))*(x281))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=((((IkReal(-1.00000000000000))*(npy)*(sj3)*(sj6)))+(((cj6)*(npx)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x282=((IkReal(1.00000000000000))*(pp));
IkReal x283=((npx)*(sj6));
IkReal x284=((IkReal(0.448880000000000))*(cj5));
IkReal x285=((IkReal(1.00000000000000))*(sj5));
IkReal x286=((cj6)*(npy));
IkReal x287=((IkReal(0.140000000000000))*(x286));
IkReal x288=((IkReal(0.140000000000000))*(x283));
IkReal x289=((x288)+(x287)+(x282));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))));
evalcond[2]=((IkReal(0.288929043600000))+(((IkReal(-1.00000000000000))*(x289))));
evalcond[3]=((IkReal(0.542060000000000))+(((IkReal(-1.00000000000000))*(npz)*(x285)))+(((IkReal(0.0700000000000000))*(cj5)))+(((cj5)*(x286)))+(((cj5)*(x283))));
evalcond[4]=((((IkReal(-0.0700000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(-1.00000000000000))*(x285)*(x286)))+(((IkReal(-1.00000000000000))*(x283)*(x285))));
evalcond[5]=((IkReal(0.0456091508000000))+(((IkReal(-0.0314216000000000))*(cj5)))+(((IkReal(0.448880000000000))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(x284)*(x286)))+(((IkReal(-1.00000000000000))*(x289)))+(((IkReal(-1.00000000000000))*(x283)*(x284))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(0.0700000000000000))*(sj5)))+(((cj5)*(npz)))+(((cj6)*(npy)*(sj5)))+(((npx)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x290=IKatan2(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))), ((((IkReal(0.0700000000000000))*(sj5)))+(((cj5)*(npz)))+(((cj6)*(npy)*(sj5)))+(((npx)*(sj5)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x290));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x290))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x291=IKcos(j4);
IkReal x292=IKsin(j4);
IkReal x293=((IkReal(1.00000000000000))*(x291));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj5)*(sj6)*(x293)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(sj5)*(x293)))+(((cj6)*(npx)*(x292)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x292)))+(((IkReal(-0.0700000000000000))*(sj5)*(x291)))+(((IkReal(-1.00000000000000))*(cj5)*(npz)*(x293))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x294=((IkReal(1.00000000000000))*(pp));
IkReal x295=((npx)*(sj6));
IkReal x296=((IkReal(0.448880000000000))*(cj5));
IkReal x297=((IkReal(1.00000000000000))*(sj5));
IkReal x298=((cj6)*(npy));
IkReal x299=((IkReal(0.140000000000000))*(x298));
IkReal x300=((IkReal(0.140000000000000))*(x295));
IkReal x301=((x300)+(x299)+(x294));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))));
evalcond[2]=((IkReal(0.00378251240000000))+(((IkReal(-1.00000000000000))*(x301))));
evalcond[3]=((IkReal(-0.0931800000000000))+(((IkReal(0.0700000000000000))*(cj5)))+(((cj5)*(x295)))+(((cj5)*(x298)))+(((IkReal(-1.00000000000000))*(npz)*(x297))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x297)*(x298)))+(((IkReal(-0.0700000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(-1.00000000000000))*(x295)*(x297))));
evalcond[5]=((IkReal(0.0456091508000000))+(((IkReal(-0.0314216000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x296)*(x298)))+(((IkReal(0.448880000000000))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(x295)*(x296)))+(((IkReal(-1.00000000000000))*(x301))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(0.0700000000000000))*(sj5)))+(((cj5)*(npz)))+(((cj6)*(npy)*(sj5)))+(((npx)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x302=IKatan2(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))), ((((IkReal(0.0700000000000000))*(sj5)))+(((cj5)*(npz)))+(((cj6)*(npy)*(sj5)))+(((npx)*(sj5)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x302));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x302))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x303=IKcos(j4);
IkReal x304=IKsin(j4);
IkReal x305=((IkReal(1.00000000000000))*(x303));
evalcond[0]=((((IkReal(-0.0700000000000000))*(sj5)*(x303)))+(((IkReal(-1.00000000000000))*(npx)*(sj5)*(sj6)*(x305)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(sj5)*(x305)))+(((IkReal(-1.00000000000000))*(cj5)*(npz)*(x305)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x304)))+(((cj6)*(npx)*(x304))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x306=((IkReal(50000.0000000000))*(npx));
IkReal x307=((npy)*(sj5));
IkReal x308=((cj5)*(npz));
IkReal x309=((cj6)*(sj5));
IkReal x310=((IkReal(50000.0000000000))*(sj6));
IkReal x311=((IkReal(15881.0000000000))*(sj3));
if( IKabs(((IkReal(6.29683269315534e-5))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((npy)*(x310)))+(((IkReal(-1.00000000000000))*(cj6)*(x306))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x311)))+(((cj6)*(npx)*(x311))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x311)))+(((cj6)*(npx)*(x311)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x306)*(x307)*((sj6)*(sj6))))+(((cj6)*(x306)*(x308)))+(((IkReal(-1.00000000000000))*(npy)*(x308)*(x310)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x307)*(x310)))+(((IkReal(-3500.00000000000))*(sj6)*(x307)))+(((IkReal(3500.00000000000))*(npx)*(x309)))+(((x306)*(x307)*((cj6)*(cj6))))+(((npx)*(sj6)*(x306)*(x309))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(6.29683269315534e-5))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((npy)*(x310)))+(((IkReal(-1.00000000000000))*(cj6)*(x306)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x311)))+(((cj6)*(npx)*(x311))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x311)))+(((cj6)*(npx)*(x311)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x306)*(x307)*((sj6)*(sj6))))+(((cj6)*(x306)*(x308)))+(((IkReal(-1.00000000000000))*(npy)*(x308)*(x310)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x307)*(x310)))+(((IkReal(-3500.00000000000))*(sj6)*(x307)))+(((IkReal(3500.00000000000))*(npx)*(x309)))+(((x306)*(x307)*((cj6)*(cj6))))+(((npx)*(sj6)*(x306)*(x309)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(6.29683269315534e-5))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((npy)*(x310)))+(((IkReal(-1.00000000000000))*(cj6)*(x306)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x311)))+(((cj6)*(npx)*(x311))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x311)))+(((cj6)*(npx)*(x311)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x306)*(x307)*((sj6)*(sj6))))+(((cj6)*(x306)*(x308)))+(((IkReal(-1.00000000000000))*(npy)*(x308)*(x310)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x307)*(x310)))+(((IkReal(-3500.00000000000))*(sj6)*(x307)))+(((IkReal(3500.00000000000))*(npx)*(x309)))+(((x306)*(x307)*((cj6)*(cj6))))+(((npx)*(sj6)*(x306)*(x309)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x312=IKsin(j4);
IkReal x313=IKcos(j4);
IkReal x314=((IkReal(1.00000000000000))*(sj6));
IkReal x315=((npx)*(sj5));
IkReal x316=((IkReal(0.0700000000000000))*(sj5));
IkReal x317=((cj6)*(npx));
IkReal x318=((IkReal(0.317620000000000))*(sj3));
IkReal x319=((cj5)*(npz));
IkReal x320=((cj6)*(npy)*(sj5));
IkReal x321=((IkReal(1.00000000000000))*(x313));
evalcond[0]=((((x312)*(x318)))+(x317)+(((IkReal(-1.00000000000000))*(npy)*(x314))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x320)))+(((IkReal(-1.00000000000000))*(x316)))+(((IkReal(-1.00000000000000))*(x319)))+(((IkReal(-1.00000000000000))*(x314)*(x315)))+(((x313)*(x318))));
evalcond[2]=((((sj6)*(x312)*(x315)))+(((x312)*(x316)))+(((x312)*(x319)))+(((IkReal(-1.00000000000000))*(npy)*(x313)*(x314)))+(((x312)*(x320)))+(((x313)*(x317))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x313)*(x316)))+(((x312)*(x317)))+(((IkReal(-1.00000000000000))*(npy)*(x312)*(x314)))+(((IkReal(-1.00000000000000))*(x313)*(x314)*(x315)))+(((IkReal(-1.00000000000000))*(x320)*(x321)))+(x318)+(((IkReal(-1.00000000000000))*(x319)*(x321))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x322=((cj6)*(npx));
IkReal x323=((npy)*(sj6));
IkReal x324=((sj3)*(sj5));
if( IKabs(((IkReal(6.29683269315534e-5))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(50000.0000000000))*(x323)))+(((IkReal(-50000.0000000000))*(x322))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-794050000.000000))*(cj6)*(npy)*(x324)))+(((IkReal(-794050000.000000))*(npx)*(sj6)*(x324)))+(((IkReal(-794050000.000000))*(cj5)*(npz)*(sj3)))+(((IkReal(-55583500.0000000))*(x324))))) != 0)?((IkReal)1/(((((IkReal(-794050000.000000))*(cj6)*(npy)*(x324)))+(((IkReal(-794050000.000000))*(npx)*(sj6)*(x324)))+(((IkReal(-794050000.000000))*(cj5)*(npz)*(sj3)))+(((IkReal(-55583500.0000000))*(x324)))))):(IkReal)1.0e30))*(((((IkReal(-252206161.000000))*((sj3)*(sj3))))+(((IkReal(-5000000000.00000))*(x322)*(x323)))+(((IkReal(2500000000.00000))*((x322)*(x322))))+(((IkReal(2500000000.00000))*((x323)*(x323)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(6.29683269315534e-5))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(50000.0000000000))*(x323)))+(((IkReal(-50000.0000000000))*(x322)))))))+IKsqr(((((IKabs(((((IkReal(-794050000.000000))*(cj6)*(npy)*(x324)))+(((IkReal(-794050000.000000))*(npx)*(sj6)*(x324)))+(((IkReal(-794050000.000000))*(cj5)*(npz)*(sj3)))+(((IkReal(-55583500.0000000))*(x324))))) != 0)?((IkReal)1/(((((IkReal(-794050000.000000))*(cj6)*(npy)*(x324)))+(((IkReal(-794050000.000000))*(npx)*(sj6)*(x324)))+(((IkReal(-794050000.000000))*(cj5)*(npz)*(sj3)))+(((IkReal(-55583500.0000000))*(x324)))))):(IkReal)1.0e30))*(((((IkReal(-252206161.000000))*((sj3)*(sj3))))+(((IkReal(-5000000000.00000))*(x322)*(x323)))+(((IkReal(2500000000.00000))*((x322)*(x322))))+(((IkReal(2500000000.00000))*((x323)*(x323))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(6.29683269315534e-5))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(50000.0000000000))*(x323)))+(((IkReal(-50000.0000000000))*(x322)))))), ((((IKabs(((((IkReal(-794050000.000000))*(cj6)*(npy)*(x324)))+(((IkReal(-794050000.000000))*(npx)*(sj6)*(x324)))+(((IkReal(-794050000.000000))*(cj5)*(npz)*(sj3)))+(((IkReal(-55583500.0000000))*(x324))))) != 0)?((IkReal)1/(((((IkReal(-794050000.000000))*(cj6)*(npy)*(x324)))+(((IkReal(-794050000.000000))*(npx)*(sj6)*(x324)))+(((IkReal(-794050000.000000))*(cj5)*(npz)*(sj3)))+(((IkReal(-55583500.0000000))*(x324)))))):(IkReal)1.0e30))*(((((IkReal(-252206161.000000))*((sj3)*(sj3))))+(((IkReal(-5000000000.00000))*(x322)*(x323)))+(((IkReal(2500000000.00000))*((x322)*(x322))))+(((IkReal(2500000000.00000))*((x323)*(x323))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x325=IKsin(j4);
IkReal x326=IKcos(j4);
IkReal x327=((IkReal(1.00000000000000))*(sj6));
IkReal x328=((npx)*(sj5));
IkReal x329=((IkReal(0.0700000000000000))*(sj5));
IkReal x330=((cj6)*(npx));
IkReal x331=((IkReal(0.317620000000000))*(sj3));
IkReal x332=((cj5)*(npz));
IkReal x333=((cj6)*(npy)*(sj5));
IkReal x334=((IkReal(1.00000000000000))*(x326));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x327)))+(x330)+(((x325)*(x331))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x329)))+(((IkReal(-1.00000000000000))*(x327)*(x328)))+(((IkReal(-1.00000000000000))*(x332)))+(((IkReal(-1.00000000000000))*(x333)))+(((x326)*(x331))));
evalcond[2]=((((sj6)*(x325)*(x328)))+(((x325)*(x329)))+(((IkReal(-1.00000000000000))*(npy)*(x326)*(x327)))+(((x325)*(x332)))+(((x325)*(x333)))+(((x326)*(x330))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x333)*(x334)))+(((IkReal(-1.00000000000000))*(x326)*(x329)))+(x331)+(((IkReal(-1.00000000000000))*(npy)*(x325)*(x327)))+(((IkReal(-1.00000000000000))*(x326)*(x327)*(x328)))+(((IkReal(-1.00000000000000))*(x332)*(x334)))+(((x325)*(x330))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x335=((IkReal(50000.0000000000))*(cj6));
IkReal x336=((IkReal(50000.0000000000))*(sj6));
if( IKabs(((gconst0)*(((((npy)*(x336)))+(((IkReal(-1.00000000000000))*(npx)*(x335))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((npy)*(sj5)*(x335)))+(((IkReal(50000.0000000000))*(cj5)*(npz)))+(((IkReal(3500.00000000000))*(sj5)))+(((npx)*(sj5)*(x336))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((((npy)*(x336)))+(((IkReal(-1.00000000000000))*(npx)*(x335)))))), ((gconst0)*(((((npy)*(sj5)*(x335)))+(((IkReal(50000.0000000000))*(cj5)*(npz)))+(((IkReal(3500.00000000000))*(sj5)))+(((npx)*(sj5)*(x336)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x337=IKsin(j4);
IkReal x338=IKcos(j4);
IkReal x339=((IkReal(1.00000000000000))*(sj6));
IkReal x340=((npx)*(sj5));
IkReal x341=((IkReal(0.0700000000000000))*(sj5));
IkReal x342=((cj6)*(npx));
IkReal x343=((IkReal(0.317620000000000))*(sj3));
IkReal x344=((cj5)*(npz));
IkReal x345=((cj6)*(npy)*(sj5));
IkReal x346=((IkReal(1.00000000000000))*(x338));
evalcond[0]=((((x337)*(x343)))+(x342)+(((IkReal(-1.00000000000000))*(npy)*(x339))));
evalcond[1]=((((x338)*(x343)))+(((IkReal(-1.00000000000000))*(x341)))+(((IkReal(-1.00000000000000))*(x339)*(x340)))+(((IkReal(-1.00000000000000))*(x345)))+(((IkReal(-1.00000000000000))*(x344))));
evalcond[2]=((((sj6)*(x337)*(x340)))+(((x337)*(x345)))+(((x337)*(x341)))+(((x337)*(x344)))+(((IkReal(-1.00000000000000))*(npy)*(x338)*(x339)))+(((x338)*(x342))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npy)*(x337)*(x339)))+(((x337)*(x342)))+(((IkReal(-1.00000000000000))*(x338)*(x339)*(x340)))+(x343)+(((IkReal(-1.00000000000000))*(x344)*(x346)))+(((IkReal(-1.00000000000000))*(x345)*(x346)))+(((IkReal(-1.00000000000000))*(x338)*(x341))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x85=((IkReal(1.00000000000000))*(cj3));
IkReal x86=((sj4)*(sj6));
IkReal x87=((sj3)*(sj5));
IkReal x88=((cj5)*(sj4));
IkReal x89=((cj4)*(cj5));
IkReal x90=((IkReal(1.00000000000000))*(cj4));
IkReal x91=((IkReal(1.00000000000000))*(sj3));
IkReal x92=((cj6)*(sj4));
IkReal x93=((((cj4)*(cj6)))+(((sj5)*(x86))));
IkReal x94=((((IkReal(-1.00000000000000))*(sj6)*(x90)))+(((sj5)*(x92))));
IkReal x95=((x87)+(((IkReal(-1.00000000000000))*(x85)*(x89))));
IkReal x96=((((cj3)*(cj5)))+(((IkReal(-1.00000000000000))*(x87)*(x90))));
IkReal x97=((((IkReal(-1.00000000000000))*(cj4)*(sj5)*(x85)))+(((IkReal(-1.00000000000000))*(cj5)*(x91))));
IkReal x98=((((IkReal(-1.00000000000000))*(sj5)*(x85)))+(((IkReal(-1.00000000000000))*(x89)*(x91))));
IkReal x99=((cj6)*(x97));
IkReal x100=((((sj3)*(x92)))+(((sj6)*(x96))));
IkReal x101=((((cj6)*(x96)))+(((IkReal(-1.00000000000000))*(sj3)*(x86))));
IkReal x102=((((sj6)*(x97)))+(((cj3)*(x92))));
IkReal x103=((x99)+(((IkReal(-1.00000000000000))*(cj3)*(x86))));
new_r00=((((r01)*(x94)))+(((r00)*(x93)))+(((r02)*(x88))));
new_r01=((((r12)*(x88)))+(((r11)*(x94)))+(((r10)*(x93))));
new_r02=((((r21)*(x94)))+(((r20)*(x93)))+(((r22)*(x88))));
new_r10=((((r01)*(x103)))+(((r00)*(x102)))+(((r02)*(x95))));
new_r11=((((r12)*(x95)))+(((r10)*(x102)))+(((r11)*(((x99)+(((IkReal(-1.00000000000000))*(x85)*(x86))))))));
new_r12=((((r21)*(x103)))+(((r20)*(x102)))+(((r22)*(x95))));
new_r20=((((r01)*(x101)))+(((r00)*(x100)))+(((r02)*(x98))));
new_r21=((((r12)*(x98)))+(((r10)*(x100)))+(((r11)*(x101))));
new_r22=((((r21)*(x101)))+(((r20)*(x100)))+(((r22)*(x98))));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=new_r22;
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(cj1);
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((cj1)*(new_r10)*(new_r12)))+(((cj1)*(new_r00)*(new_r02)))));
dummyeval[0]=((((cj1)*(new_r10)*(new_r12)))+(((cj1)*(new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x104=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x104;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x104;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x105=IKatan2(new_r12, new_r02);
j2array[0]=((IkReal(-1.00000000000000))*(x105));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x105))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j2))))+(((new_r02)*(IKcos(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r00)*(sj2)))+(((cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))+IKsqr(((((new_r00)*(sj2)))+(((cj2)*(new_r10)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))), ((((new_r00)*(sj2)))+(((cj2)*(new_r10)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x106=IKcos(j0);
IkReal x107=((IkReal(1.00000000000000))*(sj2));
IkReal x108=((IkReal(1.00000000000000))*(IKsin(j0)));
evalcond[0]=((((new_r00)*(sj2)))+(((cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(x106))));
evalcond[1]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x108)))+(((cj2)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r11)*(x107)))+(x106)+(((cj2)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x107)))+(((IkReal(-1.00000000000000))*(x108)))+(((cj2)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x109=IKatan2(new_r12, new_r02);
j2array[0]=((IkReal(-1.00000000000000))*(x109));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x109))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j2))))+(((new_r02)*(IKcos(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r00)*(sj2)))+(((cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))+IKsqr(((((new_r00)*(sj2)))+(((cj2)*(new_r10)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))), ((((new_r00)*(sj2)))+(((cj2)*(new_r10)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x110=IKsin(j0);
IkReal x111=((IkReal(1.00000000000000))*(sj2));
IkReal x112=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((((new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(x112)))+(((cj2)*(new_r10))));
evalcond[1]=((((new_r01)*(sj2)))+(((cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(x110))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r11)*(x111)))+(((IkReal(-1.00000000000000))*(x112)))+(((cj2)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x111)))+(x110)+(((cj2)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x113=((gconst3)*(new_r20)*(sj1));
if( IKabs(((new_r12)*(x113))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x113))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x113)), ((IkReal(-1.00000000000000))*(new_r02)*(x113)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x114=IKcos(j2);
IkReal x115=IKsin(j2);
IkReal x116=((IkReal(1.00000000000000))*(cj1));
IkReal x117=((new_r02)*(x114));
IkReal x118=((new_r12)*(x115));
IkReal x119=((cj1)*(x114));
evalcond[0]=((((new_r02)*(x115)))+(((new_r12)*(x114))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x116)))+(x117)+(((IkReal(-1.00000000000000))*(x118))));
evalcond[2]=((((new_r20)*(sj1)))+(((new_r00)*(x119)))+(((IkReal(-1.00000000000000))*(new_r10)*(x115)*(x116))));
evalcond[3]=((((new_r01)*(x119)))+(((new_r21)*(sj1)))+(((IkReal(-1.00000000000000))*(new_r11)*(x115)*(x116))));
evalcond[4]=((IkReal(-1.00000000000000))+(((cj1)*(x117)))+(((IkReal(-1.00000000000000))*(x116)*(x118)))+(((new_r22)*(sj1))));
evalcond[5]=((((sj1)*(x117)))+(((IkReal(-1.00000000000000))*(sj1)*(x118)))+(((IkReal(-1.00000000000000))*(new_r22)*(x116))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(cj1);
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x120=((IkReal(-1.00000000000000))+(new_r22));
IkReal x121=((((new_r02)*(sj2)))+(((cj2)*(new_r12))));
IkReal x122=((((cj2)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj2))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x120;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x121;
evalcond[5]=x121;
evalcond[6]=x122;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x120;
evalcond[10]=x122;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r00)*(sj2)))+(((cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))+IKsqr(((((new_r00)*(sj2)))+(((cj2)*(new_r10)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))), ((((new_r00)*(sj2)))+(((cj2)*(new_r10)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x123=IKcos(j0);
IkReal x124=((IkReal(1.00000000000000))*(sj2));
IkReal x125=((IkReal(1.00000000000000))*(IKsin(j0)));
evalcond[0]=((((new_r00)*(sj2)))+(((cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(x123))));
evalcond[1]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x125)))+(((cj2)*(new_r11))));
evalcond[2]=((x123)+(((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x124))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x124)))+(((IkReal(-1.00000000000000))*(x125)))+(((cj2)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x126=((new_r12)*(sj2));
IkReal x127=((cj2)*(new_r02));
IkReal x128=((((new_r02)*(sj2)))+(((cj2)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x128;
evalcond[5]=x128;
evalcond[6]=((x127)+(((IkReal(-1.00000000000000))*(x126))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((x126)+(((IkReal(-1.00000000000000))*(x127))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r00)*(sj2)))+(((cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))+IKsqr(((((new_r00)*(sj2)))+(((cj2)*(new_r10)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))), ((((new_r00)*(sj2)))+(((cj2)*(new_r10)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x129=IKsin(j0);
IkReal x130=((IkReal(1.00000000000000))*(sj2));
IkReal x131=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((((new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(x131)))+(((cj2)*(new_r10))));
evalcond[1]=((((new_r01)*(sj2)))+(((cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(x129))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r11)*(x130)))+(((IkReal(-1.00000000000000))*(x131)))+(((cj2)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x130)))+(x129)+(((cj2)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r00)*(sj2)))+(((cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))+IKsqr(((((new_r00)*(sj2)))+(((cj2)*(new_r10)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))), ((((new_r00)*(sj2)))+(((cj2)*(new_r10)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x132=IKcos(j0);
IkReal x133=IKsin(j0);
IkReal x134=((IkReal(1.00000000000000))*(cj1));
IkReal x135=((IkReal(1.00000000000000))*(sj1));
IkReal x136=((new_r10)*(sj2));
IkReal x137=((cj2)*(new_r01));
IkReal x138=((cj2)*(new_r00));
IkReal x139=((new_r11)*(sj2));
IkReal x140=((IkReal(1.00000000000000))*(x133));
evalcond[0]=((new_r20)+(((cj1)*(x133))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x132)*(x134)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(((cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(x132))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x140)))+(((new_r01)*(sj2)))+(((cj2)*(new_r11))));
evalcond[4]=((x137)+(((IkReal(-1.00000000000000))*(x139)))+(((sj1)*(x132))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x133)*(x135)))+(x138)+(((IkReal(-1.00000000000000))*(x136))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x135)*(x139)))+(x132)+(((IkReal(-1.00000000000000))*(new_r21)*(x134)))+(((sj1)*(x137))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x140)))+(((IkReal(-1.00000000000000))*(x135)*(x136)))+(((IkReal(-1.00000000000000))*(new_r20)*(x134)))+(((sj1)*(x138))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))+IKsqr(((new_r21)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))), ((new_r21)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x141=IKcos(j0);
IkReal x142=IKsin(j0);
IkReal x143=((IkReal(1.00000000000000))*(cj1));
IkReal x144=((IkReal(1.00000000000000))*(sj1));
IkReal x145=((new_r10)*(sj2));
IkReal x146=((cj2)*(new_r01));
IkReal x147=((cj2)*(new_r00));
IkReal x148=((new_r11)*(sj2));
IkReal x149=((IkReal(1.00000000000000))*(x142));
evalcond[0]=((new_r20)+(((cj1)*(x142))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x141)*(x143)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(x141)))+(((cj2)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x149)))+(((new_r01)*(sj2)))+(((cj2)*(new_r11))));
evalcond[4]=((((sj1)*(x141)))+(x146)+(((IkReal(-1.00000000000000))*(x148))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x142)*(x144)))+(x147)+(((IkReal(-1.00000000000000))*(x145))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x143)))+(((sj1)*(x146)))+(((IkReal(-1.00000000000000))*(x144)*(x148)))+(x141));
evalcond[7]=((((IkReal(-1.00000000000000))*(x149)))+(((IkReal(-1.00000000000000))*(new_r20)*(x143)))+(((sj1)*(x147)))+(((IkReal(-1.00000000000000))*(x144)*(x145))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst4)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst4)*(new_r20)), ((gconst4)*(new_r21)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x150=IKcos(j0);
IkReal x151=IKsin(j0);
IkReal x152=((IkReal(1.00000000000000))*(cj1));
IkReal x153=((IkReal(1.00000000000000))*(sj1));
IkReal x154=((new_r10)*(sj2));
IkReal x155=((cj2)*(new_r01));
IkReal x156=((cj2)*(new_r00));
IkReal x157=((new_r11)*(sj2));
IkReal x158=((IkReal(1.00000000000000))*(x151));
evalcond[0]=((new_r20)+(((cj1)*(x151))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x150)*(x152)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(x150)))+(((cj2)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x158)))+(((new_r01)*(sj2)))+(((cj2)*(new_r11))));
evalcond[4]=((((sj1)*(x150)))+(x155)+(((IkReal(-1.00000000000000))*(x157))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x151)*(x153)))+(x156)+(((IkReal(-1.00000000000000))*(x154))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x153)*(x157)))+(((sj1)*(x155)))+(((IkReal(-1.00000000000000))*(new_r21)*(x152)))+(x150));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x152)))+(((IkReal(-1.00000000000000))*(x158)))+(((IkReal(-1.00000000000000))*(x153)*(x154)))+(((sj1)*(x156))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x159=((cj1)*(gconst2));
if( IKabs(((new_r12)*(x159))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x159))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x159)), ((IkReal(-1.00000000000000))*(new_r02)*(x159)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x160=IKcos(j2);
IkReal x161=IKsin(j2);
IkReal x162=((IkReal(1.00000000000000))*(cj1));
IkReal x163=((new_r02)*(x160));
IkReal x164=((new_r12)*(x161));
IkReal x165=((cj1)*(x160));
evalcond[0]=((((new_r12)*(x160)))+(((new_r02)*(x161))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x162)))+(x163)+(((IkReal(-1.00000000000000))*(x164))));
evalcond[2]=((((new_r00)*(x165)))+(((new_r20)*(sj1)))+(((IkReal(-1.00000000000000))*(new_r10)*(x161)*(x162))));
evalcond[3]=((((new_r01)*(x165)))+(((IkReal(-1.00000000000000))*(new_r11)*(x161)*(x162)))+(((new_r21)*(sj1))));
evalcond[4]=((IkReal(-1.00000000000000))+(((new_r22)*(sj1)))+(((IkReal(-1.00000000000000))*(x162)*(x164)))+(((cj1)*(x163))));
evalcond[5]=((((sj1)*(x163)))+(((IkReal(-1.00000000000000))*(new_r22)*(x162)))+(((IkReal(-1.00000000000000))*(sj1)*(x164))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(cj1);
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x166=((IkReal(-1.00000000000000))+(new_r22));
IkReal x167=((((new_r02)*(sj2)))+(((cj2)*(new_r12))));
IkReal x168=((((cj2)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj2))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x166;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x167;
evalcond[5]=x167;
evalcond[6]=x168;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x166;
evalcond[10]=x168;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r00)*(sj2)))+(((cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))+IKsqr(((((new_r00)*(sj2)))+(((cj2)*(new_r10)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))), ((((new_r00)*(sj2)))+(((cj2)*(new_r10)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x169=IKcos(j0);
IkReal x170=((IkReal(1.00000000000000))*(sj2));
IkReal x171=((IkReal(1.00000000000000))*(IKsin(j0)));
evalcond[0]=((((new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(x169)))+(((cj2)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x171)))+(((new_r01)*(sj2)))+(((cj2)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r11)*(x170)))+(x169)+(((cj2)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(new_r10)*(x170)))+(((cj2)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x172=((new_r12)*(sj2));
IkReal x173=((cj2)*(new_r02));
IkReal x174=((((new_r02)*(sj2)))+(((cj2)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x174;
evalcond[5]=x174;
evalcond[6]=((((IkReal(-1.00000000000000))*(x172)))+(x173));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x173)))+(x172));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r00)*(sj2)))+(((cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))+IKsqr(((((new_r00)*(sj2)))+(((cj2)*(new_r10)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))), ((((new_r00)*(sj2)))+(((cj2)*(new_r10)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x175=IKsin(j0);
IkReal x176=((IkReal(1.00000000000000))*(sj2));
IkReal x177=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x177)))+(((new_r00)*(sj2)))+(((cj2)*(new_r10))));
evalcond[1]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x175)))+(((cj2)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x177)))+(((IkReal(-1.00000000000000))*(new_r11)*(x176)))+(((cj2)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x176)))+(x175)+(((cj2)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r00)*(sj2)))+(((cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))+IKsqr(((((new_r00)*(sj2)))+(((cj2)*(new_r10)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))), ((((new_r00)*(sj2)))+(((cj2)*(new_r10)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x178=IKcos(j0);
IkReal x179=IKsin(j0);
IkReal x180=((IkReal(1.00000000000000))*(cj1));
IkReal x181=((IkReal(1.00000000000000))*(sj1));
IkReal x182=((new_r10)*(sj2));
IkReal x183=((cj2)*(new_r01));
IkReal x184=((cj2)*(new_r00));
IkReal x185=((new_r11)*(sj2));
IkReal x186=((IkReal(1.00000000000000))*(x179));
evalcond[0]=((((cj1)*(x179)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x178)*(x180)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x178)))+(((new_r00)*(sj2)))+(((cj2)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x186)))+(((new_r01)*(sj2)))+(((cj2)*(new_r11))));
evalcond[4]=((((sj1)*(x178)))+(((IkReal(-1.00000000000000))*(x185)))+(x183));
evalcond[5]=((((IkReal(-1.00000000000000))*(x182)))+(x184)+(((IkReal(-1.00000000000000))*(x179)*(x181))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x180)))+(((sj1)*(x183)))+(x178)+(((IkReal(-1.00000000000000))*(x181)*(x185))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x186)))+(((sj1)*(x184)))+(((IkReal(-1.00000000000000))*(new_r20)*(x180)))+(((IkReal(-1.00000000000000))*(x181)*(x182))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))+IKsqr(((new_r21)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))), ((new_r21)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x187=IKcos(j0);
IkReal x188=IKsin(j0);
IkReal x189=((IkReal(1.00000000000000))*(cj1));
IkReal x190=((IkReal(1.00000000000000))*(sj1));
IkReal x191=((new_r10)*(sj2));
IkReal x192=((cj2)*(new_r01));
IkReal x193=((cj2)*(new_r00));
IkReal x194=((new_r11)*(sj2));
IkReal x195=((IkReal(1.00000000000000))*(x188));
evalcond[0]=((((cj1)*(x188)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x187)*(x189)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(x187)))+(((cj2)*(new_r10))));
evalcond[3]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x195)))+(((cj2)*(new_r11))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x194)))+(((sj1)*(x187)))+(x192));
evalcond[5]=((((IkReal(-1.00000000000000))*(x188)*(x190)))+(((IkReal(-1.00000000000000))*(x191)))+(x193));
evalcond[6]=((((sj1)*(x192)))+(((IkReal(-1.00000000000000))*(x190)*(x194)))+(((IkReal(-1.00000000000000))*(new_r21)*(x189)))+(x187));
evalcond[7]=((((sj1)*(x193)))+(((IkReal(-1.00000000000000))*(x190)*(x191)))+(((IkReal(-1.00000000000000))*(x195)))+(((IkReal(-1.00000000000000))*(new_r20)*(x189))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst4)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst4)*(new_r20)), ((gconst4)*(new_r21)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x196=IKcos(j0);
IkReal x197=IKsin(j0);
IkReal x198=((IkReal(1.00000000000000))*(cj1));
IkReal x199=((IkReal(1.00000000000000))*(sj1));
IkReal x200=((new_r10)*(sj2));
IkReal x201=((cj2)*(new_r01));
IkReal x202=((cj2)*(new_r00));
IkReal x203=((new_r11)*(sj2));
IkReal x204=((IkReal(1.00000000000000))*(x197));
evalcond[0]=((((cj1)*(x197)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x196)*(x198)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x196)))+(((new_r00)*(sj2)))+(((cj2)*(new_r10))));
evalcond[3]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x204)))+(((cj2)*(new_r11))));
evalcond[4]=((((sj1)*(x196)))+(x201)+(((IkReal(-1.00000000000000))*(x203))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x197)*(x199)))+(x202)+(((IkReal(-1.00000000000000))*(x200))));
evalcond[6]=((((sj1)*(x201)))+(((IkReal(-1.00000000000000))*(new_r21)*(x198)))+(x196)+(((IkReal(-1.00000000000000))*(x199)*(x203))));
evalcond[7]=((((sj1)*(x202)))+(((IkReal(-1.00000000000000))*(new_r20)*(x198)))+(((IkReal(-1.00000000000000))*(x204)))+(((IkReal(-1.00000000000000))*(x199)*(x200))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst1)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst1)*(new_r20)), ((gconst1)*(new_r21)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(IKsin(j0))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(IKcos(j0))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x205=((gconst6)*(sj0));
if( IKabs(((new_r12)*(x205))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x205))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x205)), ((IkReal(-1.00000000000000))*(new_r02)*(x205)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x206=IKsin(j2);
IkReal x207=IKcos(j2);
IkReal x208=((IkReal(1.00000000000000))*(sj0));
IkReal x209=((IkReal(1.00000000000000))*(cj1));
IkReal x210=((IkReal(1.00000000000000))*(x206));
IkReal x211=((new_r01)*(x207));
IkReal x212=((new_r00)*(x207));
IkReal x213=((new_r02)*(x207));
evalcond[0]=((((new_r02)*(x206)))+(((new_r12)*(x207))));
evalcond[1]=((((new_r10)*(x207)))+(((new_r00)*(x206)))+(((IkReal(-1.00000000000000))*(cj0))));
evalcond[2]=((((new_r11)*(x207)))+(((new_r01)*(x206)))+(((IkReal(-1.00000000000000))*(x208))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x209)))+(((IkReal(-1.00000000000000))*(new_r12)*(x210)))+(x213));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r11)*(x210)))+(x211)+(((cj0)*(sj1))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r10)*(x210)))+(x212)+(((IkReal(-1.00000000000000))*(sj1)*(x208))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r10)*(x206)*(x209)))+(((new_r20)*(sj1)))+(((cj1)*(x212))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r11)*(x206)*(x209)))+(((cj1)*(x211)))+(((new_r21)*(sj1))));
evalcond[8]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x206)*(x209)))+(((new_r22)*(sj1)))+(((cj1)*(x213))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r22)*(x209)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj1)*(x210)))+(((sj1)*(x213))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r11)*(sj1)*(x210)))+(((IkReal(-1.00000000000000))*(new_r21)*(x209)))+(cj0)+(((sj1)*(x211))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x209)))+(((IkReal(-1.00000000000000))*(x208)))+(((sj1)*(x212)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj1)*(x210))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x214=((cj0)*(gconst5));
if( IKabs(((new_r12)*(x214))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x214))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x214)), ((IkReal(-1.00000000000000))*(new_r02)*(x214)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x215=IKsin(j2);
IkReal x216=IKcos(j2);
IkReal x217=((IkReal(1.00000000000000))*(sj0));
IkReal x218=((IkReal(1.00000000000000))*(cj1));
IkReal x219=((IkReal(1.00000000000000))*(x215));
IkReal x220=((new_r01)*(x216));
IkReal x221=((new_r00)*(x216));
IkReal x222=((new_r02)*(x216));
evalcond[0]=((((new_r02)*(x215)))+(((new_r12)*(x216))));
evalcond[1]=((((new_r00)*(x215)))+(((new_r10)*(x216)))+(((IkReal(-1.00000000000000))*(cj0))));
evalcond[2]=((((new_r01)*(x215)))+(((IkReal(-1.00000000000000))*(x217)))+(((new_r11)*(x216))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r12)*(x219)))+(x222)+(((IkReal(-1.00000000000000))*(x218))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r11)*(x219)))+(x220)+(((cj0)*(sj1))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj1)*(x217)))+(((IkReal(-1.00000000000000))*(new_r10)*(x219)))+(x221));
evalcond[6]=((((new_r20)*(sj1)))+(((cj1)*(x221)))+(((IkReal(-1.00000000000000))*(new_r10)*(x215)*(x218))));
evalcond[7]=((((cj1)*(x220)))+(((IkReal(-1.00000000000000))*(new_r11)*(x215)*(x218)))+(((new_r21)*(sj1))));
evalcond[8]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x215)*(x218)))+(((cj1)*(x222)))+(((new_r22)*(sj1))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r12)*(sj1)*(x219)))+(((sj1)*(x222)))+(((IkReal(-1.00000000000000))*(new_r22)*(x218))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r11)*(sj1)*(x219)))+(cj0)+(((sj1)*(x220)))+(((IkReal(-1.00000000000000))*(new_r21)*(x218))));
evalcond[11]=((((sj1)*(x221)))+(((IkReal(-1.00000000000000))*(new_r20)*(x218)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj1)*(x219)))+(((IkReal(-1.00000000000000))*(x217))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - mk2 (8e7758ff9aa4ae0d266788cccee80d00)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
