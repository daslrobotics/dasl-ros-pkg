/* Auto-generated by genmsg_cpp for file /home/dasl/rosbuild_ws/dasl-ros-pkg/dasl_mocap/msg/Pose.msg */
#ifndef DASL_MOCAP_MESSAGE_POSE_H
#define DASL_MOCAP_MESSAGE_POSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace dasl_mocap
{
template <class ContainerAllocator>
struct Pose_ {
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , theta(0.0)
  , linear_velocity(0.0)
  , angular_velocity(0.0)
  {
  }

  Pose_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , theta(0.0)
  , linear_velocity(0.0)
  , angular_velocity(0.0)
  {
  }

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _z_type;
  float z;

  typedef float _theta_type;
  float theta;

  typedef float _linear_velocity_type;
  float linear_velocity;

  typedef float _angular_velocity_type;
  float angular_velocity;


  typedef boost::shared_ptr< ::dasl_mocap::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dasl_mocap::Pose_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Pose
typedef  ::dasl_mocap::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::dasl_mocap::Pose> PosePtr;
typedef boost::shared_ptr< ::dasl_mocap::Pose const> PoseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::dasl_mocap::Pose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::dasl_mocap::Pose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace dasl_mocap

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dasl_mocap::Pose_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dasl_mocap::Pose_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dasl_mocap::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f37b4ac78d63d30fc93558b1e833cae";
  }

  static const char* value(const  ::dasl_mocap::Pose_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6f37b4ac78d63d30ULL;
  static const uint64_t static_value2 = 0xfc93558b1e833caeULL;
};

template<class ContainerAllocator>
struct DataType< ::dasl_mocap::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dasl_mocap/Pose";
  }

  static const char* value(const  ::dasl_mocap::Pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dasl_mocap::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 x\n\
float32 y\n\
float32 z\n\
float32 theta\n\
\n\
float32 linear_velocity\n\
float32 angular_velocity\n\
\n\
";
  }

  static const char* value(const  ::dasl_mocap::Pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dasl_mocap::Pose_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dasl_mocap::Pose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.theta);
    stream.next(m.linear_velocity);
    stream.next(m.angular_velocity);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Pose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dasl_mocap::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::dasl_mocap::Pose_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "linear_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "angular_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.angular_velocity);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DASL_MOCAP_MESSAGE_POSE_H

