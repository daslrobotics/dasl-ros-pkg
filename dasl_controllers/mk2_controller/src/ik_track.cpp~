/*********************************************************************
*
* Software License Agreement (BSD License)
*
*  Copyright (c) 2012, Willow Garage, Inc.
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions
*  are met:
*
*   * Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
*   * Neither the name of Willow Garage, Inc. nor the names of its
*     contributors may be used to endorse or promote products derived
*     from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*
* Author: Sachin Chitta
*********************************************************************/

#include <ros/ros.h>

// MoveIt!
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_model/robot_model.h>
#include <moveit/robot_state/robot_state.h>
#include <moveit/robot_state/joint_state_group.h>

// Track Marker
#include <visualization_msgs/Marker.h>

// Nav Messages
#include <nav_msgs/Odometry.h>
#include <std_msgs/Float64.h>
#include <eigen_conversions/eigen_msg.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/Joy.h>
#include <stdio.h>
#include <iostream>

// Defines
sensor_msgs::Joy joy_data;
using namespace std;
float a;
void joy_cb(const sensor_msgs::Joy::ConstPtr& joy)
{
  //  a = joy->axes[1];
    //joy_data.buttons = joy->buttons;
}

int main(int argc, char **argv)
{
  ros::init (argc, argv, "arm_kinematics");
  ros::AsyncSpinner spinner(1);
  spinner.start();

  geometry_msgs::Pose actual_end_effector;
  geometry_msgs::Pose desired_end_effector;

  ros::Subscriber joy_sub;
  ros::Publisher joint_pub;
  ros::NodeHandle nh_tilde;

  //joy_sub = nh_tilde.subscribe("/joy", 10, joy_cb);
  joint_pub = nh_tilde.advertise<sensor_msgs::JointState>("/command", 5);
  joy_sub = nh_tilde.subscribe<sensor_msgs::Joy>("joy", 10, &joy_cb);
  
  /* Load the robot model */
  robot_model_loader::RobotModelLoader robot_model_loader("robot_description"); 

  /* Get a shared pointer to the model */
  robot_model::RobotModelPtr kinematic_model = robot_model_loader.getModel();

  /* Get and print the name of the coordinate frame in which the transforms for this model are computed*/
  ROS_INFO("Model frame: %s", kinematic_model->getModelFrame().c_str());  
  
  /* WORKING WITH THE KINEMATIC STATE */
  /* Create a kinematic state - this represents the configuration for the robot represented by kinematic_model */
  robot_state::RobotStatePtr kinematic_state(new robot_state::RobotState(kinematic_model));

  /* Set all joints in this state to their default values */
  kinematic_state->setToDefaultValues();  

  /* Get the configuration for the joints in the right arm of the MK2*/
  robot_state::JointStateGroup* joint_state_group = kinematic_state->getJointStateGroup("manipulator");

  /* Get the names of the joints in the right_arm*/
  const std::vector<std::string> &joint_names = joint_state_group->getJointModelGroup()->getJointModelNames();
  
  /* Get the joint states for the right arm*/
  std::vector<double> joint_values;
  joint_state_group->getVariableValues(joint_values);

  Eigen::Affine3d end_effector_state;

  std::vector<double> vel;
  double p[] = {0.2,0.2,0.2,0.2,0.2,0.2,0.2};
  std::vector<double> a(p, p+7);
  sensor_msgs::JointState msg; 
 
  while(nh_tilde.ok())
  {
    end_effector_state = joint_state_group->getRobotState()->getLinkState("link_7")->getGlobalLinkTransform();

    tf::poseEigenToMsg(end_effector_state, actual_end_effector); 

    desired_end_effector.position.x = 1.0 * actual_end_effector.position.x; // * joy_data.axes[1];

   std::cout << a << "\n";

   // ROS_INFO_STREAM("X: " << a); //desired_end_effector.position.x);

    bool found_ik = joint_state_group->setFromIK(end_effector_state, 10, 0.1);

    if (found_ik)
    {
      joint_state_group->getVariableValues(joint_values);
      msg.header.stamp = ros::Time::now();  
      msg.name = joint_names; 
      msg.position = joint_values;
      msg.velocity = a;
      //joint_pub.publish(msg);
    }
    else
    {
      ROS_INFO("Did not find IK solution");
    }
  }

  ros::shutdown();
  return 0;
}
