#!/usr/bin/env python

import roslib
import rospy
import os
import time
roslib.load_manifest('gantry_controller')
import threading

from std_msgs.msg import String, Header, Int32
from datetime import datetime
from geometry_msgs.msg import Twist, Pose

class PID:

	def __init__(self):
		self.gantry_cmd_vel_pub = rospy.Publisher('/cmd_vel', Twist)
		rospy.init_node('x_playback')

		self.Kp = 0.01
		self.Ki = 0.0
		self.Kd = 0.0
		self.Integrator = 0.0
		self.Integrator_max = 500
		self.Integrator_min = -500
		self.Derivator = 0.0
		
		self.x = 0.0
		self.current_value = 0.0
		self.set_point = 110
		self.error = 0.0
		self.gantry_cmd_vel = Twist()

		self.update()

	def reg_main(self):
		self.sub_pos = rospy.Subscriber("/Optitrack/RB0", Pose, self.pos_call)
		rospy.spin()

	def pos_call(self,data):
		self.current_value = data.position.x

	def update(self):

		threading.Timer(0.0495,self.update).start()

		self.error = -(self.set_point - self.current_value)
		self.P_value = self.Kp * self.error
		self.D_value = self.Kd * (self.current_value - self.Derivator)
		self.Derivator = self.current_value
		self.Integrator = self.Integrator + self.error

		if self.Integrator > self.Integrator_max:
			self.Integrator = self.Integrator_max
		elif self.Integrator < self.Integrator_min:
			self.Integrator = self.Integrator_min

		self.I_value = self.Integrator * self.Ki

		if self.D_value > 50:
			self.D_value = 50
		elif self.D_value < -50:
			self.D_value = -50

		self.gantry_cmd_vel.linear.x = self.P_value + self.I_value + self.D_value

		if (self.gantry_cmd_vel.linear.x > 0.25):
			self.gantry_cmd_vel.linear.x = 0.25
		elif (self.gantry_cmd_vel.linear.x < -0.25):
			self.gantry_cmd_vel.linear.x = -0.25

		#self.gantry_cmd_vel_pub.publish(self.gantry_cmd_vel)

if __name__ == '__main__':

	print 'process started at ' + str(datetime.now())
	var = PID()
	var.reg_main()
