/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-01-31 01:56:05.801938
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
x0=IKcos(j[1]);
x1=IKsin(j[2]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKsin(j[1]);
x5=IKcos(j[5]);
x6=IKsin(j[5]);
x7=IKcos(j[4]);
x8=IKsin(j[4]);
x9=IKcos(j[2]);
x10=IKsin(j[6]);
x11=IKcos(j[6]);
x12=IKcos(j[0]);
x13=IKsin(j[0]);
x14=((IkReal(0.707106781186548))*(x13));
x15=((IkReal(0.707106781186548))*(x12));
x16=((IkReal(0.156816485077303))*(x13));
x17=((IkReal(0.156816485077303))*(x12));
x18=((IkReal(0.224842278747792))*(x12));
x19=((IkReal(0.224842278747792))*(x13));
x20=((IkReal(0.0767725000000000))*(x2));
x21=((IkReal(0.0767725000000000))*(x7));
x22=((IkReal(1.00000000000000))*(x1));
x23=((IkReal(0.221772000000000))*(x4));
x24=((IkReal(1.00000000000000))*(x2));
x25=((IkReal(1.00000000000000))*(x9));
x26=((IkReal(0.0767725000000000))*(x8));
x27=((x0)*(x3));
x28=((x0)*(x9));
x29=((IkReal(-1.00000000000000))*(x7));
x30=((IkReal(-1.00000000000000))*(x3));
x31=((x4)*(x9));
x32=((IkReal(-1.00000000000000))*(x1));
x33=((IkReal(-1.00000000000000))*(x8));
x34=((x0)*(x2));
x35=((x3)*(x4));
x36=((((IkReal(-1.00000000000000))*(x14)))+(x15));
x37=((((IkReal(-1.00000000000000))*(x15)))+(x14));
x38=((((IkReal(-1.00000000000000))*(x15)))+(((IkReal(-1.00000000000000))*(x14))));
x39=((x15)+(x14));
x40=((x0)*(x25)*(x8));
x41=((x37)*(x9));
x42=((x1)*(x38));
x43=((x38)*(x4));
x44=((((IkReal(-1.00000000000000))*(x35)))+(((x1)*(x34))));
x45=((((IkReal(-1.00000000000000))*(x24)*(x4)))+(((IkReal(-1.00000000000000))*(x22)*(x27))));
x46=((x45)*(x7));
x47=((x42)+(((x31)*(x37))));
x48=((((x1)*(x37)))+(((x31)*(x39))));
x49=((((IkReal(-1.00000000000000))*(x22)*(x36)*(x4)))+(((IkReal(-1.00000000000000))*(x25)*(x38))));
x50=((((IkReal(-1.00000000000000))*(x25)*(x37)))+(((IkReal(-1.00000000000000))*(x22)*(x43))));
x51=((((IkReal(-1.00000000000000))*(x31)*(x37)))+(((x32)*(x38))));
x52=((((IkReal(-1.00000000000000))*(x31)*(x39)))+(((x32)*(x37))));
x53=((x2)*(x49));
x54=((x2)*(x50));
x55=((x52)*(x8));
x56=((((x27)*(x37)))+(x53));
x57=((((x30)*(x49)))+(((IkReal(-1.00000000000000))*(x34)*(x36))));
x58=((((IkReal(-1.00000000000000))*(x34)*(x38)))+(((x30)*(x50))));
x59=((((x44)*(x5)))+(((x6)*(((((IkReal(-1.00000000000000))*(x46)))+(x40))))));
x60=((x57)*(x8));
x61=((x58)*(x8));
x62=((((x33)*(x52)))+(((x29)*(x58))));
x63=((((x5)*(x56)))+(((x6)*(((((x33)*(x51)))+(((x29)*(x57))))))));
x64=((((IkReal(-1.00000000000000))*(x6)*(x62)))+(((x5)*(((((IkReal(-1.00000000000000))*(x27)*(x39)))+(((IkReal(-1.00000000000000))*(x54))))))));
eerot[0]=((((x5)*(((((IkReal(-1.00000000000000))*(x40)))+(x46)))))+(((x44)*(x6))));
eerot[1]=((((x11)*(x59)))+(((x10)*(((((x28)*(x29)))+(((x33)*(x45))))))));
eerot[2]=((((x10)*(x59)))+(((x11)*(((((x28)*(x7)))+(((x45)*(x8))))))));
eetrans[0]=((IkReal(0.249520000000000))+(((IkReal(-0.221772000000000))*(x1)*(x34)))+(((x5)*(((((IkReal(-1.00000000000000))*(x0)*(x1)*(x20)))+(((IkReal(0.0767725000000000))*(x35)))))))+(((x23)*(x3)))+(((x6)*(((((x21)*(x45)))+(((IkReal(-1.00000000000000))*(x26)*(x28)))))))+(((IkReal(0.317975000000000))*(x4))));
eerot[3]=((((x56)*(x6)))+(((x5)*(((((x51)*(x8)))+(((x57)*(x7))))))));
eerot[4]=((((x11)*(x63)))+(((x10)*(((((x29)*(x47)))+(((x33)*(x57))))))));
eerot[5]=((((x11)*(((((x47)*(x7)))+(x60)))))+(((x10)*(x63))));
eetrans[1]=((IkReal(0.363782000000000))+(((x27)*(((((IkReal(-1.00000000000000))*(x16)))+(x17)))))+(((x0)*(((((IkReal(-1.00000000000000))*(x19)))+(x18)))))+(((x2)*(((((IkReal(0.221772000000000))*(x38)*(x9)))+(((x1)*(x23)*(x36)))))))+(((x6)*(((((x26)*(x51)))+(((x21)*(x57)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x20)*(x49)))+(((IkReal(-0.0767725000000000))*(x27)*(x37))))))));
eerot[6]=((((x5)*(x62)))+(((x6)*(((((IkReal(-1.00000000000000))*(x27)*(x39)))+(((IkReal(-1.00000000000000))*(x24)*(x50))))))));
eerot[7]=((((x11)*(x64)))+(((x10)*(((x61)+(((x48)*(x7))))))));
eerot[8]=((((x11)*(((((x29)*(x48)))+(((x33)*(x58)))))))+(((x10)*(x64))));
eetrans[2]=((((x6)*(((((IkReal(-0.0767725000000000))*(x58)*(x7)))+(((IkReal(-0.0767725000000000))*(x55)))))))+(((x27)*(((x17)+(x16)))))+(((x0)*(((x19)+(x18)))))+(((x2)*(((((IkReal(-0.221772000000000))*(x41)))+(((IkReal(-0.221772000000000))*(x4)*(x42)))))))+(((x5)*(((((x20)*(x50)))+(((IkReal(0.0767725000000000))*(x27)*(x39))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j7,cj7,sj7,htj7,j8,cj8,sj8,htj8,j9,cj9,sj9,htj9,j6,cj6,sj6,htj6,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij6[2], _nj6;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1;  _ij6[0] = -1; _ij6[1] = -1; _nj6 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j6=pfree[0]; cj6=cos(pfree[0]); sj6=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((IkReal(-1.00000000000000))*(r22));
new_r01=((IkReal(-1.00000000000000))*(r21));
new_r02=r20;
new_px=((IkReal(-1.00000000000000))*(pz));
new_r10=r12;
new_r11=r11;
new_r12=((IkReal(-1.00000000000000))*(r10));
new_py=((IkReal(-0.363782000000000))+(py));
new_r20=r02;
new_r21=r01;
new_r22=((IkReal(-1.00000000000000))*(r00));
new_pz=((IkReal(-0.249520000000000))+(px));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal dummyeval[1];
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
if( IKabs(((IkReal(-0.153545000000000))*(npy))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.153545000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x65=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-0.153545000000000))*(npy)), ((IkReal(-0.153545000000000))*(npx)))));
if( (((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(0.144396903852750))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(0.144396903852750))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x66=IKasin(((((IKabs(IKabs(IKsqrt(((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(0.144396903852750))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6)))))));
j9array[0]=((((IkReal(-1.00000000000000))*(x65)))+(((IkReal(-1.00000000000000))*(x66))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((IkReal(3.14159265358979))+(x66)+(((IkReal(-1.00000000000000))*(x65))));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IkReal dummyeval[1];
IkReal x67=((npx)*(sj9));
IkReal x68=((cj9)*(npy));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(169.663582808719))*((npz)*(npz))))+(((IkReal(26.0509948223648))*(x68)))+(((IkReal(26.0509948223648))*(x67)))+(((IkReal(169.663582808719))*((x67)*(x67))))+(((IkReal(169.663582808719))*((x68)*(x68))))+(((IkReal(339.327165617438))*(x67)*(x68))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x69=((npx)*(sj9));
IkReal x70=((cj9)*(npy));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(169.663582808719))*((x70)*(x70))))+(((IkReal(169.663582808719))*((npz)*(npz))))+(((IkReal(169.663582808719))*((x69)*(x69))))+(((IkReal(26.0509948223648))*(x69)))+(((IkReal(26.0509948223648))*(x70)))+(((IkReal(339.327165617438))*(x69)*(x70))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
sj7array[0]=((IkReal(-3.14490132872081))*(((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((cj9)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj9))))));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x71=((cj9)*(npy));
IkReal x72=((npx)*(sj9));
IkReal x73=((IkReal(12719.0000000000))*(cj6));
gconst0=IKsign(((IkReal(681.039634800000))+(((IkReal(12719.0000000000))*(cj7)*(npz)*(sj6)))+(((IkReal(976.469427500000))*(cj6)))+(((x72)*(x73)))+(((IkReal(8870.88000000000))*(x72)))+(((IkReal(8870.88000000000))*(x71)))+(((x71)*(x73)))));
IkReal x74=((cj9)*(npy));
IkReal x75=((npx)*(sj9));
IkReal x76=((IkReal(18.6758587167033))*(cj6));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(13.0254974111824))*(x74)))+(((IkReal(13.0254974111824))*(x75)))+(((x75)*(x76)))+(((IkReal(1.43379236332810))*(cj6)))+(((IkReal(18.6758587167033))*(cj7)*(npz)*(sj6)))+(((x74)*(x76))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x77=((IkReal(13.0254974111824))*(cj7)*(sj6));
dummyeval[0]=((((npx)*(sj9)*(x77)))+(((IkReal(-9.08464694354192))*(npz)))+(((IkReal(-13.0254974111824))*(cj6)*(npz)))+(((cj9)*(npy)*(x77)))+(((cj7)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x78=((npx)*(sj9));
IkReal x79=((IkReal(40000.0000000000))*(npz));
IkReal x80=((cj7)*(sj6));
IkReal x81=((cj9)*(npy));
IkReal x82=((cj6)*(npz));
if( IKabs(((((IKabs(((((IkReal(508760000.000000))*(x78)*(x80)))+(((IkReal(508760000.000000))*(x80)*(x81)))+(((IkReal(-508760000.000000))*(x82)))+(((IkReal(-354835200.000000))*(npz)))+(((IkReal(39058777.1000000))*(x80))))) != 0)?((IkReal)1/(((((IkReal(508760000.000000))*(x78)*(x80)))+(((IkReal(508760000.000000))*(x80)*(x81)))+(((IkReal(-508760000.000000))*(x82)))+(((IkReal(-354835200.000000))*(npz)))+(((IkReal(39058777.1000000))*(x80)))))):(IkReal)1.0e30))*(((((IkReal(161772961.000000))*((x80)*(x80))))+(((IkReal(-1600000000.00000))*((npz)*(npz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(12719.0000000000))*(x80)*(x81)))+(((IkReal(-12719.0000000000))*(x82)))+(((IkReal(12719.0000000000))*(x78)*(x80)))+(((IkReal(-8870.88000000000))*(npz)))+(((IkReal(976.469427500000))*(x80))))) != 0)?((IkReal)1/(((((IkReal(12719.0000000000))*(x80)*(x81)))+(((IkReal(-12719.0000000000))*(x82)))+(((IkReal(12719.0000000000))*(x78)*(x80)))+(((IkReal(-8870.88000000000))*(npz)))+(((IkReal(976.469427500000))*(x80)))))):(IkReal)1.0e30))*(((((x79)*(x81)))+(((x78)*(x79)))+(((IkReal(3070.90000000000))*(npz)))+(((IkReal(-4044.32402500000))*(cj6)*(x80)))+(((IkReal(-2820.71806800000))*(x80))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(508760000.000000))*(x78)*(x80)))+(((IkReal(508760000.000000))*(x80)*(x81)))+(((IkReal(-508760000.000000))*(x82)))+(((IkReal(-354835200.000000))*(npz)))+(((IkReal(39058777.1000000))*(x80))))) != 0)?((IkReal)1/(((((IkReal(508760000.000000))*(x78)*(x80)))+(((IkReal(508760000.000000))*(x80)*(x81)))+(((IkReal(-508760000.000000))*(x82)))+(((IkReal(-354835200.000000))*(npz)))+(((IkReal(39058777.1000000))*(x80)))))):(IkReal)1.0e30))*(((((IkReal(161772961.000000))*((x80)*(x80))))+(((IkReal(-1600000000.00000))*((npz)*(npz))))))))+IKsqr(((((IKabs(((((IkReal(12719.0000000000))*(x80)*(x81)))+(((IkReal(-12719.0000000000))*(x82)))+(((IkReal(12719.0000000000))*(x78)*(x80)))+(((IkReal(-8870.88000000000))*(npz)))+(((IkReal(976.469427500000))*(x80))))) != 0)?((IkReal)1/(((((IkReal(12719.0000000000))*(x80)*(x81)))+(((IkReal(-12719.0000000000))*(x82)))+(((IkReal(12719.0000000000))*(x78)*(x80)))+(((IkReal(-8870.88000000000))*(npz)))+(((IkReal(976.469427500000))*(x80)))))):(IkReal)1.0e30))*(((((x79)*(x81)))+(((x78)*(x79)))+(((IkReal(3070.90000000000))*(npz)))+(((IkReal(-4044.32402500000))*(cj6)*(x80)))+(((IkReal(-2820.71806800000))*(x80)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((IKabs(((((IkReal(508760000.000000))*(x78)*(x80)))+(((IkReal(508760000.000000))*(x80)*(x81)))+(((IkReal(-508760000.000000))*(x82)))+(((IkReal(-354835200.000000))*(npz)))+(((IkReal(39058777.1000000))*(x80))))) != 0)?((IkReal)1/(((((IkReal(508760000.000000))*(x78)*(x80)))+(((IkReal(508760000.000000))*(x80)*(x81)))+(((IkReal(-508760000.000000))*(x82)))+(((IkReal(-354835200.000000))*(npz)))+(((IkReal(39058777.1000000))*(x80)))))):(IkReal)1.0e30))*(((((IkReal(161772961.000000))*((x80)*(x80))))+(((IkReal(-1600000000.00000))*((npz)*(npz))))))), ((((IKabs(((((IkReal(12719.0000000000))*(x80)*(x81)))+(((IkReal(-12719.0000000000))*(x82)))+(((IkReal(12719.0000000000))*(x78)*(x80)))+(((IkReal(-8870.88000000000))*(npz)))+(((IkReal(976.469427500000))*(x80))))) != 0)?((IkReal)1/(((((IkReal(12719.0000000000))*(x80)*(x81)))+(((IkReal(-12719.0000000000))*(x82)))+(((IkReal(12719.0000000000))*(x78)*(x80)))+(((IkReal(-8870.88000000000))*(npz)))+(((IkReal(976.469427500000))*(x80)))))):(IkReal)1.0e30))*(((((x79)*(x81)))+(((x78)*(x79)))+(((IkReal(3070.90000000000))*(npz)))+(((IkReal(-4044.32402500000))*(cj6)*(x80)))+(((IkReal(-2820.71806800000))*(x80)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x83=IKsin(j8);
IkReal x84=IKcos(j8);
IkReal x85=((IkReal(0.317975000000000))*(cj6));
IkReal x86=((cj9)*(npy));
IkReal x87=((npx)*(sj9));
IkReal x88=((IkReal(1.00000000000000))*(npz));
IkReal x89=((IkReal(0.317975000000000))*(cj7)*(sj6));
evalcond[0]=((((x84)*(x89)))+(((IkReal(0.221772000000000))*(x83)))+(((x83)*(x85)))+(((IkReal(-1.00000000000000))*(x88))));
evalcond[1]=((IkReal(0.221772000000000))+(((x84)*(x86)))+(((x84)*(x87)))+(((IkReal(-1.00000000000000))*(x83)*(x88)))+(x85)+(((IkReal(0.0767725000000000))*(x84))));
evalcond[2]=((((npz)*(x84)))+(((x83)*(x87)))+(((x83)*(x86)))+(((IkReal(-1.00000000000000))*(x89)))+(((IkReal(0.0767725000000000))*(x83))));
evalcond[3]=((IkReal(0.0767725000000000))+(((x84)*(x85)))+(((IkReal(-1.00000000000000))*(x83)*(x89)))+(((IkReal(0.221772000000000))*(x84)))+(x86)+(x87));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x358=((IkReal(40000.0000000000))*(npz));
IkReal x359=((cj7)*(sj6));
if( IKabs(((gconst0)*(((((IkReal(2820.71806800000))*(x359)))+(((IkReal(4044.32402500000))*(cj6)*(x359)))+(((npx)*(sj9)*(x358)))+(((cj9)*(npy)*(x358)))+(((IkReal(3070.90000000000))*(npz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((IkReal(-1967.31279936000))+(((IkReal(-4044.32402500000))*((cj6)*(cj6))))+(((npz)*(x358)))+(((IkReal(-5641.43613600000))*(cj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst0)*(((((IkReal(2820.71806800000))*(x359)))+(((IkReal(4044.32402500000))*(cj6)*(x359)))+(((npx)*(sj9)*(x358)))+(((cj9)*(npy)*(x358)))+(((IkReal(3070.90000000000))*(npz)))))), ((gconst0)*(((IkReal(-1967.31279936000))+(((IkReal(-4044.32402500000))*((cj6)*(cj6))))+(((npz)*(x358)))+(((IkReal(-5641.43613600000))*(cj6)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x360=IKsin(j8);
IkReal x361=IKcos(j8);
IkReal x362=((IkReal(0.317975000000000))*(cj6));
IkReal x363=((cj9)*(npy));
IkReal x364=((npx)*(sj9));
IkReal x365=((IkReal(1.00000000000000))*(npz));
IkReal x366=((IkReal(0.317975000000000))*(cj7)*(sj6));
evalcond[0]=((((x361)*(x366)))+(((IkReal(-1.00000000000000))*(x365)))+(((IkReal(0.221772000000000))*(x360)))+(((x360)*(x362))));
evalcond[1]=((IkReal(0.221772000000000))+(((x361)*(x363)))+(((x361)*(x364)))+(((IkReal(-1.00000000000000))*(x360)*(x365)))+(x362)+(((IkReal(0.0767725000000000))*(x361))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x366)))+(((npz)*(x361)))+(((x360)*(x364)))+(((x360)*(x363)))+(((IkReal(0.0767725000000000))*(x360))));
evalcond[3]=((IkReal(0.0767725000000000))+(((x361)*(x362)))+(((IkReal(-1.00000000000000))*(x360)*(x366)))+(x363)+(x364)+(((IkReal(0.221772000000000))*(x361))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x367=((IkReal(0.0767725000000000))+(((npx)*(sj9)))+(((cj9)*(npy))));
if( IKabs(x367) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x368=((IkReal(1.00000000000000))*(IKatan2(x367, ((IkReal(-1.00000000000000))*(npz)))));
if( ((((x367)*(x367))+((npz)*(npz)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((x367)*(x367))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x367)*(x367))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(0.221772000000000))+(((IkReal(0.317975000000000))*(cj6))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((x367)*(x367))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x367)*(x367))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(0.221772000000000))+(((IkReal(0.317975000000000))*(cj6))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x369=IKasin(((((IKabs(IKabs(IKsqrt((((x367)*(x367))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x367)*(x367))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(0.221772000000000))+(((IkReal(0.317975000000000))*(cj6)))))));
j8array[0]=((((IkReal(-1.00000000000000))*(x369)))+(((IkReal(-1.00000000000000))*(x368))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x368)))+(x369));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(sj6);
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj6;
dummyeval[1]=cj8;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x370=((IkReal(0.221772000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.317975000000000))*(cj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.144396903852750))+(((IkReal(-0.153545000000000))*(npx)*(sj9)))+(((IkReal(-0.153545000000000))*(cj9)*(npy)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6))));
evalcond[2]=x370;
evalcond[3]=x370;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(sj6);
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x371=((IkReal(40000.0000000000))*(cj9));
IkReal x372=((IkReal(40000.0000000000))*(sj9));
if( IKabs(((gconst2)*(((((npy)*(x372)))+(((IkReal(-1.00000000000000))*(npx)*(x371))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((IkReal(3070.90000000000))+(((npy)*(x371)))+(((npx)*(x372))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst2)*(((((npy)*(x372)))+(((IkReal(-1.00000000000000))*(npx)*(x371)))))), ((gconst2)*(((IkReal(3070.90000000000))+(((npy)*(x371)))+(((npx)*(x372)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x373=((IkReal(0.317975000000000))*(sj6));
evalcond[0]=((((cj9)*(npx)))+(((x373)*(IKsin(j7))))+(((IkReal(-1.00000000000000))*(npy)*(sj9))));
evalcond[1]=((IkReal(0.0767725000000000))+(((npx)*(sj9)))+(((IkReal(-1.00000000000000))*(x373)*(IKcos(j7))))+(((cj9)*(npy))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x374=((IkReal(0.317975000000000))*(cj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.144396903852750))+(((IkReal(-0.153545000000000))*(npx)*(sj9)))+(((IkReal(-0.153545000000000))*(cj9)*(npy)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6))));
evalcond[2]=((IkReal(-0.221772000000000))+(((IkReal(-1.00000000000000))*(x374)))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[3]=((IkReal(0.221772000000000))+(npz)+(x374));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(sj6);
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x375=((IkReal(40000.0000000000))*(cj9));
IkReal x376=((IkReal(40000.0000000000))*(sj9));
if( IKabs(((gconst3)*(((((npy)*(x376)))+(((IkReal(-1.00000000000000))*(npx)*(x375))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(-3070.90000000000))+(((IkReal(-1.00000000000000))*(npx)*(x376)))+(((IkReal(-1.00000000000000))*(npy)*(x375))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst3)*(((((npy)*(x376)))+(((IkReal(-1.00000000000000))*(npx)*(x375)))))), ((gconst3)*(((IkReal(-3070.90000000000))+(((IkReal(-1.00000000000000))*(npx)*(x376)))+(((IkReal(-1.00000000000000))*(npy)*(x375)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x377=((IkReal(1.00000000000000))*(npy));
IkReal x378=((IkReal(0.317975000000000))*(sj6));
evalcond[0]=((((cj9)*(npx)))+(((x378)*(IKsin(j7))))+(((IkReal(-1.00000000000000))*(sj9)*(x377))));
evalcond[1]=((IkReal(-0.0767725000000000))+(((IkReal(-1.00000000000000))*(cj9)*(x377)))+(((IkReal(-1.00000000000000))*(npx)*(sj9)))+(((IkReal(-1.00000000000000))*(x378)*(IKcos(j7)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x379=((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30);
IkReal x380=((IkReal(7.86225332180203e-5))*(x379));
if( IKabs(((x380)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x380)*(((IKabs(cj8) != 0)?((IkReal)1/(cj8)):(IkReal)1.0e30))*(((((IkReal(40000.0000000000))*(npz)))+(((IkReal(-8870.88000000000))*(sj8)))+(((IkReal(-12719.0000000000))*(cj6)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x380)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9)))))))+IKsqr(((x380)*(((IKabs(cj8) != 0)?((IkReal)1/(cj8)):(IkReal)1.0e30))*(((((IkReal(40000.0000000000))*(npz)))+(((IkReal(-8870.88000000000))*(sj8)))+(((IkReal(-12719.0000000000))*(cj6)*(sj8)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x380)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9)))))), ((x380)*(((IKabs(cj8) != 0)?((IkReal)1/(cj8)):(IkReal)1.0e30))*(((((IkReal(40000.0000000000))*(npz)))+(((IkReal(-8870.88000000000))*(sj8)))+(((IkReal(-12719.0000000000))*(cj6)*(sj8)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x381=IKcos(j7);
IkReal x382=((IkReal(0.317975000000000))*(cj8));
IkReal x383=((cj9)*(npy));
IkReal x384=((npx)*(sj9));
IkReal x385=((IkReal(0.317975000000000))*(sj8));
IkReal x386=((sj6)*(x381));
evalcond[0]=((((cj9)*(npx)))+(((IkReal(0.317975000000000))*(sj6)*(IKsin(j7))))+(((IkReal(-1.00000000000000))*(npy)*(sj9))));
evalcond[1]=((((cj6)*(x385)))+(((IkReal(0.221772000000000))*(sj8)))+(((IkReal(-1.00000000000000))*(npz)))+(((x382)*(x386))));
evalcond[2]=((((IkReal(-0.317975000000000))*(x386)))+(((IkReal(0.0767725000000000))*(sj8)))+(((cj8)*(npz)))+(((sj8)*(x383)))+(((sj8)*(x384))));
evalcond[3]=((IkReal(0.0767725000000000))+(((cj6)*(x382)))+(((IkReal(0.221772000000000))*(cj8)))+(x384)+(x383)+(((IkReal(-1.00000000000000))*(x385)*(x386))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x387=((IkReal(40000.0000000000))*(sj8));
if( IKabs(((gconst1)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(3070.90000000000))*(sj8)))+(((npx)*(sj9)*(x387)))+(((cj9)*(npy)*(x387)))+(((IkReal(40000.0000000000))*(cj8)*(npz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst1)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9)))))), ((gconst1)*(((((IkReal(3070.90000000000))*(sj8)))+(((npx)*(sj9)*(x387)))+(((cj9)*(npy)*(x387)))+(((IkReal(40000.0000000000))*(cj8)*(npz)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x388=IKcos(j7);
IkReal x389=((IkReal(0.317975000000000))*(cj8));
IkReal x390=((cj9)*(npy));
IkReal x391=((npx)*(sj9));
IkReal x392=((IkReal(0.317975000000000))*(sj8));
IkReal x393=((sj6)*(x388));
evalcond[0]=((((cj9)*(npx)))+(((IkReal(0.317975000000000))*(sj6)*(IKsin(j7))))+(((IkReal(-1.00000000000000))*(npy)*(sj9))));
evalcond[1]=((((IkReal(0.221772000000000))*(sj8)))+(((IkReal(-1.00000000000000))*(npz)))+(((cj6)*(x392)))+(((x389)*(x393))));
evalcond[2]=((((IkReal(0.0767725000000000))*(sj8)))+(((sj8)*(x390)))+(((sj8)*(x391)))+(((cj8)*(npz)))+(((IkReal(-0.317975000000000))*(x393))));
evalcond[3]=((IkReal(0.0767725000000000))+(((cj6)*(x389)))+(((IkReal(0.221772000000000))*(cj8)))+(x391)+(x390)+(((IkReal(-1.00000000000000))*(x392)*(x393))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x394=((IkReal(0.0767725000000000))+(((npx)*(sj9)))+(((cj9)*(npy))));
if( IKabs(x394) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x395=((IkReal(1.00000000000000))*(IKatan2(x394, ((IkReal(-1.00000000000000))*(npz)))));
if( ((((x394)*(x394))+((npz)*(npz)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((x394)*(x394))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x394)*(x394))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(0.221772000000000))+(((IkReal(0.317975000000000))*(cj6))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((x394)*(x394))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x394)*(x394))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(0.221772000000000))+(((IkReal(0.317975000000000))*(cj6))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x396=IKasin(((((IKabs(IKabs(IKsqrt((((x394)*(x394))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x394)*(x394))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(0.221772000000000))+(((IkReal(0.317975000000000))*(cj6)))))));
j8array[0]=((((IkReal(-1.00000000000000))*(x395)))+(((IkReal(-1.00000000000000))*(x396))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x395)))+(x396));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(sj6);
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj6;
dummyeval[1]=cj8;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x397=((IkReal(0.221772000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.317975000000000))*(cj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.144396903852750))+(((IkReal(-0.153545000000000))*(npx)*(sj9)))+(((IkReal(-0.153545000000000))*(cj9)*(npy)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6))));
evalcond[2]=x397;
evalcond[3]=x397;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(sj6);
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x398=((IkReal(40000.0000000000))*(cj9));
IkReal x399=((IkReal(40000.0000000000))*(sj9));
if( IKabs(((gconst2)*(((((npy)*(x399)))+(((IkReal(-1.00000000000000))*(npx)*(x398))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((IkReal(3070.90000000000))+(((npy)*(x398)))+(((npx)*(x399))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst2)*(((((npy)*(x399)))+(((IkReal(-1.00000000000000))*(npx)*(x398)))))), ((gconst2)*(((IkReal(3070.90000000000))+(((npy)*(x398)))+(((npx)*(x399)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x400=((IkReal(0.317975000000000))*(sj6));
evalcond[0]=((((x400)*(IKsin(j7))))+(((cj9)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj9))));
evalcond[1]=((IkReal(0.0767725000000000))+(((npx)*(sj9)))+(((IkReal(-1.00000000000000))*(x400)*(IKcos(j7))))+(((cj9)*(npy))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x401=((IkReal(0.317975000000000))*(cj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.144396903852750))+(((IkReal(-0.153545000000000))*(npx)*(sj9)))+(((IkReal(-0.153545000000000))*(cj9)*(npy)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6))));
evalcond[2]=((IkReal(-0.221772000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x401))));
evalcond[3]=((IkReal(0.221772000000000))+(npz)+(x401));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(sj6);
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x402=((IkReal(40000.0000000000))*(cj9));
IkReal x403=((IkReal(40000.0000000000))*(sj9));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(npx)*(x402)))+(((npy)*(x403))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(-3070.90000000000))+(((IkReal(-1.00000000000000))*(npx)*(x403)))+(((IkReal(-1.00000000000000))*(npy)*(x402))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(npx)*(x402)))+(((npy)*(x403)))))), ((gconst3)*(((IkReal(-3070.90000000000))+(((IkReal(-1.00000000000000))*(npx)*(x403)))+(((IkReal(-1.00000000000000))*(npy)*(x402)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x404=((IkReal(1.00000000000000))*(npy));
IkReal x405=((IkReal(0.317975000000000))*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj9)*(x404)))+(((cj9)*(npx)))+(((x405)*(IKsin(j7)))));
evalcond[1]=((IkReal(-0.0767725000000000))+(((IkReal(-1.00000000000000))*(x405)*(IKcos(j7))))+(((IkReal(-1.00000000000000))*(cj9)*(x404)))+(((IkReal(-1.00000000000000))*(npx)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x406=((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30);
IkReal x407=((IkReal(7.86225332180203e-5))*(x406));
if( IKabs(((x407)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x407)*(((IKabs(cj8) != 0)?((IkReal)1/(cj8)):(IkReal)1.0e30))*(((((IkReal(40000.0000000000))*(npz)))+(((IkReal(-8870.88000000000))*(sj8)))+(((IkReal(-12719.0000000000))*(cj6)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x407)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9)))))))+IKsqr(((x407)*(((IKabs(cj8) != 0)?((IkReal)1/(cj8)):(IkReal)1.0e30))*(((((IkReal(40000.0000000000))*(npz)))+(((IkReal(-8870.88000000000))*(sj8)))+(((IkReal(-12719.0000000000))*(cj6)*(sj8)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x407)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9)))))), ((x407)*(((IKabs(cj8) != 0)?((IkReal)1/(cj8)):(IkReal)1.0e30))*(((((IkReal(40000.0000000000))*(npz)))+(((IkReal(-8870.88000000000))*(sj8)))+(((IkReal(-12719.0000000000))*(cj6)*(sj8)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x408=IKcos(j7);
IkReal x409=((IkReal(0.317975000000000))*(cj8));
IkReal x410=((cj9)*(npy));
IkReal x411=((npx)*(sj9));
IkReal x412=((IkReal(0.317975000000000))*(sj8));
IkReal x413=((sj6)*(x408));
evalcond[0]=((((cj9)*(npx)))+(((IkReal(0.317975000000000))*(sj6)*(IKsin(j7))))+(((IkReal(-1.00000000000000))*(npy)*(sj9))));
evalcond[1]=((((cj6)*(x412)))+(((IkReal(0.221772000000000))*(sj8)))+(((IkReal(-1.00000000000000))*(npz)))+(((x409)*(x413))));
evalcond[2]=((((IkReal(0.0767725000000000))*(sj8)))+(((sj8)*(x410)))+(((sj8)*(x411)))+(((IkReal(-0.317975000000000))*(x413)))+(((cj8)*(npz))));
evalcond[3]=((IkReal(0.0767725000000000))+(((IkReal(-1.00000000000000))*(x412)*(x413)))+(((IkReal(0.221772000000000))*(cj8)))+(x410)+(x411)+(((cj6)*(x409))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x414=((IkReal(40000.0000000000))*(sj8));
if( IKabs(((gconst1)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((cj9)*(npy)*(x414)))+(((IkReal(3070.90000000000))*(sj8)))+(((npx)*(sj9)*(x414)))+(((IkReal(40000.0000000000))*(cj8)*(npz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst1)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9)))))), ((gconst1)*(((((cj9)*(npy)*(x414)))+(((IkReal(3070.90000000000))*(sj8)))+(((npx)*(sj9)*(x414)))+(((IkReal(40000.0000000000))*(cj8)*(npz)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x415=IKcos(j7);
IkReal x416=((IkReal(0.317975000000000))*(cj8));
IkReal x417=((cj9)*(npy));
IkReal x418=((npx)*(sj9));
IkReal x419=((IkReal(0.317975000000000))*(sj8));
IkReal x420=((sj6)*(x415));
evalcond[0]=((((cj9)*(npx)))+(((IkReal(0.317975000000000))*(sj6)*(IKsin(j7))))+(((IkReal(-1.00000000000000))*(npy)*(sj9))));
evalcond[1]=((((cj6)*(x419)))+(((IkReal(0.221772000000000))*(sj8)))+(((IkReal(-1.00000000000000))*(npz)))+(((x416)*(x420))));
evalcond[2]=((((IkReal(0.0767725000000000))*(sj8)))+(((sj8)*(x418)))+(((sj8)*(x417)))+(((cj8)*(npz)))+(((IkReal(-0.317975000000000))*(x420))));
evalcond[3]=((IkReal(0.0767725000000000))+(((cj6)*(x416)))+(((IkReal(0.221772000000000))*(cj8)))+(x417)+(x418)+(((IkReal(-1.00000000000000))*(x419)*(x420))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
if( IKabs(((IkReal(-0.153545000000000))*(npy))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.153545000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x421=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-0.153545000000000))*(npy)), ((IkReal(-0.153545000000000))*(npx)))));
if( (((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(0.144396903852750))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(0.144396903852750))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x422=IKasin(((((IKabs(IKabs(IKsqrt(((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.0235760670250000))*((npy)*(npy))))+(((IkReal(0.0235760670250000))*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(0.144396903852750))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6)))))));
j9array[0]=((((IkReal(-1.00000000000000))*(x422)))+(((IkReal(-1.00000000000000))*(x421))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x421)))+(x422));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IkReal dummyeval[1];
IkReal x423=((npx)*(sj9));
IkReal x424=((cj9)*(npy));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(169.663582808719))*((npz)*(npz))))+(((IkReal(169.663582808719))*((x423)*(x423))))+(((IkReal(169.663582808719))*((x424)*(x424))))+(((IkReal(26.0509948223648))*(x424)))+(((IkReal(26.0509948223648))*(x423)))+(((IkReal(339.327165617438))*(x423)*(x424))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x425=((npx)*(sj9));
IkReal x426=((cj9)*(npy));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(169.663582808719))*((npz)*(npz))))+(((IkReal(169.663582808719))*((x426)*(x426))))+(((IkReal(169.663582808719))*((x425)*(x425))))+(((IkReal(339.327165617438))*(x425)*(x426)))+(((IkReal(26.0509948223648))*(x425)))+(((IkReal(26.0509948223648))*(x426))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
sj7array[0]=((IkReal(-3.14490132872081))*(((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((cj9)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj9))))));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x427=((cj9)*(npy));
IkReal x428=((npx)*(sj9));
IkReal x429=((IkReal(12719.0000000000))*(cj6));
gconst0=IKsign(((IkReal(681.039634800000))+(((x427)*(x429)))+(((IkReal(12719.0000000000))*(cj7)*(npz)*(sj6)))+(((x428)*(x429)))+(((IkReal(976.469427500000))*(cj6)))+(((IkReal(8870.88000000000))*(x428)))+(((IkReal(8870.88000000000))*(x427)))));
IkReal x430=((cj9)*(npy));
IkReal x431=((npx)*(sj9));
IkReal x432=((IkReal(18.6758587167033))*(cj6));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(13.0254974111824))*(x431)))+(((IkReal(13.0254974111824))*(x430)))+(((IkReal(1.43379236332810))*(cj6)))+(((x430)*(x432)))+(((x431)*(x432)))+(((IkReal(18.6758587167033))*(cj7)*(npz)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x433=((IkReal(13.0254974111824))*(cj7)*(sj6));
dummyeval[0]=((((IkReal(-9.08464694354192))*(npz)))+(((IkReal(-13.0254974111824))*(cj6)*(npz)))+(((cj9)*(npy)*(x433)))+(((cj7)*(sj6)))+(((npx)*(sj9)*(x433))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x434=((npx)*(sj9));
IkReal x435=((IkReal(40000.0000000000))*(npz));
IkReal x436=((cj7)*(sj6));
IkReal x437=((cj9)*(npy));
IkReal x438=((cj6)*(npz));
if( IKabs(((((IKabs(((((IkReal(-354835200.000000))*(npz)))+(((IkReal(39058777.1000000))*(x436)))+(((IkReal(508760000.000000))*(x436)*(x437)))+(((IkReal(508760000.000000))*(x434)*(x436)))+(((IkReal(-508760000.000000))*(x438))))) != 0)?((IkReal)1/(((((IkReal(-354835200.000000))*(npz)))+(((IkReal(39058777.1000000))*(x436)))+(((IkReal(508760000.000000))*(x436)*(x437)))+(((IkReal(508760000.000000))*(x434)*(x436)))+(((IkReal(-508760000.000000))*(x438)))))):(IkReal)1.0e30))*(((((IkReal(161772961.000000))*((x436)*(x436))))+(((IkReal(-1600000000.00000))*((npz)*(npz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(12719.0000000000))*(x434)*(x436)))+(((IkReal(-8870.88000000000))*(npz)))+(((IkReal(12719.0000000000))*(x436)*(x437)))+(((IkReal(-12719.0000000000))*(x438)))+(((IkReal(976.469427500000))*(x436))))) != 0)?((IkReal)1/(((((IkReal(12719.0000000000))*(x434)*(x436)))+(((IkReal(-8870.88000000000))*(npz)))+(((IkReal(12719.0000000000))*(x436)*(x437)))+(((IkReal(-12719.0000000000))*(x438)))+(((IkReal(976.469427500000))*(x436)))))):(IkReal)1.0e30))*(((((x434)*(x435)))+(((IkReal(-4044.32402500000))*(cj6)*(x436)))+(((IkReal(-2820.71806800000))*(x436)))+(((IkReal(3070.90000000000))*(npz)))+(((x435)*(x437))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-354835200.000000))*(npz)))+(((IkReal(39058777.1000000))*(x436)))+(((IkReal(508760000.000000))*(x436)*(x437)))+(((IkReal(508760000.000000))*(x434)*(x436)))+(((IkReal(-508760000.000000))*(x438))))) != 0)?((IkReal)1/(((((IkReal(-354835200.000000))*(npz)))+(((IkReal(39058777.1000000))*(x436)))+(((IkReal(508760000.000000))*(x436)*(x437)))+(((IkReal(508760000.000000))*(x434)*(x436)))+(((IkReal(-508760000.000000))*(x438)))))):(IkReal)1.0e30))*(((((IkReal(161772961.000000))*((x436)*(x436))))+(((IkReal(-1600000000.00000))*((npz)*(npz))))))))+IKsqr(((((IKabs(((((IkReal(12719.0000000000))*(x434)*(x436)))+(((IkReal(-8870.88000000000))*(npz)))+(((IkReal(12719.0000000000))*(x436)*(x437)))+(((IkReal(-12719.0000000000))*(x438)))+(((IkReal(976.469427500000))*(x436))))) != 0)?((IkReal)1/(((((IkReal(12719.0000000000))*(x434)*(x436)))+(((IkReal(-8870.88000000000))*(npz)))+(((IkReal(12719.0000000000))*(x436)*(x437)))+(((IkReal(-12719.0000000000))*(x438)))+(((IkReal(976.469427500000))*(x436)))))):(IkReal)1.0e30))*(((((x434)*(x435)))+(((IkReal(-4044.32402500000))*(cj6)*(x436)))+(((IkReal(-2820.71806800000))*(x436)))+(((IkReal(3070.90000000000))*(npz)))+(((x435)*(x437)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((IKabs(((((IkReal(-354835200.000000))*(npz)))+(((IkReal(39058777.1000000))*(x436)))+(((IkReal(508760000.000000))*(x436)*(x437)))+(((IkReal(508760000.000000))*(x434)*(x436)))+(((IkReal(-508760000.000000))*(x438))))) != 0)?((IkReal)1/(((((IkReal(-354835200.000000))*(npz)))+(((IkReal(39058777.1000000))*(x436)))+(((IkReal(508760000.000000))*(x436)*(x437)))+(((IkReal(508760000.000000))*(x434)*(x436)))+(((IkReal(-508760000.000000))*(x438)))))):(IkReal)1.0e30))*(((((IkReal(161772961.000000))*((x436)*(x436))))+(((IkReal(-1600000000.00000))*((npz)*(npz))))))), ((((IKabs(((((IkReal(12719.0000000000))*(x434)*(x436)))+(((IkReal(-8870.88000000000))*(npz)))+(((IkReal(12719.0000000000))*(x436)*(x437)))+(((IkReal(-12719.0000000000))*(x438)))+(((IkReal(976.469427500000))*(x436))))) != 0)?((IkReal)1/(((((IkReal(12719.0000000000))*(x434)*(x436)))+(((IkReal(-8870.88000000000))*(npz)))+(((IkReal(12719.0000000000))*(x436)*(x437)))+(((IkReal(-12719.0000000000))*(x438)))+(((IkReal(976.469427500000))*(x436)))))):(IkReal)1.0e30))*(((((x434)*(x435)))+(((IkReal(-4044.32402500000))*(cj6)*(x436)))+(((IkReal(-2820.71806800000))*(x436)))+(((IkReal(3070.90000000000))*(npz)))+(((x435)*(x437)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x439=IKsin(j8);
IkReal x440=IKcos(j8);
IkReal x441=((IkReal(0.317975000000000))*(cj6));
IkReal x442=((cj9)*(npy));
IkReal x443=((npx)*(sj9));
IkReal x444=((IkReal(1.00000000000000))*(npz));
IkReal x445=((IkReal(0.317975000000000))*(cj7)*(sj6));
evalcond[0]=((((x439)*(x441)))+(((IkReal(-1.00000000000000))*(x444)))+(((x440)*(x445)))+(((IkReal(0.221772000000000))*(x439))));
evalcond[1]=((IkReal(0.221772000000000))+(((IkReal(-1.00000000000000))*(x439)*(x444)))+(((x440)*(x442)))+(((x440)*(x443)))+(x441)+(((IkReal(0.0767725000000000))*(x440))));
evalcond[2]=((((x439)*(x442)))+(((x439)*(x443)))+(((IkReal(-1.00000000000000))*(x445)))+(((npz)*(x440)))+(((IkReal(0.0767725000000000))*(x439))));
evalcond[3]=((IkReal(0.0767725000000000))+(((IkReal(-1.00000000000000))*(x439)*(x445)))+(((x440)*(x441)))+(x443)+(x442)+(((IkReal(0.221772000000000))*(x440))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x446=((IkReal(40000.0000000000))*(npz));
IkReal x447=((cj7)*(sj6));
if( IKabs(((gconst0)*(((((IkReal(2820.71806800000))*(x447)))+(((IkReal(4044.32402500000))*(cj6)*(x447)))+(((cj9)*(npy)*(x446)))+(((npx)*(sj9)*(x446)))+(((IkReal(3070.90000000000))*(npz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((IkReal(-1967.31279936000))+(((IkReal(-4044.32402500000))*((cj6)*(cj6))))+(((npz)*(x446)))+(((IkReal(-5641.43613600000))*(cj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j8array[0]=IKatan2(((gconst0)*(((((IkReal(2820.71806800000))*(x447)))+(((IkReal(4044.32402500000))*(cj6)*(x447)))+(((cj9)*(npy)*(x446)))+(((npx)*(sj9)*(x446)))+(((IkReal(3070.90000000000))*(npz)))))), ((gconst0)*(((IkReal(-1967.31279936000))+(((IkReal(-4044.32402500000))*((cj6)*(cj6))))+(((npz)*(x446)))+(((IkReal(-5641.43613600000))*(cj6)))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x448=IKsin(j8);
IkReal x449=IKcos(j8);
IkReal x450=((IkReal(0.317975000000000))*(cj6));
IkReal x451=((cj9)*(npy));
IkReal x452=((npx)*(sj9));
IkReal x453=((IkReal(1.00000000000000))*(npz));
IkReal x454=((IkReal(0.317975000000000))*(cj7)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x453)))+(((x449)*(x454)))+(((x448)*(x450)))+(((IkReal(0.221772000000000))*(x448))));
evalcond[1]=((IkReal(0.221772000000000))+(x450)+(((x449)*(x452)))+(((x449)*(x451)))+(((IkReal(0.0767725000000000))*(x449)))+(((IkReal(-1.00000000000000))*(x448)*(x453))));
evalcond[2]=((((npz)*(x449)))+(((IkReal(-1.00000000000000))*(x454)))+(((x448)*(x452)))+(((x448)*(x451)))+(((IkReal(0.0767725000000000))*(x448))));
evalcond[3]=((IkReal(0.0767725000000000))+(x452)+(x451)+(((x449)*(x450)))+(((IkReal(0.221772000000000))*(x449)))+(((IkReal(-1.00000000000000))*(x448)*(x454))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x455=((IkReal(0.0767725000000000))+(((npx)*(sj9)))+(((cj9)*(npy))));
if( IKabs(x455) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x456=((IkReal(1.00000000000000))*(IKatan2(x455, ((IkReal(-1.00000000000000))*(npz)))));
if( ((((x455)*(x455))+((npz)*(npz)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((x455)*(x455))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x455)*(x455))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(0.221772000000000))+(((IkReal(0.317975000000000))*(cj6))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((x455)*(x455))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x455)*(x455))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(0.221772000000000))+(((IkReal(0.317975000000000))*(cj6))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x457=IKasin(((((IKabs(IKabs(IKsqrt((((x455)*(x455))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x455)*(x455))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(0.221772000000000))+(((IkReal(0.317975000000000))*(cj6)))))));
j8array[0]=((((IkReal(-1.00000000000000))*(x457)))+(((IkReal(-1.00000000000000))*(x456))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x456)))+(x457));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(sj6);
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj6;
dummyeval[1]=cj8;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x458=((IkReal(0.221772000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.317975000000000))*(cj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.144396903852750))+(((IkReal(-0.153545000000000))*(npx)*(sj9)))+(((IkReal(-0.153545000000000))*(cj9)*(npy)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6))));
evalcond[2]=x458;
evalcond[3]=x458;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(sj6);
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x459=((IkReal(40000.0000000000))*(cj9));
IkReal x460=((IkReal(40000.0000000000))*(sj9));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(npx)*(x459)))+(((npy)*(x460))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((IkReal(3070.90000000000))+(((npy)*(x459)))+(((npx)*(x460))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(npx)*(x459)))+(((npy)*(x460)))))), ((gconst2)*(((IkReal(3070.90000000000))+(((npy)*(x459)))+(((npx)*(x460)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x461=((IkReal(0.317975000000000))*(sj6));
evalcond[0]=((((x461)*(IKsin(j7))))+(((cj9)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj9))));
evalcond[1]=((IkReal(0.0767725000000000))+(((npx)*(sj9)))+(((cj9)*(npy)))+(((IkReal(-1.00000000000000))*(x461)*(IKcos(j7)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x462=((IkReal(0.317975000000000))*(cj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.144396903852750))+(((IkReal(-0.153545000000000))*(npx)*(sj9)))+(((IkReal(-0.153545000000000))*(cj9)*(npy)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6))));
evalcond[2]=((IkReal(-0.221772000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x462))));
evalcond[3]=((IkReal(0.221772000000000))+(npz)+(x462));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(sj6);
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x463=((IkReal(40000.0000000000))*(cj9));
IkReal x464=((IkReal(40000.0000000000))*(sj9));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(npx)*(x463)))+(((npy)*(x464))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(-3070.90000000000))+(((IkReal(-1.00000000000000))*(npx)*(x464)))+(((IkReal(-1.00000000000000))*(npy)*(x463))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(npx)*(x463)))+(((npy)*(x464)))))), ((gconst3)*(((IkReal(-3070.90000000000))+(((IkReal(-1.00000000000000))*(npx)*(x464)))+(((IkReal(-1.00000000000000))*(npy)*(x463)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x465=((IkReal(1.00000000000000))*(npy));
IkReal x466=((IkReal(0.317975000000000))*(sj6));
evalcond[0]=((((cj9)*(npx)))+(((x466)*(IKsin(j7))))+(((IkReal(-1.00000000000000))*(sj9)*(x465))));
evalcond[1]=((IkReal(-0.0767725000000000))+(((IkReal(-1.00000000000000))*(x466)*(IKcos(j7))))+(((IkReal(-1.00000000000000))*(cj9)*(x465)))+(((IkReal(-1.00000000000000))*(npx)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x467=((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30);
IkReal x468=((IkReal(7.86225332180203e-5))*(x467));
if( IKabs(((x468)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x468)*(((IKabs(cj8) != 0)?((IkReal)1/(cj8)):(IkReal)1.0e30))*(((((IkReal(40000.0000000000))*(npz)))+(((IkReal(-8870.88000000000))*(sj8)))+(((IkReal(-12719.0000000000))*(cj6)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x468)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9)))))))+IKsqr(((x468)*(((IKabs(cj8) != 0)?((IkReal)1/(cj8)):(IkReal)1.0e30))*(((((IkReal(40000.0000000000))*(npz)))+(((IkReal(-8870.88000000000))*(sj8)))+(((IkReal(-12719.0000000000))*(cj6)*(sj8)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x468)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9)))))), ((x468)*(((IKabs(cj8) != 0)?((IkReal)1/(cj8)):(IkReal)1.0e30))*(((((IkReal(40000.0000000000))*(npz)))+(((IkReal(-8870.88000000000))*(sj8)))+(((IkReal(-12719.0000000000))*(cj6)*(sj8)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x469=IKcos(j7);
IkReal x470=((IkReal(0.317975000000000))*(cj8));
IkReal x471=((cj9)*(npy));
IkReal x472=((npx)*(sj9));
IkReal x473=((IkReal(0.317975000000000))*(sj8));
IkReal x474=((sj6)*(x469));
evalcond[0]=((((cj9)*(npx)))+(((IkReal(0.317975000000000))*(sj6)*(IKsin(j7))))+(((IkReal(-1.00000000000000))*(npy)*(sj9))));
evalcond[1]=((((x470)*(x474)))+(((IkReal(0.221772000000000))*(sj8)))+(((IkReal(-1.00000000000000))*(npz)))+(((cj6)*(x473))));
evalcond[2]=((((IkReal(0.0767725000000000))*(sj8)))+(((cj8)*(npz)))+(((IkReal(-0.317975000000000))*(x474)))+(((sj8)*(x471)))+(((sj8)*(x472))));
evalcond[3]=((IkReal(0.0767725000000000))+(((cj6)*(x470)))+(((IkReal(-1.00000000000000))*(x473)*(x474)))+(((IkReal(0.221772000000000))*(cj8)))+(x471)+(x472));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x475=((IkReal(40000.0000000000))*(sj8));
if( IKabs(((gconst1)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((npx)*(sj9)*(x475)))+(((IkReal(3070.90000000000))*(sj8)))+(((cj9)*(npy)*(x475)))+(((IkReal(40000.0000000000))*(cj8)*(npz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst1)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9)))))), ((gconst1)*(((((npx)*(sj9)*(x475)))+(((IkReal(3070.90000000000))*(sj8)))+(((cj9)*(npy)*(x475)))+(((IkReal(40000.0000000000))*(cj8)*(npz)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x476=IKcos(j7);
IkReal x477=((IkReal(0.317975000000000))*(cj8));
IkReal x478=((cj9)*(npy));
IkReal x479=((npx)*(sj9));
IkReal x480=((IkReal(0.317975000000000))*(sj8));
IkReal x481=((sj6)*(x476));
evalcond[0]=((((cj9)*(npx)))+(((IkReal(0.317975000000000))*(sj6)*(IKsin(j7))))+(((IkReal(-1.00000000000000))*(npy)*(sj9))));
evalcond[1]=((((IkReal(0.221772000000000))*(sj8)))+(((IkReal(-1.00000000000000))*(npz)))+(((cj6)*(x480)))+(((x477)*(x481))));
evalcond[2]=((((IkReal(-0.317975000000000))*(x481)))+(((IkReal(0.0767725000000000))*(sj8)))+(((cj8)*(npz)))+(((sj8)*(x478)))+(((sj8)*(x479))));
evalcond[3]=((IkReal(0.0767725000000000))+(((cj6)*(x477)))+(((IkReal(0.221772000000000))*(cj8)))+(x478)+(x479)+(((IkReal(-1.00000000000000))*(x480)*(x481))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x482=((IkReal(0.0767725000000000))+(((npx)*(sj9)))+(((cj9)*(npy))));
if( IKabs(x482) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x483=((IkReal(1.00000000000000))*(IKatan2(x482, ((IkReal(-1.00000000000000))*(npz)))));
if( ((((x482)*(x482))+((npz)*(npz)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((x482)*(x482))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x482)*(x482))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(0.221772000000000))+(((IkReal(0.317975000000000))*(cj6))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((x482)*(x482))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x482)*(x482))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(0.221772000000000))+(((IkReal(0.317975000000000))*(cj6))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x484=IKasin(((((IKabs(IKabs(IKsqrt((((x482)*(x482))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x482)*(x482))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(0.221772000000000))+(((IkReal(0.317975000000000))*(cj6)))))));
j8array[0]=((((IkReal(-1.00000000000000))*(x483)))+(((IkReal(-1.00000000000000))*(x484))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x483)))+(x484));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(sj6);
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj6;
dummyeval[1]=cj8;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x485=((IkReal(0.221772000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.317975000000000))*(cj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.144396903852750))+(((IkReal(-0.153545000000000))*(npx)*(sj9)))+(((IkReal(-0.153545000000000))*(cj9)*(npy)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6))));
evalcond[2]=x485;
evalcond[3]=x485;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(sj6);
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x486=((IkReal(40000.0000000000))*(cj9));
IkReal x487=((IkReal(40000.0000000000))*(sj9));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(npx)*(x486)))+(((npy)*(x487))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((IkReal(3070.90000000000))+(((npx)*(x487)))+(((npy)*(x486))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(npx)*(x486)))+(((npy)*(x487)))))), ((gconst2)*(((IkReal(3070.90000000000))+(((npx)*(x487)))+(((npy)*(x486)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x488=((IkReal(0.317975000000000))*(sj6));
evalcond[0]=((((x488)*(IKsin(j7))))+(((cj9)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj9))));
evalcond[1]=((IkReal(0.0767725000000000))+(((npx)*(sj9)))+(((cj9)*(npy)))+(((IkReal(-1.00000000000000))*(x488)*(IKcos(j7)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x489=((IkReal(0.317975000000000))*(cj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j8)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.144396903852750))+(((IkReal(-0.153545000000000))*(npx)*(sj9)))+(((IkReal(-0.153545000000000))*(cj9)*(npy)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.141035903400000))*(cj6))));
evalcond[2]=((IkReal(-0.221772000000000))+(((IkReal(-1.00000000000000))*(x489)))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[3]=((IkReal(0.221772000000000))+(npz)+(x489));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(sj6);
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x490=((IkReal(40000.0000000000))*(cj9));
IkReal x491=((IkReal(40000.0000000000))*(sj9));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(npx)*(x490)))+(((npy)*(x491))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(-3070.90000000000))+(((IkReal(-1.00000000000000))*(npx)*(x491)))+(((IkReal(-1.00000000000000))*(npy)*(x490))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(npx)*(x490)))+(((npy)*(x491)))))), ((gconst3)*(((IkReal(-3070.90000000000))+(((IkReal(-1.00000000000000))*(npx)*(x491)))+(((IkReal(-1.00000000000000))*(npy)*(x490)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x492=((IkReal(1.00000000000000))*(npy));
IkReal x493=((IkReal(0.317975000000000))*(sj6));
evalcond[0]=((((cj9)*(npx)))+(((IkReal(-1.00000000000000))*(sj9)*(x492)))+(((x493)*(IKsin(j7)))));
evalcond[1]=((IkReal(-0.0767725000000000))+(((IkReal(-1.00000000000000))*(cj9)*(x492)))+(((IkReal(-1.00000000000000))*(x493)*(IKcos(j7))))+(((IkReal(-1.00000000000000))*(npx)*(sj9))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x494=((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30);
IkReal x495=((IkReal(7.86225332180203e-5))*(x494));
if( IKabs(((x495)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x495)*(((IKabs(cj8) != 0)?((IkReal)1/(cj8)):(IkReal)1.0e30))*(((((IkReal(40000.0000000000))*(npz)))+(((IkReal(-8870.88000000000))*(sj8)))+(((IkReal(-12719.0000000000))*(cj6)*(sj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x495)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9)))))))+IKsqr(((x495)*(((IKabs(cj8) != 0)?((IkReal)1/(cj8)):(IkReal)1.0e30))*(((((IkReal(40000.0000000000))*(npz)))+(((IkReal(-8870.88000000000))*(sj8)))+(((IkReal(-12719.0000000000))*(cj6)*(sj8)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x495)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9)))))), ((x495)*(((IKabs(cj8) != 0)?((IkReal)1/(cj8)):(IkReal)1.0e30))*(((((IkReal(40000.0000000000))*(npz)))+(((IkReal(-8870.88000000000))*(sj8)))+(((IkReal(-12719.0000000000))*(cj6)*(sj8)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x496=IKcos(j7);
IkReal x497=((IkReal(0.317975000000000))*(cj8));
IkReal x498=((cj9)*(npy));
IkReal x499=((npx)*(sj9));
IkReal x500=((IkReal(0.317975000000000))*(sj8));
IkReal x501=((sj6)*(x496));
evalcond[0]=((((cj9)*(npx)))+(((IkReal(0.317975000000000))*(sj6)*(IKsin(j7))))+(((IkReal(-1.00000000000000))*(npy)*(sj9))));
evalcond[1]=((((cj6)*(x500)))+(((x497)*(x501)))+(((IkReal(0.221772000000000))*(sj8)))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[2]=((((IkReal(0.0767725000000000))*(sj8)))+(((IkReal(-0.317975000000000))*(x501)))+(((cj8)*(npz)))+(((sj8)*(x499)))+(((sj8)*(x498))));
evalcond[3]=((IkReal(0.0767725000000000))+(((cj6)*(x497)))+(((IkReal(0.221772000000000))*(cj8)))+(x498)+(x499)+(((IkReal(-1.00000000000000))*(x500)*(x501))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x502=((IkReal(40000.0000000000))*(sj8));
if( IKabs(((gconst1)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((npx)*(sj9)*(x502)))+(((IkReal(3070.90000000000))*(sj8)))+(((cj9)*(npy)*(x502)))+(((IkReal(40000.0000000000))*(cj8)*(npz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst1)*(((((IkReal(-40000.0000000000))*(cj9)*(npx)))+(((IkReal(40000.0000000000))*(npy)*(sj9)))))), ((gconst1)*(((((npx)*(sj9)*(x502)))+(((IkReal(3070.90000000000))*(sj8)))+(((cj9)*(npy)*(x502)))+(((IkReal(40000.0000000000))*(cj8)*(npz)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x503=IKcos(j7);
IkReal x504=((IkReal(0.317975000000000))*(cj8));
IkReal x505=((cj9)*(npy));
IkReal x506=((npx)*(sj9));
IkReal x507=((IkReal(0.317975000000000))*(sj8));
IkReal x508=((sj6)*(x503));
evalcond[0]=((((cj9)*(npx)))+(((IkReal(0.317975000000000))*(sj6)*(IKsin(j7))))+(((IkReal(-1.00000000000000))*(npy)*(sj9))));
evalcond[1]=((((cj6)*(x507)))+(((IkReal(0.221772000000000))*(sj8)))+(((IkReal(-1.00000000000000))*(npz)))+(((x504)*(x508))));
evalcond[2]=((((IkReal(0.0767725000000000))*(sj8)))+(((IkReal(-0.317975000000000))*(x508)))+(((cj8)*(npz)))+(((sj8)*(x506)))+(((sj8)*(x505))));
evalcond[3]=((IkReal(0.0767725000000000))+(((cj6)*(x504)))+(((IkReal(-1.00000000000000))*(x507)*(x508)))+(((IkReal(0.221772000000000))*(cj8)))+(x505)+(x506));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x90=((IkReal(1.00000000000000))*(sj6));
IkReal x91=((cj8)*(sj7));
IkReal x92=((cj6)*(cj8));
IkReal x93=((sj7)*(sj9));
IkReal x94=((cj9)*(sj7));
IkReal x95=((IkReal(1.00000000000000))*(cj7));
IkReal x96=((IkReal(1.00000000000000))*(cj6)*(sj8));
IkReal x97=((((cj7)*(cj9)))+(((sj8)*(x93))));
IkReal x98=((((sj8)*(x94)))+(((IkReal(-1.00000000000000))*(sj9)*(x95))));
IkReal x99=((((IkReal(-1.00000000000000))*(x92)*(x95)))+(((sj6)*(sj8))));
IkReal x100=((x92)+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x90))));
IkReal x101=((cj9)*(x100));
IkReal x102=((((IkReal(-1.00000000000000))*(cj6)*(sj8)*(x95)))+(((IkReal(-1.00000000000000))*(cj8)*(x90))));
IkReal x103=((((IkReal(-1.00000000000000))*(x96)))+(((IkReal(-1.00000000000000))*(cj7)*(cj8)*(x90))));
IkReal x104=((cj9)*(x102));
IkReal x105=((((sj6)*(x94)))+(((sj9)*(x100))));
IkReal x106=((((IkReal(-1.00000000000000))*(x90)*(x93)))+(x101));
IkReal x107=((((cj6)*(x94)))+(((sj9)*(x102))));
IkReal x108=((x104)+(((IkReal(-1.00000000000000))*(cj6)*(x93))));
new_r00=((((r01)*(x98)))+(((r00)*(x97)))+(((r02)*(x91))));
new_r01=((((r12)*(x91)))+(((r11)*(x98)))+(((r10)*(x97))));
new_r02=((((r21)*(x98)))+(((r20)*(x97)))+(((r22)*(x91))));
new_r10=((((r01)*(x108)))+(((r00)*(x107)))+(((r02)*(x99))));
new_r11=((((r12)*(x99)))+(((r10)*(x107)))+(((r11)*(x108))));
new_r12=((((r21)*(((x104)+(((IkReal(-1.00000000000000))*(cj6)*(x93)))))))+(((r20)*(x107)))+(((r22)*(x99))));
new_r20=((((r02)*(x103)))+(((r01)*(x106)))+(((r00)*(x105))));
new_r21=((((r10)*(x105)))+(((r12)*(x103)))+(((r11)*(((x101)+(((IkReal(-1.00000000000000))*(sj6)*(x93))))))));
new_r22=((((r22)*(x103)))+(((r21)*(x106)))+(((r20)*(x105))));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((IkReal(-1.00000000000000))*(new_r22));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((cj4)*(new_r10)*(new_r12)))+(((cj4)*(new_r00)*(new_r02)))));
dummyeval[0]=((((cj4)*(new_r10)*(new_r12)))+(((cj4)*(new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x109=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x109;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x109;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x110=IKatan2(new_r12, new_r02);
j5array[0]=((IkReal(-1.00000000000000))*(x110));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x110))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j5))))+(((new_r02)*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x111=((IkReal(0.707106781186548))*(sj5));
IkReal x112=((IkReal(0.707106781186548))*(cj5));
IkReal x113=((new_r01)*(x111));
IkReal x114=((new_r00)*(x111));
IkReal x115=((new_r10)*(x112));
IkReal x116=((new_r11)*(x112));
IkReal x117=((x113)+(x116));
IkReal x118=((x115)+(x114));
if( IKabs(((((IkReal(-1.00000000000000))*(x117)))+(x118))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(x117)))+(((IkReal(-1.00000000000000))*(x118))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(x117)))+(x118)))+IKsqr(((((IkReal(-1.00000000000000))*(x117)))+(((IkReal(-1.00000000000000))*(x118)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IkReal(-1.00000000000000))*(x117)))+(x118)), ((((IkReal(-1.00000000000000))*(x117)))+(((IkReal(-1.00000000000000))*(x118)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x119=((IkReal(1.00000000000000))*(sj5));
IkReal x120=((IkReal(0.707106781186548))*(IKsin(j3)));
IkReal x121=((IkReal(0.707106781186548))*(IKcos(j3)));
IkReal x122=((x120)+(x121));
evalcond[0]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(x120)))+(x121));
evalcond[1]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x122));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x119)))+(((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(x122))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x119)))+(((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(x120)))+(x121));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[3]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x123=IKatan2(new_r12, new_r02);
j5array[0]=((IkReal(-1.00000000000000))*(x123));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x123))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j5))))+(((new_r02)*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x124=((IkReal(0.707106781186548))*(sj5));
IkReal x125=((IkReal(0.707106781186548))*(cj5));
IkReal x126=((new_r01)*(x124));
IkReal x127=((new_r00)*(x124));
IkReal x128=((new_r10)*(x125));
IkReal x129=((new_r11)*(x125));
IkReal x130=((x126)+(x129));
IkReal x131=((x127)+(x128));
if( IKabs(((x131)+(((IkReal(-1.00000000000000))*(x130))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(x130)))+(((IkReal(-1.00000000000000))*(x131))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x131)+(((IkReal(-1.00000000000000))*(x130)))))+IKsqr(((((IkReal(-1.00000000000000))*(x130)))+(((IkReal(-1.00000000000000))*(x131)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x131)+(((IkReal(-1.00000000000000))*(x130)))), ((((IkReal(-1.00000000000000))*(x130)))+(((IkReal(-1.00000000000000))*(x131)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x132=((IkReal(1.00000000000000))*(sj5));
IkReal x133=((IkReal(0.707106781186548))*(IKsin(j3)));
IkReal x134=((IkReal(0.707106781186548))*(IKcos(j3)));
IkReal x135=((x134)+(x133));
evalcond[0]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(x134)+(((IkReal(-1.00000000000000))*(x133))));
evalcond[1]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x135));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x132)))+(((cj5)*(new_r00)))+(x135));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x132)))+(((cj5)*(new_r01)))+(x133)+(((IkReal(-1.00000000000000))*(x134))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x136=((IkReal(1.41421356237310))*(new_r20));
IkReal x137=((IkReal(1.41421356237310))*(new_r21));
if( IKabs(((gconst4)*(((x137)+(x136))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((x136)+(((IkReal(-1.00000000000000))*(x137))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst4)*(((x137)+(x136)))), ((gconst4)*(((x136)+(((IkReal(-1.00000000000000))*(x137)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x138=((IkReal(0.707106781186548))*(cj4));
IkReal x139=((x138)*(IKcos(j3)));
IkReal x140=((x138)*(IKsin(j3)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x140)))+(((IkReal(-1.00000000000000))*(x139)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x140)))+(x139)+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((cj4)*(new_r10)*(new_r12)))+(((cj4)*(new_r00)*(new_r02)))));
dummyeval[0]=((((cj4)*(new_r10)*(new_r12)))+(((cj4)*(new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x141=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x141;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x141;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x142=((IkReal(0.707106781186548))*(new_r12));
IkReal x143=((IkReal(0.707106781186548))*(new_r02));
if( IKabs(((gconst10)*(((((cj3)*(x142)))+(((sj3)*(x142))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(cj3)*(x143)))+(((IkReal(-1.00000000000000))*(sj3)*(x143))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst10)*(((((cj3)*(x142)))+(((sj3)*(x142)))))), ((gconst10)*(((((IkReal(-1.00000000000000))*(cj3)*(x143)))+(((IkReal(-1.00000000000000))*(sj3)*(x143)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x144=IKcos(j5);
IkReal x145=IKsin(j5);
IkReal x146=((IkReal(0.707106781186548))*(sj3));
IkReal x147=((IkReal(0.707106781186548))*(cj3));
IkReal x148=((IkReal(1.00000000000000))*(x145));
IkReal x149=((x146)+(x147));
evalcond[0]=((((new_r12)*(x144)))+(((new_r02)*(x145))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r12)*(x148)))+(((new_r02)*(x144))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x146)))+(((new_r00)*(x145)))+(((new_r10)*(x144)))+(x147));
evalcond[3]=((((new_r01)*(x145)))+(((new_r11)*(x144)))+(x149));
evalcond[4]=((((IkReal(-1.00000000000000))*(x149)))+(((new_r00)*(x144)))+(((IkReal(-1.00000000000000))*(new_r10)*(x148))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x146)))+(((new_r01)*(x144)))+(((IkReal(-1.00000000000000))*(new_r11)*(x148)))+(x147));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x150=((IkReal(0.707106781186548))*(new_r12));
IkReal x151=((IkReal(0.707106781186548))*(new_r02));
if( IKabs(((gconst9)*(((((cj3)*(x150)))+(((IkReal(-1.00000000000000))*(sj3)*(x150))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(cj3)*(x151)))+(((sj3)*(x151))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst9)*(((((cj3)*(x150)))+(((IkReal(-1.00000000000000))*(sj3)*(x150)))))), ((gconst9)*(((((IkReal(-1.00000000000000))*(cj3)*(x151)))+(((sj3)*(x151)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x152=IKcos(j5);
IkReal x153=IKsin(j5);
IkReal x154=((IkReal(0.707106781186548))*(sj3));
IkReal x155=((IkReal(0.707106781186548))*(cj3));
IkReal x156=((IkReal(1.00000000000000))*(x153));
IkReal x157=((x155)+(x154));
evalcond[0]=((((new_r12)*(x152)))+(((new_r02)*(x153))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r12)*(x156)))+(((new_r02)*(x152))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x154)))+(((new_r00)*(x153)))+(((new_r10)*(x152)))+(x155));
evalcond[3]=((((new_r01)*(x153)))+(((new_r11)*(x152)))+(x157));
evalcond[4]=((((IkReal(-1.00000000000000))*(x157)))+(((new_r00)*(x152)))+(((IkReal(-1.00000000000000))*(new_r10)*(x156))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x154)))+(((new_r01)*(x152)))+(x155)+(((IkReal(-1.00000000000000))*(new_r11)*(x156))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[3]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x158=((IkReal(0.707106781186548))*(new_r12));
IkReal x159=((IkReal(0.707106781186548))*(new_r02));
if( IKabs(((gconst12)*(((((cj3)*(x158)))+(((sj3)*(x158))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((IkReal(-1.00000000000000))*(cj3)*(x159)))+(((IkReal(-1.00000000000000))*(sj3)*(x159))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst12)*(((((cj3)*(x158)))+(((sj3)*(x158)))))), ((gconst12)*(((((IkReal(-1.00000000000000))*(cj3)*(x159)))+(((IkReal(-1.00000000000000))*(sj3)*(x159)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x160=IKcos(j5);
IkReal x161=IKsin(j5);
IkReal x162=((IkReal(0.707106781186548))*(sj3));
IkReal x163=((IkReal(0.707106781186548))*(cj3));
IkReal x164=((IkReal(1.00000000000000))*(x161));
IkReal x165=((x162)+(x163));
evalcond[0]=((((new_r12)*(x160)))+(((new_r02)*(x161))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r12)*(x164)))+(((new_r02)*(x160))));
evalcond[2]=((((new_r00)*(x161)))+(((IkReal(-1.00000000000000))*(x162)))+(((new_r10)*(x160)))+(x163));
evalcond[3]=((((new_r01)*(x161)))+(((new_r11)*(x160)))+(x165));
evalcond[4]=((((new_r00)*(x160)))+(((IkReal(-1.00000000000000))*(new_r10)*(x164)))+(x165));
evalcond[5]=((((new_r01)*(x160)))+(((IkReal(-1.00000000000000))*(x163)))+(((IkReal(-1.00000000000000))*(new_r11)*(x164)))+(x162));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x166=((IkReal(0.707106781186548))*(new_r12));
IkReal x167=((IkReal(0.707106781186548))*(new_r02));
if( IKabs(((gconst11)*(((((cj3)*(x166)))+(((IkReal(-1.00000000000000))*(sj3)*(x166))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((sj3)*(x167)))+(((IkReal(-1.00000000000000))*(cj3)*(x167))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst11)*(((((cj3)*(x166)))+(((IkReal(-1.00000000000000))*(sj3)*(x166)))))), ((gconst11)*(((((sj3)*(x167)))+(((IkReal(-1.00000000000000))*(cj3)*(x167)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x168=IKcos(j5);
IkReal x169=IKsin(j5);
IkReal x170=((IkReal(0.707106781186548))*(sj3));
IkReal x171=((IkReal(0.707106781186548))*(cj3));
IkReal x172=((IkReal(1.00000000000000))*(x169));
IkReal x173=((x171)+(x170));
evalcond[0]=((((new_r12)*(x168)))+(((new_r02)*(x169))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r12)*(x172)))+(((new_r02)*(x168))));
evalcond[2]=((((new_r00)*(x169)))+(((new_r10)*(x168)))+(((IkReal(-1.00000000000000))*(x170)))+(x171));
evalcond[3]=((((new_r01)*(x169)))+(((new_r11)*(x168)))+(x173));
evalcond[4]=((((new_r00)*(x168)))+(((IkReal(-1.00000000000000))*(new_r10)*(x172)))+(x173));
evalcond[5]=((((new_r01)*(x168)))+(((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(new_r11)*(x172)))+(x170));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x174=((gconst8)*(new_r20)*(sj4));
if( IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x174))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x174))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r12)*(x174)), ((new_r02)*(x174)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x175=IKcos(j5);
IkReal x176=IKsin(j5);
IkReal x177=((IkReal(0.707106781186548))*(sj3));
IkReal x178=((IkReal(0.707106781186548))*(cj3));
IkReal x179=((IkReal(0.707106781186548))*(sj4));
IkReal x180=((IkReal(1.00000000000000))*(cj4));
IkReal x181=((IkReal(1.00000000000000))*(sj4));
IkReal x182=((sj4)*(x178));
IkReal x183=((sj4)*(x177));
IkReal x184=((new_r02)*(x175));
IkReal x185=((IkReal(1.00000000000000))*(x176));
IkReal x186=((new_r01)*(x175));
IkReal x187=((new_r00)*(x175));
IkReal x188=((cj4)*(x176));
IkReal x189=((sj4)*(x176));
IkReal x190=((x178)+(x177));
evalcond[0]=((((new_r02)*(x176)))+(((new_r12)*(x175))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x180)))+(x184)+(((IkReal(-1.00000000000000))*(new_r12)*(x185))));
evalcond[2]=((((new_r10)*(x188)))+(((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(x180)*(x187))));
evalcond[3]=((((new_r11)*(x188)))+(((IkReal(-1.00000000000000))*(x180)*(x186)))+(((new_r21)*(sj4))));
evalcond[4]=((IkReal(1.00000000000000))+(((new_r12)*(x188)))+(((IkReal(-1.00000000000000))*(x180)*(x184)))+(((new_r22)*(sj4))));
evalcond[5]=((((new_r12)*(x189)))+(((IkReal(-1.00000000000000))*(new_r22)*(x180)))+(((IkReal(-1.00000000000000))*(x181)*(x184))));
evalcond[6]=((((new_r00)*(x176)))+(((new_r10)*(x175)))+(((IkReal(-1.00000000000000))*(x177)))+(x178));
evalcond[7]=((((new_r01)*(x176)))+(((new_r11)*(x175)))+(x190));
evalcond[8]=((((IkReal(-1.00000000000000))*(x183)))+(((IkReal(-1.00000000000000))*(x182)))+(x187)+(((IkReal(-1.00000000000000))*(new_r10)*(x185))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x183)))+(x186)+(x182)+(((IkReal(-1.00000000000000))*(new_r11)*(x185))));
evalcond[10]=((((new_r10)*(x189)))+(x190)+(((IkReal(-1.00000000000000))*(new_r20)*(x180)))+(((IkReal(-1.00000000000000))*(x181)*(x187))));
evalcond[11]=((((new_r11)*(x189)))+(((IkReal(-1.00000000000000))*(x178)))+(((IkReal(-1.00000000000000))*(new_r21)*(x180)))+(x177)+(((IkReal(-1.00000000000000))*(x181)*(x186))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x191=((cj4)*(gconst7));
if( IKabs(((new_r12)*(x191))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x191))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((new_r12)*(x191)), ((IkReal(-1.00000000000000))*(new_r02)*(x191)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x192=IKcos(j5);
IkReal x193=IKsin(j5);
IkReal x194=((IkReal(0.707106781186548))*(sj3));
IkReal x195=((IkReal(0.707106781186548))*(cj3));
IkReal x196=((IkReal(0.707106781186548))*(sj4));
IkReal x197=((IkReal(1.00000000000000))*(cj4));
IkReal x198=((IkReal(1.00000000000000))*(sj4));
IkReal x199=((sj4)*(x195));
IkReal x200=((sj4)*(x194));
IkReal x201=((new_r02)*(x192));
IkReal x202=((IkReal(1.00000000000000))*(x193));
IkReal x203=((new_r01)*(x192));
IkReal x204=((new_r00)*(x192));
IkReal x205=((cj4)*(x193));
IkReal x206=((sj4)*(x193));
IkReal x207=((x195)+(x194));
evalcond[0]=((((new_r02)*(x193)))+(((new_r12)*(x192))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r12)*(x202)))+(((IkReal(-1.00000000000000))*(x197)))+(x201));
evalcond[2]=((((new_r20)*(sj4)))+(((new_r10)*(x205)))+(((IkReal(-1.00000000000000))*(x197)*(x204))));
evalcond[3]=((((new_r11)*(x205)))+(((IkReal(-1.00000000000000))*(x197)*(x203)))+(((new_r21)*(sj4))));
evalcond[4]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x197)*(x201)))+(((new_r12)*(x205)))+(((new_r22)*(sj4))));
evalcond[5]=((((new_r12)*(x206)))+(((IkReal(-1.00000000000000))*(new_r22)*(x197)))+(((IkReal(-1.00000000000000))*(x198)*(x201))));
evalcond[6]=((((new_r10)*(x192)))+(((new_r00)*(x193)))+(((IkReal(-1.00000000000000))*(x194)))+(x195));
evalcond[7]=((((new_r11)*(x192)))+(((new_r01)*(x193)))+(x207));
evalcond[8]=((((IkReal(-1.00000000000000))*(x199)))+(((IkReal(-1.00000000000000))*(x200)))+(x204)+(((IkReal(-1.00000000000000))*(new_r10)*(x202))));
evalcond[9]=((x199)+(((IkReal(-1.00000000000000))*(x200)))+(x203)+(((IkReal(-1.00000000000000))*(new_r11)*(x202))));
evalcond[10]=((((new_r10)*(x206)))+(((IkReal(-1.00000000000000))*(new_r20)*(x197)))+(x207)+(((IkReal(-1.00000000000000))*(x198)*(x204))));
evalcond[11]=((((new_r11)*(x206)))+(((IkReal(-1.00000000000000))*(x195)))+(((IkReal(-1.00000000000000))*(new_r21)*(x197)))+(x194)+(((IkReal(-1.00000000000000))*(x198)*(x203))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x208=((gconst6)*(new_r20)*(sj4));
if( IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x208))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x208))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r12)*(x208)), ((new_r02)*(x208)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x209=IKcos(j5);
IkReal x210=IKsin(j5);
IkReal x211=((IkReal(1.00000000000000))*(cj4));
IkReal x212=((cj4)*(x210));
IkReal x213=((new_r02)*(x209));
IkReal x214=((new_r12)*(x210));
evalcond[0]=((((new_r12)*(x209)))+(((new_r02)*(x210))));
evalcond[1]=((x213)+(((IkReal(-1.00000000000000))*(x214)))+(((IkReal(-1.00000000000000))*(x211))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x209)*(x211)))+(((new_r20)*(sj4)))+(((new_r10)*(x212))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x209)*(x211)))+(((new_r21)*(sj4)))+(((new_r11)*(x212))));
evalcond[4]=((IkReal(1.00000000000000))+(((new_r22)*(sj4)))+(((IkReal(-1.00000000000000))*(x211)*(x213)))+(((new_r12)*(x212))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r22)*(x211)))+(((IkReal(-1.00000000000000))*(sj4)*(x213)))+(((sj4)*(x214))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x215=((IkReal(1.00000000000000))+(new_r22));
IkReal x216=((IkReal(1.00000000000000))*(cj5));
IkReal x217=((new_r02)*(sj5));
IkReal x218=((new_r12)*(sj5));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x215;
evalcond[2]=((((cj5)*(new_r12)))+(x217));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r12)*(x216)))+(((IkReal(-1.00000000000000))*(x217))));
evalcond[4]=((((cj5)*(new_r02)))+(((IkReal(-1.00000000000000))*(x218))));
evalcond[5]=new_r20;
evalcond[6]=new_r21;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x215;
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r02)*(x216)))+(x218));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x219=((IkReal(0.707106781186548))*(sj5));
IkReal x220=((IkReal(0.707106781186548))*(cj5));
IkReal x221=((new_r01)*(x219));
IkReal x222=((new_r00)*(x219));
IkReal x223=((new_r10)*(x220));
IkReal x224=((new_r11)*(x220));
IkReal x225=((x221)+(x224));
IkReal x226=((x223)+(x222));
if( IKabs(((x226)+(((IkReal(-1.00000000000000))*(x225))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(x226)))+(((IkReal(-1.00000000000000))*(x225))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x226)+(((IkReal(-1.00000000000000))*(x225)))))+IKsqr(((((IkReal(-1.00000000000000))*(x226)))+(((IkReal(-1.00000000000000))*(x225)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x226)+(((IkReal(-1.00000000000000))*(x225)))), ((((IkReal(-1.00000000000000))*(x226)))+(((IkReal(-1.00000000000000))*(x225)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x227=((IkReal(1.00000000000000))*(sj5));
IkReal x228=((IkReal(0.707106781186548))*(IKsin(j3)));
IkReal x229=((IkReal(0.707106781186548))*(IKcos(j3)));
IkReal x230=((x229)+(x228));
evalcond[0]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(x229)+(((IkReal(-1.00000000000000))*(x228))));
evalcond[1]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x230));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x227)))+(((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(x230))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x227)))+(((cj5)*(new_r01)))+(x229)+(((IkReal(-1.00000000000000))*(x228))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x231=((cj5)*(new_r12));
IkReal x232=((new_r02)*(sj5));
IkReal x233=((((cj5)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj5))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=((x232)+(x231));
evalcond[3]=((((IkReal(-1.00000000000000))*(x231)))+(((IkReal(-1.00000000000000))*(x232))));
evalcond[4]=x233;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[6]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=x233;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x234=((IkReal(0.707106781186548))*(sj5));
IkReal x235=((IkReal(0.707106781186548))*(cj5));
IkReal x236=((new_r01)*(x234));
IkReal x237=((new_r00)*(x234));
IkReal x238=((new_r10)*(x235));
IkReal x239=((new_r11)*(x235));
IkReal x240=((x239)+(x236));
IkReal x241=((x238)+(x237));
if( IKabs(((x241)+(((IkReal(-1.00000000000000))*(x240))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(x240)))+(((IkReal(-1.00000000000000))*(x241))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x241)+(((IkReal(-1.00000000000000))*(x240)))))+IKsqr(((((IkReal(-1.00000000000000))*(x240)))+(((IkReal(-1.00000000000000))*(x241)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x241)+(((IkReal(-1.00000000000000))*(x240)))), ((((IkReal(-1.00000000000000))*(x240)))+(((IkReal(-1.00000000000000))*(x241)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x242=((IkReal(1.00000000000000))*(sj5));
IkReal x243=((IkReal(0.707106781186548))*(IKsin(j3)));
IkReal x244=((IkReal(0.707106781186548))*(IKcos(j3)));
IkReal x245=((x243)+(x244));
evalcond[0]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(x244)+(((IkReal(-1.00000000000000))*(x243))));
evalcond[1]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x245));
evalcond[2]=((((cj5)*(new_r00)))+(x245)+(((IkReal(-1.00000000000000))*(new_r10)*(x242))));
evalcond[3]=((((cj5)*(new_r01)))+(x243)+(((IkReal(-1.00000000000000))*(new_r11)*(x242)))+(((IkReal(-1.00000000000000))*(x244))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x246=((IkReal(1.41421356237310))*(new_r20));
IkReal x247=((IkReal(1.41421356237310))*(cj4));
IkReal x248=((cj5)*(new_r10)*(x247));
IkReal x249=((new_r00)*(sj5)*(x247));
IkReal x250=((x249)+(x248));
if( IKabs(((gconst14)*(((x250)+(x246))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((x246)+(((IkReal(-1.00000000000000))*(x250))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst14)*(((x250)+(x246)))), ((gconst14)*(((x246)+(((IkReal(-1.00000000000000))*(x250)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x251=IKcos(j3);
IkReal x252=IKsin(j3);
IkReal x253=((new_r11)*(sj5));
IkReal x254=((cj5)*(new_r00));
IkReal x255=((IkReal(1.00000000000000))*(sj4));
IkReal x256=((cj5)*(new_r01));
IkReal x257=((new_r10)*(sj5));
IkReal x258=((IkReal(1.00000000000000))*(cj4));
IkReal x259=((IkReal(0.707106781186548))*(x252));
IkReal x260=((IkReal(0.707106781186548))*(x251));
IkReal x261=((cj4)*(x260));
IkReal x262=((cj4)*(x259));
IkReal x263=((sj4)*(x260));
IkReal x264=((sj4)*(x259));
IkReal x265=((x259)+(x260));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x262)))+(((IkReal(-1.00000000000000))*(x261))));
evalcond[1]=((x261)+(new_r21)+(((IkReal(-1.00000000000000))*(x262))));
evalcond[2]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(x260)+(((IkReal(-1.00000000000000))*(x259))));
evalcond[3]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x265));
evalcond[4]=((x254)+(((IkReal(-1.00000000000000))*(x264)))+(((IkReal(-1.00000000000000))*(x263)))+(((IkReal(-1.00000000000000))*(x257))));
evalcond[5]=((x256)+(x263)+(((IkReal(-1.00000000000000))*(x264)))+(((IkReal(-1.00000000000000))*(x253))));
evalcond[6]=((((sj4)*(x257)))+(((IkReal(-1.00000000000000))*(x254)*(x255)))+(x265)+(((IkReal(-1.00000000000000))*(new_r20)*(x258))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x258)))+(((sj4)*(x253)))+(((IkReal(-1.00000000000000))*(x255)*(x256)))+(x259)+(((IkReal(-1.00000000000000))*(x260))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x266=((IkReal(1.41421356237310))*(new_r20));
IkReal x267=((IkReal(1.41421356237310))*(new_r21));
if( IKabs(((gconst13)*(((x267)+(x266))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((x266)+(((IkReal(-1.00000000000000))*(x267))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst13)*(((x267)+(x266)))), ((gconst13)*(((x266)+(((IkReal(-1.00000000000000))*(x267)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x268=IKcos(j3);
IkReal x269=IKsin(j3);
IkReal x270=((new_r11)*(sj5));
IkReal x271=((cj5)*(new_r00));
IkReal x272=((IkReal(1.00000000000000))*(sj4));
IkReal x273=((cj5)*(new_r01));
IkReal x274=((new_r10)*(sj5));
IkReal x275=((IkReal(1.00000000000000))*(cj4));
IkReal x276=((IkReal(0.707106781186548))*(x269));
IkReal x277=((IkReal(0.707106781186548))*(x268));
IkReal x278=((cj4)*(x277));
IkReal x279=((cj4)*(x276));
IkReal x280=((sj4)*(x277));
IkReal x281=((sj4)*(x276));
IkReal x282=((x276)+(x277));
evalcond[0]=((((IkReal(-1.00000000000000))*(x279)))+(((IkReal(-1.00000000000000))*(x278)))+(new_r20));
evalcond[1]=((x278)+(((IkReal(-1.00000000000000))*(x279)))+(new_r21));
evalcond[2]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(x277)+(((IkReal(-1.00000000000000))*(x276))));
evalcond[3]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x282));
evalcond[4]=((((IkReal(-1.00000000000000))*(x274)))+(x271)+(((IkReal(-1.00000000000000))*(x280)))+(((IkReal(-1.00000000000000))*(x281))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x270)))+(x273)+(x280)+(((IkReal(-1.00000000000000))*(x281))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x271)*(x272)))+(x282)+(((IkReal(-1.00000000000000))*(new_r20)*(x275)))+(((sj4)*(x274))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x272)*(x273)))+(((IkReal(-1.00000000000000))*(new_r21)*(x275)))+(x276)+(((IkReal(-1.00000000000000))*(x277)))+(((sj4)*(x270))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x283=((cj4)*(gconst5));
if( IKabs(((new_r12)*(x283))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x283))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((new_r12)*(x283)), ((IkReal(-1.00000000000000))*(new_r02)*(x283)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x284=IKcos(j5);
IkReal x285=IKsin(j5);
IkReal x286=((IkReal(1.00000000000000))*(cj4));
IkReal x287=((cj4)*(x285));
IkReal x288=((new_r02)*(x284));
IkReal x289=((new_r12)*(x285));
evalcond[0]=((((new_r02)*(x285)))+(((new_r12)*(x284))));
evalcond[1]=((x288)+(((IkReal(-1.00000000000000))*(x289)))+(((IkReal(-1.00000000000000))*(x286))));
evalcond[2]=((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r00)*(x284)*(x286)))+(((new_r10)*(x287))));
evalcond[3]=((((new_r21)*(sj4)))+(((new_r11)*(x287)))+(((IkReal(-1.00000000000000))*(new_r01)*(x284)*(x286))));
evalcond[4]=((IkReal(1.00000000000000))+(((new_r22)*(sj4)))+(((new_r12)*(x287)))+(((IkReal(-1.00000000000000))*(x286)*(x288))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r22)*(x286)))+(((IkReal(-1.00000000000000))*(sj4)*(x288)))+(((sj4)*(x289))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x290=((IkReal(1.00000000000000))+(new_r22));
IkReal x291=((IkReal(1.00000000000000))*(cj5));
IkReal x292=((new_r02)*(sj5));
IkReal x293=((new_r12)*(sj5));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x290;
evalcond[2]=((((cj5)*(new_r12)))+(x292));
evalcond[3]=((((IkReal(-1.00000000000000))*(x292)))+(((IkReal(-1.00000000000000))*(new_r12)*(x291))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x293)))+(((cj5)*(new_r02))));
evalcond[5]=new_r20;
evalcond[6]=new_r21;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x290;
evalcond[10]=((x293)+(((IkReal(-1.00000000000000))*(new_r02)*(x291))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x294=((IkReal(0.707106781186548))*(sj5));
IkReal x295=((IkReal(0.707106781186548))*(cj5));
IkReal x296=((new_r01)*(x294));
IkReal x297=((new_r00)*(x294));
IkReal x298=((new_r10)*(x295));
IkReal x299=((new_r11)*(x295));
IkReal x300=((x299)+(x296));
IkReal x301=((x298)+(x297));
if( IKabs(((x301)+(((IkReal(-1.00000000000000))*(x300))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(x301)))+(((IkReal(-1.00000000000000))*(x300))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x301)+(((IkReal(-1.00000000000000))*(x300)))))+IKsqr(((((IkReal(-1.00000000000000))*(x301)))+(((IkReal(-1.00000000000000))*(x300)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x301)+(((IkReal(-1.00000000000000))*(x300)))), ((((IkReal(-1.00000000000000))*(x301)))+(((IkReal(-1.00000000000000))*(x300)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x302=((IkReal(1.00000000000000))*(sj5));
IkReal x303=((IkReal(0.707106781186548))*(IKsin(j3)));
IkReal x304=((IkReal(0.707106781186548))*(IKcos(j3)));
IkReal x305=((x304)+(x303));
evalcond[0]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(x304)+(((IkReal(-1.00000000000000))*(x303))));
evalcond[1]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x305));
evalcond[2]=((((cj5)*(new_r00)))+(((IkReal(-1.00000000000000))*(x305)))+(((IkReal(-1.00000000000000))*(new_r10)*(x302))));
evalcond[3]=((((cj5)*(new_r01)))+(x304)+(((IkReal(-1.00000000000000))*(new_r11)*(x302)))+(((IkReal(-1.00000000000000))*(x303))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x306=((cj5)*(new_r12));
IkReal x307=((new_r02)*(sj5));
IkReal x308=((((cj5)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj5))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=((x306)+(x307));
evalcond[3]=((((IkReal(-1.00000000000000))*(x306)))+(((IkReal(-1.00000000000000))*(x307))));
evalcond[4]=x308;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[6]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=x308;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x309=((IkReal(0.707106781186548))*(sj5));
IkReal x310=((IkReal(0.707106781186548))*(cj5));
IkReal x311=((new_r01)*(x309));
IkReal x312=((new_r00)*(x309));
IkReal x313=((new_r10)*(x310));
IkReal x314=((new_r11)*(x310));
IkReal x315=((x314)+(x311));
IkReal x316=((x313)+(x312));
if( IKabs(((x316)+(((IkReal(-1.00000000000000))*(x315))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(x315)))+(((IkReal(-1.00000000000000))*(x316))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x316)+(((IkReal(-1.00000000000000))*(x315)))))+IKsqr(((((IkReal(-1.00000000000000))*(x315)))+(((IkReal(-1.00000000000000))*(x316)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x316)+(((IkReal(-1.00000000000000))*(x315)))), ((((IkReal(-1.00000000000000))*(x315)))+(((IkReal(-1.00000000000000))*(x316)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x317=((IkReal(1.00000000000000))*(sj5));
IkReal x318=((IkReal(0.707106781186548))*(IKsin(j3)));
IkReal x319=((IkReal(0.707106781186548))*(IKcos(j3)));
IkReal x320=((x319)+(x318));
evalcond[0]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(x319)+(((IkReal(-1.00000000000000))*(x318))));
evalcond[1]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x320));
evalcond[2]=((((cj5)*(new_r00)))+(x320)+(((IkReal(-1.00000000000000))*(new_r10)*(x317))));
evalcond[3]=((((cj5)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x317)))+(x318)+(((IkReal(-1.00000000000000))*(x319))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x321=((IkReal(1.41421356237310))*(new_r20));
IkReal x322=((IkReal(1.41421356237310))*(cj4));
IkReal x323=((cj5)*(new_r10)*(x322));
IkReal x324=((new_r00)*(sj5)*(x322));
IkReal x325=((x324)+(x323));
if( IKabs(((gconst14)*(((x325)+(x321))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(x325)))+(x321))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst14)*(((x325)+(x321)))), ((gconst14)*(((((IkReal(-1.00000000000000))*(x325)))+(x321)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x326=IKcos(j3);
IkReal x327=IKsin(j3);
IkReal x328=((new_r11)*(sj5));
IkReal x329=((cj5)*(new_r00));
IkReal x330=((IkReal(1.00000000000000))*(sj4));
IkReal x331=((cj5)*(new_r01));
IkReal x332=((new_r10)*(sj5));
IkReal x333=((IkReal(1.00000000000000))*(cj4));
IkReal x334=((IkReal(0.707106781186548))*(x327));
IkReal x335=((IkReal(0.707106781186548))*(x326));
IkReal x336=((cj4)*(x335));
IkReal x337=((cj4)*(x334));
IkReal x338=((sj4)*(x335));
IkReal x339=((sj4)*(x334));
IkReal x340=((x335)+(x334));
evalcond[0]=((((IkReal(-1.00000000000000))*(x336)))+(((IkReal(-1.00000000000000))*(x337)))+(new_r20));
evalcond[1]=((x336)+(((IkReal(-1.00000000000000))*(x337)))+(new_r21));
evalcond[2]=((((cj5)*(new_r10)))+(((new_r00)*(sj5)))+(x335)+(((IkReal(-1.00000000000000))*(x334))));
evalcond[3]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x340));
evalcond[4]=((x329)+(((IkReal(-1.00000000000000))*(x332)))+(((IkReal(-1.00000000000000))*(x338)))+(((IkReal(-1.00000000000000))*(x339))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x328)))+(x338)+(x331)+(((IkReal(-1.00000000000000))*(x339))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x329)*(x330)))+(((IkReal(-1.00000000000000))*(new_r20)*(x333)))+(x340)+(((sj4)*(x332))));
evalcond[7]=((((sj4)*(x328)))+(((IkReal(-1.00000000000000))*(new_r21)*(x333)))+(x334)+(((IkReal(-1.00000000000000))*(x330)*(x331)))+(((IkReal(-1.00000000000000))*(x335))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x341=((IkReal(1.41421356237310))*(new_r20));
IkReal x342=((IkReal(1.41421356237310))*(new_r21));
if( IKabs(((gconst13)*(((x342)+(x341))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((x341)+(((IkReal(-1.00000000000000))*(x342))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst13)*(((x342)+(x341)))), ((gconst13)*(((x341)+(((IkReal(-1.00000000000000))*(x342)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x343=IKcos(j3);
IkReal x344=IKsin(j3);
IkReal x345=((new_r11)*(sj5));
IkReal x346=((cj5)*(new_r00));
IkReal x347=((IkReal(1.00000000000000))*(sj4));
IkReal x348=((cj5)*(new_r01));
IkReal x349=((new_r10)*(sj5));
IkReal x350=((IkReal(1.00000000000000))*(cj4));
IkReal x351=((IkReal(0.707106781186548))*(x344));
IkReal x352=((IkReal(0.707106781186548))*(x343));
IkReal x353=((cj4)*(x352));
IkReal x354=((cj4)*(x351));
IkReal x355=((sj4)*(x352));
IkReal x356=((sj4)*(x351));
IkReal x357=((x351)+(x352));
evalcond[0]=((((IkReal(-1.00000000000000))*(x354)))+(((IkReal(-1.00000000000000))*(x353)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x354)))+(x353)+(new_r21));
evalcond[2]=((((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(x351)))+(((new_r00)*(sj5)))+(x352));
evalcond[3]=((((cj5)*(new_r11)))+(((new_r01)*(sj5)))+(x357));
evalcond[4]=((((IkReal(-1.00000000000000))*(x356)))+(((IkReal(-1.00000000000000))*(x355)))+(x346)+(((IkReal(-1.00000000000000))*(x349))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x356)))+(x355)+(x348)+(((IkReal(-1.00000000000000))*(x345))));
evalcond[6]=((x357)+(((IkReal(-1.00000000000000))*(x346)*(x347)))+(((sj4)*(x349)))+(((IkReal(-1.00000000000000))*(new_r20)*(x350))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x352)))+(x351)+(((IkReal(-1.00000000000000))*(x347)*(x348)))+(((sj4)*(x345)))+(((IkReal(-1.00000000000000))*(new_r21)*(x350))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - mk2_torso_arm_description (eb3e1612facf85cf14dffc32dc24a9f9)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
